##########################################################################################################################
##########################################################################################################################
## Hello,                                                                                                               ##
## I am the Scandinavian, the creator of this script.                                                                   ##
## Chances are you haven't heard of me until now.                                                                       ##
## The script the work of an amateur with a slightly-more-than-passing interest in the Warhammer 40,000 setting.        ##
##                                                                                                                      ##
## The creation table I worked off of was originally made by the anons on 4chan's /tg/.                                 ##
## If you're curious, it can be found on 1d4chan.org.                                                                   ##
## I have never personally visited /tg/, unless after the time of writing this I shared this script there.              ##
## If anyone from /tg/ reads this, thanks for the inspiraton guys.                                                      ##
## I manually rolled 52 Chapters on the table before I got the idea to automate the process.                            ##
##                                                                                                                      ##
## Most of the sources I've used for the roll results are from 1d4chan, Lexicanum, or the Warhammer 40k Wiki.           ##
## Perhaps unsurprisingly, cross-referencing was a mess. I can now sympathize with the Adeptus Administratum.           ##
##                                                                                                                      ##
## Prior to writing this, I had very little coding experience, and none at all in Python.                               ##
## With that in mind, please be aware that the script is not at all perfect, but it does work.                          ##
## It will allow you to automatically generate a Space Marine Chapter in the form of a text document.                   ##
## (Names are not generated, you'll have to do that part.)                                                              ##
##                                                                                                                      ##
## The script's only requirement is that Python is installed.                                                           ##
## Without Python installed, the script will not work.                                                                  ##
##                                                                                                                      ##
## The text file generated by the script will be put in the same folder as the script itself.                           ##
## It will be called "Your Chapter.txt" - I recommend that you store the script in its own folder.                      ##
##                                                                                                                      ##
## VERY IMPORTANT:                                                                                                      ##
##                                                                                                                      ##
## BE AWARE THAT RUNNING THE SCRIPT TWICE DOES NOT CREATE 2 TEXT FILES.                                                 ##
## THE 2ND TEXT FILE WILL OVERRIDE THE 1ST.                                                                             ##
## IF YOU WANT TO KEEP THE TEXT FILE, YOU SHOULD RENAME IT OR MOVE IT.                                                  ##
##                                                                                                                      ##
## The script is easily modifiable.                                                                                     ##
## Simply alter the generated text (the green codelines in the f.writelines("") sections).                              ##
## Be aware that \n is a function that writes text on a new line. Without it, the text output would all be on one line. ##
##                                                                                                                      ##
## The code should be fairly easy to read.                                                                              ##
## To a seasoned coder, I'm sure many parts of it appear crude or inefficient, but I tried to at least make it legible. ##
##                                                                                                                      ##
## Mandatory disclaimer:                                                                                                ##
## My work on this project is unpaid.                                                                                   ##
## If you paid for this script, you've been tricked.                                                                    ##
##                                                                                                                      ##
## DISCLAIMER SPECIFICALLY FOR GAMES WORKSHOP:                                                                          ##
##                                                                                                                      ##
## THIS IS IN NO WAY, SHAPE OR FORM ENDORSED, SPONSORED, APPROVED, BACKED, SANCTIONED, ADVOCATED, SUPPORTED OR LICENSED ##
## BY GAMES WORKSHOP OR ANY ONE INDIVIDUAL OFFICIALLY ASSOCIATED WITH THAT COMPANY IN ANY WAY, SHAPE OR FORM.           ##
## THIS IS NOT AN OFFICIAL PRODUCT OF GAMES WORKSHOP OR ANY ONE INDIVIDUAL OFFICIALLY ASSOCIATED WITH THAT COMPANY.     ##
## THIS IS NOT INTENDED TO INFRINGE UPON THE COPYRIGHTS OR TRADEMARKS OF GAMES WORKSHOP OR ANY ONE INDIVIDUAL           ##
## OFFICIALLY ASSOCIATED WITH THAT COMPANY.                                                                             ##
## THIS IS A NON-PROFIT FAN-MADE SCRIPT, CREATED SOLELY AS A NON-PROFIT HOBBYIST TOOL.                                  ##
## THE CONTENTS OF THIS SCRIPT ARE NOT SUBJECT TO ANY COPYRIGHT OR TRADEMARK ON MY PART.                                ##
## THE MATERIAL FROM WHICH THIS SCRIPT DRAWS INSPIRATON ARE NOT SUBJECT TO ANY COPYRIGHT OR TRADEMARK ON MY PART.       ##
## I MAKE NO CLAIMS TO WARHAMMER 40,000 OR ANY PART THEREOF IN ANY WAY, SHAPE OR FORM.                                  ##
##                                                                                                                      ##
## TO THE BEST OF MY KNOWLEDGE, THIS SCRIPT ADHERES TO THE INTELLECTUAL PROPERTY GUIDELINES LAID OUT BY GAMES WORKSHOP. ##
## TO THE BEST OF MY KNOWLEDGE, THIS SCRIPT:                                                                            ##
## - DOES NOT INCLUDE TEXT, ARTWORK OR IMAGERY FROM ANY OFFICIAL GAMES WORKSHOP MATERIAL.                               ##
## - IS NON-COMMERCIAL, WITH NO MONEY BEING RECEIVED OR PAID ON MY PART. THIS INCLUDES ALL FORMS OF FUNDRAISING         ##
##   ACTIVITY, AND GENERATION OF ANY ADVERTISING REVENUE.                                                               ##
## - IS NOT PUBLICLY DISTRUBUTED, EXCEPT FOR NO-CHARGE DIGITAL DISTRIBUTION.                                            ##
## - IS CLEARLY UNOFFICIAL, AND USES NO GAMES WORKSHOP LOGOS.                                                           ##
## - IS NOT PREJUDICIAL TO THE GOODWILL, REPUTATION OR INTEGRITY OF GAMES WORKSHOP OR ITS INTELLECTUAL PROPERTY.        ##
## - DOES NOT POST OR DISPLAY ANY RULES OR STATS COPIED FROM ANY OFFICIAL GAMES WORKSHOP MATERIAL.                      ##
##                                                                                                                      ##
## GAMES WORKSHOP RETAINS OWNERSHIP IN RESPECT OF THE UNDERLYING INTELLECTUAL PROPERTY RIGHTS OF WARHAMMER 40,000.      ##
## THIS CONTENT CANNOT BE SOLD OR OTHERWISE MONETISED.                                                                  ##
##                                                                                                                      ##
## ADDITIONALLY, TO THE BEST OF MY KNOWLEDGE, THIS SCRIPT:                                                              ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, COUNTERFEITING GAMES WORKSHOP PRODUCTS.                                        ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, IMITATING GAMES WORKSHOP PRODUCTS.                                             ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, RECASTING OR 3D PRINTING GAMES WORKSHOP PRODUCTS.                              ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, ILLEGALLY DOWNLOADING, UPLOADING, SHARING, OR DISTRUBUTING GAMES WORKSHOP      ##
##   PUBLICATONS, AUDIO BOOKS, OR OTHER MATERIALS PROTECTED BY COPYRIGHTS.                                              ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, UNAUTHORISED USE OR REGISTRATION OF GAMES WORKSHOP TRADEMARKS IN RESPECT TO    ##
##   SIMILAR PRODUCTS OR SERVICES.                                                                                      ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, CREATING FAN FILMS OR ANIMATIONS BASED ON GAMES WORKSHOP SETTINGS OR           ##
##   CHARACTERS.                                                                                                        ##
## - IS NOT CAPABLE OF, NOR INVOLVED IN, CREATING COMPUTER GAMES OR APPS BASED ON GAMES WORKSHOP CHARACTERS OR          ##
##   SETTINGS.                                                                                                          ##
##                                                                                                                      ##
## THIS SCRIPT DOES:                                                                                                    ##
## - ALLOW USERS TO EASILY GENERATE THEIR OWN CHAPTER OF SPACE MARINES BASED ON A RANDOM NUMBER GENERATOR.              ##
##                                                                                                                      ##
## THIS SCRIPT DOES NOT:                                                                                                ##
## - DO ANYTHING ELSE.                                                                                                  ##
##                                                                                                                      ##
## To clarify: a script is not an app.                                                                                  ##
## A script is a non-compiled sequence of instructions or commands for a computer to execute. I have, in effect,        ##
## created a document which a computer can read and interpret to perform an action. This particular script instructs a  ##
## computer on opening a .txt file, what to name it, what to write in it, how to format it and how to save it.          ##
## It is code that acts upon some system in an external or independent manner and can be removed or disabled without    ##
## disabling the system itself.                                                                                         ##
## An app, or a program, is code that constitutes a system. The program's code may be written in a modular manner, with ##
## good separation of concerns, but the code is fundamentally internal to, and a dependency of, the system itself.      ##
##                                                                                                                      ##
## There are other distinctions between a script and an app, but further elaboration is unnecessary here.               ##
## This script, being a script and not an app, to the best of my knowledge, does not break the intellectual property    ##
## guidelines as laid out by Games Workshop here: https://www.games-workshop.com/en-US/Intellectual-Property-Guidelines ##
##                                                                                                                      ##
## Oh, and it's open source.                                                                                            ##
##                                                                                                                      ##
## In closing, I have no idea how many people will ever use my script, let alone take the time to read all this.        ##
## If you find this message, I appreciate you.                                                                          ##
## And, if you so desire, do share my script with your friends.                                                         ##
##########################################################################################################################
##########################################################################################################################

## The following code imports the random number generator function

import random

## The following code defines the variable object for the code defining the Chapter homeworld's modifier

HomeworldModifier = None

## The following code defines the variable object for the code defining the Chapter's Founding

Founding = None

## The following code defines the variable object for the code defining the Chapter's Progenitor

ProgenitorChapter = None

## The following code defines the variable object for the code defining the Chapter's lost Zygotes
        
MissingZygote = None
MissingZygote1 = None
MissingZygote2 = None
MissingZygote3 = None
MissingZygote4 = None
MissingZygote5 = None
MissingZygote6 = None
MissingZygote7 = None
MissingZygote8 = None
        
## The following code defines the variable object for the code defining the Chapter's Mutations
        
ExistingMutations = None
ExistingMutations1 = None
ExistingMutations2 = None
ExistingMutations3 = None
ExistingMutations4 = None
ExistingMutations5 = None
ExistingMutations6 = None
ExistingMutations7 = None
ExistingMutations8 = None
        
## The following code defines the variable object for the code defining the Chapter's special equipment is Organisation is divergent or unique
        
ExistingNonCodexElement = None

## The following code defines the variable object for the code definint the Chapter's Codex elements

ExistingCodexElement = None

## The following code defines the variable object for the code defining the Chaoter's unit restrictions

UnitRestrictions = None

## The  following code defines the variable object for the code defining the Chapter's quirks

ChapterQuirk = None
ChapterQuirk1 = None
ChapterQuirk2 = None
ChapterQuirk3 = None

## The following code defines the variable object for the code defining Primaris reinforcements

PrimarisReinforcements = None

## The following code defines the variable object for the code defining the Chapter's homeworld

Homeworld = None

## The following code defines the variable object for the code defining non-progenitor elements

ExistingNonProgenitorElement = None

## The following code defines the variable object for the code defining the Chapter's legendary figure

LegendaryFigure = None

## The following code defines the variable object for the code defining the Chapter's combat doctrine

CombatDoctrine = None

## The following code defines the Chapter creation script as a whole

def ChapterCreationTable():

## The following code is apparently necessary for these variables to be called properly later

    global HomeworldModifier
    global Founding
    global ProgenitorChapter
    global MissingZygote
    global MissingZygote1
    global MissingZygote2
    global MissingZygote3
    global MissingZygote4
    global MissingZygote5
    global MissingZygote6
    global MissingZygote7
    global MissingZygote8
    global ExistingMutations
    global ExistingMutations1
    global ExistingMutations2
    global ExistingMutations3
    global ExistingMutations4
    global ExistingMutations5
    global ExistingMutations6
    global ExistingMutations7
    global ExistingMutations8
    global ExistingNonCodexElement
    global ExistingCodexElement
    global UnitRestrictions
    global ChapterQuirk
    global ChapterQuirk1
    global ChapterQuirk2
    global ChapterQuirk3
    global PrimarisReinforcements
    global Homeworld
    global ExistingNonProgenitorElement
    global LegendaryFigure
    global CombatDoctrine

## The following code defines the manner in which the Chapter's Homeworld is ruled

    def HomeworldRule():
        f.writelines("\n")
        f.writelines("\n    Rule of Homeworld")
        NumHomeworldRule = random.randint (1,10)
        print("Homeworld Rule Roll:")
        print(NumHomeworldRule)
        if NumHomeworldRule <= 1:
            f.writelines("\nDirect: this Chapter rules the world themselves, and are personally involved in local affairs.")
        elif NumHomeworldRule <= 4:
            f.writelines("\nStewardship: this Chapter rules the world via a proxy in the form of a local human governor or equivalent.")
        elif NumHomeworldRule <= 10:
            f.writelines("\nDistant: this Chapter rules the world in name only, and are marginally involved in local affairs at most.")

## The following code defines to what degree the Chapter is royally fucked

    def DOOMED():
        global ExistingMutations
        global ExistingMutations1
        global ExistingMutations2
        global ExistingMutations3
        global ExistingMutations4
        global ExistingMutations5
        global ExistingMutations6
        global ExistingMutations7
        global ExistingMutations8
        NumDoomed = random.randint(1,3)
        print("Doomed Roll:")
        print(NumDoomed)
        if NumDoomed <= 1 and "DOOMED" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nDOOMED: this Chapter can only produce a single Progenoid Gland: the one in the neck. It takes 5 years to mature; if an Astartes dies prior to then, the gene-seed is lost.")
            ExistingMutations = "DOOMED"
        elif NumDoomed <= 2 and "DOOMED" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nDOOMED: this Chapter can only produce a single Progenoid Gland: the one in the chest. It takes 10 years to mature; if an Astartes dies prior to then, the gene-seed is lost.")
            ExistingMutations = "DOOMED"
        elif NumDoomed <= 3 and "DOOMED" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nDOOMED: this Chapter has lost the ability to create new Progenoid Glands. Unless this is somehow fixed, they are doomed to suffer a slow death by attrition.")
            ExistingMutations = "DOOMED"

## The following code defines the Chapter's special equipment if Organisation is Divergent or Unique

    def NonCodexElement():
        global ExistingNonCodexElement
        global UnitRestrictions
        NumNonCodexElement = random.randint (1,251)
        print("Non-Codex Element Roll:")
        print(NumNonCodexElement)
        if NumNonCodexElement <= 10 and ExistingNonCodexElement != "Favored Weapon":
            f.writelines("\nFavored Weapon: contrary to Codex standards, this Chapter has a strong preference for a particular type of weapon, whether due to culture, circumstance or some other factor. They will use this whenever feasible. Perhaps, if they're dedicated enough, even when conventionally thought unfeasible or impractical.")
            ExistingNonCodexElement = "Favored Weapon"
        elif NumNonCodexElement <= 20 and ExistingNonCodexElement != "Unique Markings":
            f.writelines("\nUnique Markings: contrary to Codex standards, this Chapter uses its own particular means of marking various units and identifying certain ranks.")
            ExistingNonCodexElement = "Unique Markings"
        elif NumNonCodexElement <= 30 and ExistingNonCodexElement != "Modified Packs":
            f.writelines("\nModified Jump Packs: contrary to Codex standards, this Chapter has made extensive modificatons to their jump packs, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Packs"
        elif NumNonCodexElement <= 40 and ExistingNonCodexElement != "Beast Companions":
            f.writelines("\nBestial Companion: contrary to Codex standards, this Chapter maintains a population of animals that are important to either their culture, battlefield tactis and strategies, or both.")
            ExistingNonCodexElement = "Beast Companions"
        elif NumNonCodexElement <= 50 and ExistingNonCodexElement != "Rare Weapons":
            f.writelines("\nRare Weaponry: contrary to Codex standards, this Chapter, for one reason or another, has access to, and fields, an abnormally large number of weapons otherwise considered rare, exotic, or both.")
            ExistingNonCodexElement = "Rare Weapons"
        elif NumNonCodexElement <= 60 and ExistingNonCodexElement != "Blessed Gear":
            f.writelines("\nBlessed Wargear: contrary to Codex standards, this Chapter requires its arms and armor to be individually consecrated by a Chaplain (or equivalent) before going to war.")
            ExistingNonCodexElement = "Blessed Gear"
        elif NumNonCodexElement <= 70 and ExistingNonCodexElement != "Special Mounts":
            f.writelines("\nSpecial Mounts: contrary to Codex standards, this Chapter makes use of either modified bikes, genetically engineered animals, or something else entirely to carry them into battle.")
            ExistingNonCodexElement = "Special Mounts"
        elif NumNonCodexElement <= 80 and ExistingNonCodexElement != "Modified Vehicles":
            f.writelines("\nModified Vehicles: contrary to Codex standards, this Chapter has made extensive modifications to their vehicles, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Vehicles"
        elif NumNonCodexElement <= 90 and ExistingNonCodexElement != "Special Style":
            f.writelines("\nPreferred Fighting Style: contrary to Codex standards, this Chapter has adopted methods of waging war, whether individually or as a unit, that are considered unusual or unorthodox by Astartes standards.")
            ExistingNonCodexElement = "Special Style"
        elif NumNonCodexElement <= 100 and ExistingNonCodexElement != "Modified Weapons":
            f.writelines("\nModified Weaponry: contrary to Codex standards, this Chapter has made extensive modificatons to their weaponry, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Weapons"
        elif NumNonCodexElement <= 110 and ExistingNonCodexElement != "Modified Armor":
            f.writelines("\nModified Armor: contrary to Codex standards, this Chapter has made extensive modificatons to their armor, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Armor"
        elif NumNonCodexElement <= 120 and ExistingNonCodexElement != "Unique Rank Combo":
            f.writelines("\nUnique Rank Combinations: contrary to Codex standards, this Chapter has folded two (or, very rarely, more) ranks into one, such as combining the roles of Apothecary and Librarian, or Chaplain and Techmarine.")
            ExistingNonCodexElement = "Unique Rank Combo"
        elif NumNonCodexElement <= 130 and ExistingNonCodexElement != "AlteredTerminatorRules" and UnitRestrictions != "Terminator":
            f.writelines("\nAltered Teminator Rules: contrary to Codex standards, this Chapter does not reserve its terminator armor for 1st Company Veterans, instead issuing it by some other criteria. For example, it might instead be reserved solely for Apothecaries.")
            ExistingNonCodexElement = "AlteredTerminatorRules"
        elif NumNonCodexElement <= 140 and ExistingNonCodexElement != "AlteredScoutOrg":
            f.writelines("\nUnorthodox Neophytes: contrary to Codex standards, this Chapter does not field its Neophytes as Scouts. New recruits might instead fill some other role, and might not even be organised into their own separate Company.")
            ExistingNonCodexElement = "AlteredScoutOrg"
        elif NumNonCodexElement <= 150 and ExistingNonCodexElement != "UnorthodoxMasterSelection" and UnitRestrictions != "Master":
            f.writelines("\nUnorthodox Chapter Master Selection: contrary to Codex standards, this Chapter does not select its Chapter Master from amongst its Captains, instead preferring some other selection criteria. For example, Chapter Masters may be drawn from the Chapter's Champions.")
            ExistingNonCodexElement = "UnorthodoxMasterSelection"
        elif NumNonCodexElement <= 160 and ExistingNonCodexElement != "UnorthodoxCaptainSelection" and UnitRestrictions != "Captain":
            f.writelines("\nUnorthodox Captain Selection: contrary to Codex standards, this Chapter does not select its Captains from amongst its 1st Company Veterans, instead preferring some other selection criteria. For example, Captains may be drawn from the Chapter's Sergeants.")
            ExistingNonCodexElement = "UnorthodoxCaptainSelection"
        elif NumNonCodexElement <= 170 and ExistingNonCodexElement != "UnorthodoxSergeantSelection" and UnitRestrictions != "Sergeant":
            f.writelines("\nUnorthodox Sergeant Selection: contrary to Codex standards, this Chapter does not select its Sergeants from amongst its Veterans, instead preferring some other selection criteria. For example, Sergeants may be selected based on their mortal family's social standing, such as being nobility or part of a martial caste.")
            ExistingNonCodexElement = "UnorthodoxSergeantSelection"
        elif NumNonCodexElement <= 180 and ExistingNonCodexElement != "UnorthodoxChaplainSelection" and UnitRestrictions != "Chaplain":
            f.writelines("\nUnorthodox Chaplain Selection: contrary to Codex standards, this Chapter has its own selection criteria for its spiritual caretakers. For example, they may be selected based on religious aspects of their homeworld's culture.")
            ExistingNonCodexElement = "UnorthodoxChaplainSelection"
        elif NumNonCodexElement <= 190 and ExistingNonCodexElement != "UnorthodoxApothecarySelection" and UnitRestrictions != "Apothecary":
            f.writelines("\nUnorthodox Apothecary Selection: contrary to Codex standards, this Chapter has its own selection criteria for its medics. For example, they may be drawn entirely from the Chapter's Sergeants.")
            ExistingNonCodexElement = "UnorthodoxApothecarySelection"
        elif NumNonCodexElement <= 200 and ExistingNonCodexElement != "UnorthodoxTechmarineSelection" and UnitRestrictions != "Techmarine":
            f.writelines("\nUnorthodox Techmarine Selection: contrary to Codex standards, this Chapter has its own selection criteria for its machine specialists. For example, they may be selected based on some technological superstition, such as a cogitator's random number generator selecting which Astartes to train as Techmarines.")
            ExistingNonCodexElement = "UnorthodoxTechmarineSelection"
        elif NumNonCodexElement <= 210 and ExistingNonCodexElement != "UnorthodoxDevastatorSelection" and UnitRestrictions != "Devastator":
            f.writelines("\nUnorthodox Devastator Selection: contrary to Codex standards, this Chapter does not select its Devastators from its recruits, instead preferring some other selection criteria. For example, Devastators may instead be selected based on existing marksmanship skills, rather than to build them.")
            ExistingNonCodexElement = "UnorthodoxDevastatorSelection"
        elif NumNonCodexElement <= 220 and ExistingNonCodexElement != "UnorthodoxAssaultSelection" and UnitRestrictions != "Assault":
            f.writelines("\nUnorthodox Assault Marine Selection: contrary to Codex standards, this Chapter does not select its Assault Marines from its Devastators, instead preferring some other selection criteria. For example, Assault Marines may instead be selected based on temperament.")
            ExistingNonCodexElement = "UnorthodoxAssaultSelection"
        elif NumNonCodexElement <= 230 and ExistingNonCodexElement != "UnorthodoxDreadnoughtSelection" and UnitRestrictions != "Dreadnought":
            f.writelines("\nUnorthodox Dreadnought Selection: contrary to Codex standards, this Chapter does not inter its most gravely wounded in Dreadnoughts, instead preferring some other criteria. For example, Dreadnoughts may instead be entirely comprised of volunteers. The Chapter will still need some other way to deal with its most gravely wounded Astartes.")
            ExistingNonCodexElement = "UnorthodoxDreadnoughtSelection"
        elif NumNonCodexElement <= 240 and ExistingNonCodexElement != "Unique Battle Language":
            f.writelines("\nUnique Battle Language: contrary to Codex standards, this Chapter maintains its own Battle-Sign language, distinct enough from standard Astartes Battle-Sign that they are not mutually understood.")
            ExistingNonCodexElement = "Unique Battle Language"
        elif NumNonCodexElement <= 250 and ExistingNonCodexElement != "Unique Company Structure":
            f.writelines("\nUnique Company Structure: contrary to Codex standards, this Chapter does not have a Veteran Company, 4 Battle Companies, 4 Reserve Companies and a Scout Company, instead preferring some other organisation of Astartes into Companies or equivalent groupings. For example, they might evenly spread their marines across a number of identical Companies, or use an entirely different internal structure instead.")
        elif NumNonCodexElement <= 251 and ExistingNonCodexElement != "Truly Unusual":
            f.writelines("\nChoose something truly unusual.")
            ExistingNonCodexElement = "Truly Unusual"

## The following code defines the Chapter's Codex elements

    def CodexElement():
        global ExistingCodexElement
        NumCodexElement = random.randint (1,10)
        print("Codex Element Roll:")
        print(NumCodexElement)
        if NumCodexElement <= 1 and ExistingCodexElement != "Narrow":
            f.writelines("\nNarrow Interpretation: this Chapter has a very narrow perception of the Codex, more-so than originally intended when it was penned.")
            ExistingCodexElement = "Narrow"
        elif NumCodexElement <= 2 and ExistingCodexElement != "Strict":
            f.writelines("\nStrict Interpretation: this Chapter is very strict in its enforcement of the Codex, with severe punishments for deviating from its teachings.")
            ExistingCodexElement = "Strict"
        elif NumCodexElement <= 3 and ExistingCodexElement != "Creative":
            f.writelines("\nCreative Interpretation: this Chapter is not alone in viewing the Codex as open to interpretation, but it tends to have some rather peculiar ones as compared to its peers.")
            ExistingCodexElement = "Creative"
        elif NumCodexElement <= 4 and ExistingCodexElement != "Flexible":
            f.writelines("\nFlexible Interpretation: this Chapter considers the Codex to be an invaluable set of guidelines, but also acknowledges that it may not have all the answers to every conceivable scenario.")
            ExistingCodexElement = "Flexible"
        elif NumCodexElement <= 5 and ExistingCodexElement != "Plain":
            f.writelines("\nPlain Interpretation: this Chapter has no unusual interpretations of the Codex whatsoever. For all intents and purpose, it's an ordinary baseline Codex-compliant Chapter.")
            ExistingCodexElement = "Plain"
        elif NumCodexElement <= 6 and ExistingCodexElement != "True":
            f.writelines("\nTrue Interpretation: this Chapter considers itself to be the only one to truly embrace the Codex.")
            ExistingCodexElement = "True"
        elif NumCodexElement <= 7 and ExistingCodexElement != "Loophole":
            f.writelines("\nLoophole Interpretation: this Chapter is famous, or infamous, for exploiting loopholes in the Codex to suit their own needs. Examples include crusading Chapters being exempt from the usual limit of 1000 fighting men, and there being no limits on vehicle numbers.")
            ExistingCodexElement = "Loophole"
        elif NumCodexElement <= 8 and ExistingCodexElement != "Proselytic":
            f.writelines("\nProselytic Interpretaton: this Chapter actively seeks to convince non-compliant Chapters of the Codex' superiority.")
            ExistingCodexElement = "Proselytic"
        elif NumCodexElement <= 9 and ExistingCodexElement != "Particular":
            f.writelines("\nParticular Interpretation: this Chapter tends to hold certain parts of the Codex in higher regard than others. Its Astartes may all be of the same mind in this, or they might have internal disagreements on the matter.")
            ExistingCodexElement = "Particular"
        elif NumCodexElement <= 10 and ExistingCodexElement != "Lip":
            f.writelines("\nLip-Service: this Chapter is outwardly Codex-compliant, but secretly has little love for it.")
            ExistingCodexElement = "Lip"

## The following code defines the Chapter's non-Progenitor elements

    def NonProgenitorElement():
        global ExistingNonProgenitorElement
        global ProgenitorChapter
        if ProgenitorChapter == "Dark Angels":
            NumNonProgenitorElement = random.randint (1,11)
            print("Non-Progenitor Element Roll:")
            print(NumNonProgenitorElement)
            if NumNonProgenitorElement <= 2 and ExistingNonProgenitorElement != "Forgiven":
                f.writelines("\nForgiven: for one reason or another, this Chapter has lost much interest in hunting the Fallen Angels. They most likely haven't abandoned it entirely, but may be one of the very few who have.")
                ExistingNonProgenitorElement = "Forgiven"
            elif NumNonProgenitorElement <= 4 and ExistingNonProgenitorElement != "No Deathwing":
                f.writelines("\nNo Deathwing: for one reason or another, this Chapter no longer fields Deathwing Astartes. They may instead have reverted to Codex-compliant Terminators, have no terminator armor at all, or something else entirely.")
                ExistingNonProgenitorElement = "No Deathwing"
            elif NumNonProgenitorElement <= 6 and ExistingNonProgenitorElement != "No Ravenwing":
                f.writelines("\nNo Ravenwing: for one reason or another, this Chapter no longer fields Ravenwing Astartes. They may instead have reverted to Codex-compliant Bike Squads, have no bikes at all, or something else entirely.")
                ExistingNonProgenitorElement = "No Ravenwing"
            elif NumNonProgenitorElement <= 8 and ExistingNonProgenitorElement != "Different Company":
                f.writelines("\nDifferent Company Structure: for one reason or another, this Chapter eschews the Company structure laid out by its progenitor. They may instead have reverted to the Codex-compliant structure, or something else entirely.")
                ExistingNonProgenitorElement = "Different Company"
            elif NumNonProgenitorElement <= 10 and ExistingNonProgenitorElement != "Compliant":
                f.writelines("\nCodex-Compliant: for one reason or another, this Chapter has decided to eschew the ways of its progenitor, instead embracing the Codex Astartes, although not necessarily in its entirety.")
                ExistingNonProgenitorElement = "Compliant"
            elif NumNonProgenitorElement <= 11 and ExistingNonProgenitorElement != "Unusual":
                f.writelines("\nChoose something truly unusual.")
                ExistingNonProgenitorElement = "Unusual"
        if ProgenitorChapter == "Blood Angels":
            NumNonProgenitorElement = random.randint (1,11)
            print("Non-Progenitor Element Roll:")
            print(NumNonProgenitorElement)
            if NumNonProgenitorElement <= 2 and ExistingNonProgenitorElement != "No Sanguinary":
                f.writelines("\nNo Sanguinary Guard: for one reason or another, this Chapter no longer fields Sanguinary Guards. They may instead have reverted to Codex-compliant Honor Guards, have lost the means to produce their unique equipment, or something else entirely.")
                ExistingNonProgenitorElement = "No Sanguinary"
            elif NumNonProgenitorElement <= 4 and ExistingNonProgenitorElement != "No Angel Equipment":
                f.writelines("\nNo Blood Angel-Specific Equipment: for one reason or another, this Chapter no longer fields units normally restricted to the Blood Angels and their successors, such as the Baal-Pattern Predator. They have instead have reverted to using Codex-compliant equipment, have lost the means to produce it, or something else entirely.")
                ExistingNonProgenitorElement = "No Angel Equipment"
            elif NumNonProgenitorElement <= 6 and ExistingNonProgenitorElement != "Thirst Solution":
                f.writelines("\nUnusual Red Thirst 'Solution': this Chapter has found some unique means by which they believe they can reduce the frequency and/or effects of the Red Thirst. Whether or not it actually works, they nonetheless use it, and may view it as their sole hope for salvation from The Flaw. Or, alternately, they might just euthanise any Astartes who falls under its influence.")
                ExistingNonProgenitorElement = "Thirst Solution"
            elif NumNonProgenitorElement <= 8 and ExistingNonProgenitorElement != "Rage Solution":
                f.writelines("\nUnusual Black Rage 'Solution': this Chapter has found some unique means by which they believe they can reduce the frequency and/or effects of the Black Rage. Whether or not it actually works, they nonetheless use it, and may view it as their sole hope for salvation from The Flaw. Or, alternately, they might just euthanise any Astartes who falls under its influence.")
                ExistingNonProgenitorElement = "Rage Solution"
            elif NumNonProgenitorElement <= 10 and ExistingNonProgenitorElement != "Compliant":
                f.writelines("\nCodex-Compliant: for one reason or another, this Chapter has decided to eschew the ways of its progenitor, instead embracing the Codex Astartes, although not necessarily in its entirety.")
                ExistingNonProgenitorElement = "Compliant"
            elif NumNonProgenitorElement <= 11 and ExistingNonProgenitorElement != "Unusual":
                f.writelines("\nChoose something truly unusual.")
                ExistingNonProgenitorElement = "Unusual"
        if ProgenitorChapter == "Iron Hands":
            NumNonProgenitorElement = random.randint (1,11)
            print("Non-Progenitor Element Roll:")
            print(NumNonProgenitorElement)
            if NumNonProgenitorElement <= 2 and ExistingNonProgenitorElement != "Non-Clan":
                f.writelines("\nNon-Clan System: for one reason or another, this Chapter eschews the Clan system of its progenitor. They may instead have reverted to a Codex-compliant system, or something else entirely.")
                ExistingNonProgenitorElement = "Non-Clan"
            elif NumNonProgenitorElement <= 4 and ExistingNonProgenitorElement != "No Cybernetics":
                f.writelines("\nNo Cybernetics: for one reason or another, this Chapter no longer shares its progenitor's obsession with cybernetic enhancements. Their obsession may have changed, or is simply gone.")
                ExistingNonProgenitorElement = "No Cybernetics"
            elif NumNonProgenitorElement <= 6 and ExistingNonProgenitorElement != "Chapter Master":
                f.writelines("\nChapter Master: for one reason or another, this Chapter has decided to reinstate the office of Chapter Master, although not necessarily under that name.")
                ExistingNonProgenitorElement = "Chapter Master"
            elif NumNonProgenitorElement <= 8 and ExistingNonProgenitorElement != "Non-Sergeant Terminators":
                f.writelines("\nNon-Sergeant Terminators: for one reason or another, this Chapter no longer reserves its terminator armor for S")
                ExistingNonProgenitorElement = "Non-Sergeant Terminators"
            elif NumNonProgenitorElement <= 10 and ExistingNonProgenitorElement != "Compliant":
                f.writelines("\nCodex-Compliant: for one reason or another, this Chapter has decided to eschew the ways of its progenitor, instead embracing the Codex Astartes, although not necessarily in its entirety.")
                ExistingNonProgenitorElement = "No Compliant"
            elif NumNonProgenitorElement <= 11 and ExistingNonProgenitorElement != "Unusual":
                f.writelines("\nChoose something truly unusual.")
                ExistingNonProgenitorElement = "No Unusual"
        if ProgenitorChapter == "Space Wolves":
            NumNonProgenitorElement = random.randint (1,11)
            print("Non-Progenitor Element Roll:")
            print(NumNonProgenitorElement)
            if NumNonProgenitorElement <= 2 and ExistingNonProgenitorElement != "No Claws":
                f.writelines("\nNo Blood Claws: for one reason or another, this Chapter no longer uses Blood Claws, at least not to break in Neophytes. They may instead have reverted to a Codex-compliant Neophyte role, or something else entirely.")
                ExistingNonProgenitorElement = "No Claws"
            elif NumNonProgenitorElement <= 4 and ExistingNonProgenitorElement != "No Wolf":
                f.writelines("\nNo Wolf Priests: for one reason or another, this Chapter no longer uses Wolf Priests. They may have returned to using Apothecaries and Chaplains in separate roles, ceased using one of the two altogether, or something else entirely.")
                ExistingNonProgenitorElement = "No Wolf"
            elif NumNonProgenitorElement <= 6 and ExistingNonProgenitorElement != "No Rune":
                f.writelines("\nNo Rune Priests: for one reason or another, this Chapter no longer uses Rune Priests. They may have done away with their progenitor's disdain for psykers, hate psykers even more and recognised that Rune Priests are actually psykers, or something else entirely.")
                ExistingNonProgenitorElement = "No Rune"
            elif NumNonProgenitorElement <= 8 and ExistingNonProgenitorElement != "Non-Pack":
                f.writelines("\nNon-Pack Organisaton: for one reason or another, this Chapter eschews the Pack system of its progenitor. They may instead have reverted to a Codex-compliant system, or something else entirely.")
                ExistingNonProgenitorElement = "Non-Pack"
            elif NumNonProgenitorElement <= 10 and ExistingNonProgenitorElement != "Compliant":
                f.writelines("\nCodex-Compliant: for one reason or another, this Chapter has decided to eschew the ways of its progenitor, instead embracing the Codex Astartes, although not necessarily in its entirety.")
                ExistingNonProgenitorElement = "Compliant"
            elif NumNonProgenitorElement <= 11 and ExistingNonProgenitorElement != "Unusual":
                f.writelines("\nChoose something truly unusual.")
                ExistingNonProgenitorElement = "Unusual"
        if ProgenitorChapter == "Salamanders":
            NumNonProgenitorElement = random.randint (1,11)
            print("Non-Progenitor Element Roll:")
            print(NumNonProgenitorElement)
            if NumNonProgenitorElement <= 2 and ExistingNonProgenitorElement != "Non-Great Company":
                f.writelines("\nNon-Great Company Organisaton: for one reason or another, this Chapter has decided to do away with the Great Companies of its progenitor. They may instead have reverted to a Codex-compliant system, or something else entirely.")
                ExistingNonProgenitorElement = "Non-Great Company"
            elif NumNonProgenitorElement <= 4 and ExistingNonProgenitorElement != "Different 1st":
                f.writelines("\nDifferent 1st Company Leadership: for one reason or another, this Chapter's 1st Company is not lead by the Chapter Master, as is the case with the Salamanders. They may instead have reverted to using a 1st Company Captain as dictated by the Codex Astartes, or something else entirely.")
                ExistingNonProgenitorElement = "Different 1st"
            elif NumNonProgenitorElement <= 6 and ExistingNonProgenitorElement != "No Fire":
                f.writelines("\nNo Fire Preference: for one reason or another, this Chapter does not share its progenitor's preference for fire- and heat-based weaponry. They may even distance themselves from such weapons, have some other peculiar preference, or something else entirely.")
                ExistingNonProgenitorElement = "No Fire"
            elif NumNonProgenitorElement <= 8 and ExistingNonProgenitorElement != "No Promethean":
                f.writelines("\nNo Promethean Cult: for one reason or another, this Chapter has rejected the Promethean Cult of its progenitor. They may have adopted some other variant of the Imperial Cult, returned to more mundane beliefs, or something else entirely.")
                ExistingNonProgenitorElement = "No Promethean"
            elif NumNonProgenitorElement <= 10 and ExistingNonProgenitorElement != "Compliant":
                f.writelines("\nCodex-Compliant: for one reason or another, this Chapter has decided to eschew the ways of its progenitor, instead embracing the Codex Astartes, although not necessarily in its entirety.")
                ExistingNonProgenitorElement = "Compliant"
            elif NumNonProgenitorElement <= 11 and ExistingNonProgenitorElement != "Unusual":
                f.writelines("\nChoose something truly unusual.")
                ExistingNonProgenitorElement = "Unusual"

## The following code defines the Chapter's unit restrictions

    def UnitRestrictions():
        global UnitRestrictions
        f.writelines("\n")
        f.writelines("\n    Unit Restrictions")
        NumUnitRestrictions = random.randint (1,100)
        print("Unit Restrictions Roll:")
        print(NumUnitRestrictions)
        if NumUnitRestrictions <= 15:
            f.writelines("\nThis Chapter has no Apothecaries; someone else takes on the crucial responsibility of collecting progenoids from their fallen brothers.")
            UnitRestrictions = "Apothecary"
        elif NumUnitRestrictions <= 30:
            f.writelines("\nThis Chapter has no Assault Squads; jump packs can still be issued, if the Chapter has access to them at all.")
            UnitRestrictions = "Assault"
        elif NumUnitRestrictions <= 45:
            f.writelines("\nThis Chapter has no Devastator Squads; heavy weapons can still be issued, if the Chapter has access to them at all.")
            UnitRestrictions = "Devastator"
        elif NumUnitRestrictions <= 60:
            f.writelines("\nThis Chapter has no Techmarines; someone else takes on the vital task of repairing and maintenaning the Chapter's weapons and machines.")
            UnitRestrictions = "Techmarine"
        elif NumUnitRestrictions <= 75:
            f.writelines("\nThis Chapter has no Librarians; someone else accepts the mission of keeping the Chapter's lore, recording its history and maintaining its library.")
            UnitRestrictions = "Librarian"
        elif NumUnitRestrictions <= 90:
            f.writelines("\nThis Chapter has no Chaplains; someone else shoulders the burden of looking after the Chapter's relics and their brothers' spiritual well-being.")
            UnitRestrictions = "Chaplain"
        elif NumUnitRestrictions <= 105:
            f.writelines("\nThis Chapter has no Terminators; for whatever reason, they have no terminator armor available.")
            UnitRestrictions = "Terminator"
        elif NumUnitRestrictions <= 98:
            f.writelines("\nThis Chapter has no Chapter Master; some other office or council needs to perform the tasks otherwise carried out by the Chapter Master.")
            UnitRestrictions = "Master"
        elif NumUnitRestrictions <= 99:
            f.writelines("\nThis Chapter has no Dreadnoughts; something else needs to be done with the severely wounded.")
            UnitRestrictions = "Dreadnought"
        elif NumUnitRestrictions <= 100:
            f.writelines("\nChoose something truly unusual.")

## The following code defines modifiers for the Chapter's Homeworld

    def HomeworldModifier():
        global HomeworldModifier
        NumHomeworldModifier = random.randint (1,100)
        print("Homeworld Modifier Roll:")
        print(NumHomeworldModifier)
        if NumHomeworldModifier <= 25:
            f.writelines("\nTemperate ")
            HomeworldModifier = "Temperate"
        elif NumHomeworldModifier <= 50:
            f.writelines("\nArid ")
            HomeworldModifier = "Arid"
        elif NumHomeworldModifier <= 60:
            f.writelines("\nFrozen ")
            HomeworldModifier = "Frozen"
        elif NumHomeworldModifier <= 65:
            f.writelines("\nOceanic ")
            HomeworldModifier = "Oceanic"
        elif NumHomeworldModifier <= 75:
            f.writelines("\nFeral ")
            HomeworldModifier = "Feral"
        elif NumHomeworldModifier <= 80:
            f.writelines("\nMountainous ")
            HomeworldModifier = "Mountainous"
        elif NumHomeworldModifier <= 85:
            f.writelines("\nPenal ")
            HomeworldModifier = "Penal"
        elif NumHomeworldModifier <= 90:
            f.writelines("\nSubterranean ")
            HomeworldModifier = "Subterranean"
        elif NumHomeworldModifier <= 99:
            f.writelines("\nForbidden ")
            HomeworldModifier = "Forbidden"
        elif NumHomeworldModifier == 100:
            f.writelines("\nSunless ")
            HomeworldModifier = "Sunless"
            
## The following code defines a function that writes out extra text for homeworlds depending on its modifier.

    def HomeworldModifierText():
        global HomeworldModifier
        if HomeworldModifier == "Temperate":
            f.writelines(" The world possesses a mild climate, agreeable to most humans.")
        if HomeworldModifier == "Arid":
            f.writelines(" The world possesses a very dry climate, and may feature extensive deserts.")
        if HomeworldModifier == "Frozen":
            f.writelines(" The world possesses an extremely cold climate, hazardous to most humans.")
        if HomeworldModifier == "Oceanic":
            f.writelines(" The world possesses vast oceans, covering 85% to 95% of the surface.")
        if HomeworldModifier == "Feral":
            f.writelines(" The world has regressed to a state of primitive tribalism, regardless of its previous technological level and remaining infrastructure.")
        if HomeworldModifier == "Mountainous":
            f.writelines(" The world possesses vast mountain ranges visible from space, covering at least 70% of the surface.")
        if HomeworldModifier == "Penal":
            f.writelines(" The world is almost entirely populated by criminals, sent here for isolation, labor or both.")
        if HomeworldModifier == "Subterranean":
            f.writelines(" The world's surface is not at all conducive to settlement or construction. Consequently, its populaton and infrastructure are almost entirely underground.")
        if HomeworldModifier == "Forbidden":
            f.writelines(" The world has been quarantined for one reason or another, and is now off-limits to all but the Chapter and the highest Imperial authorities.")
        if HomeworldModifier == "Sunless":
            f.writelines(" The world has no sun. Any civilisaton clinging to life in this desolate place does so tentatively at best.")
        

## The following code defines the Chapter's single lost Zygote
   
    def LostZygote():    
        global MissingZygote
        global MissingZygote1
        global MissingZygote2
        global MissingZygote3
        global MissingZygote4
        global MissingZygote5
        global MissingZygote6
        global MissingZygote7
        global MissingZygote8
        global ExistingMutations
        global ExistingMutations1
        global ExistingMutations2
        global ExistingMutations3
        global ExistingMutations4
        global ExistingMutations5
        global ExistingMutations6
        global ExistingMutations7
        global ExistingMutations8
        f.writelines("\nLost zygote:")
        NumOneLostZygote = random.randint(1,100)
        print("Lost Zygote Roll:")
        print(NumOneLostZygote)
        if NumOneLostZygote <= 8 and "Catalepsean Node" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Catalepsean Node" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Catalepsean Node")
            MissingZygote = "Catalepsean Node"
        elif NumOneLostZygote <= 17 and "Preomnor" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Preomnor" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Preomnor")
            MissingZygote = "Preomnor"
        elif NumOneLostZygote <= 26 and "Omophagea" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Omophagea" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Omophagea")
            MissingZygote = "Omophagea"
        elif NumOneLostZygote <= 35 and "Occulobe" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Occulobe" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Occulobe")
            MissingZygote = "Occulobe"
        elif NumOneLostZygote <= 44 and "Lyman’s Ear" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Lyman" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Lyman’s Ear")
            MissingZygote = "Lyman’s Ear"
        elif NumOneLostZygote <= 53 and "Sus-an Membrane" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Membrane" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Sus-an Membrane")
            MissingZygote = "Sus-an Membrane"
        elif NumOneLostZygote <= 62 and "Oolitic Kidney" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Oolitic" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Oolitic Kidney")
            MissingZygote = "Oolitic Kidney"
        elif NumOneLostZygote <= 71 and "Neuroglottis" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Neuroglottis" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Neuroglottis")
            MissingZygote = "Neuroglottis"
        elif NumOneLostZygote <= 80 and "Mucranoid" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Mucranoid" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Mucranoid")
            MissingZygote = "Mucranoid"
        elif NumOneLostZygote <= 89 and "Betcher's Gland" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Betcher" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Betcher's Gland")
            MissingZygote = "Betcher's Gland"
        elif NumOneLostZygote <= 98 and "Melanchromic Organ" not in (MissingZygote, MissingZygote1, MissingZygote2, MissingZygote3, MissingZygote4, MissingZygote5, MissingZygote6, MissingZygote7, MissingZygote8) and "Melanochrome" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines(" Melanchromic Organ")
            MissingZygote = "Melanchromic Organ"
        elif NumOneLostZygote <= 100:
            f.writelines(" choose any")

## The following code defines the Chapter's Progenitor-specific mutations

    def ProgenitorMutations():
        global ExistingMutations
        global ExistingMutations1
        global ExistingMutations2
        global ExistingMutations3
        global ExistingMutations4
        global ExistingMutations5
        global ExistingMutations6
        global ExistingMutations7
        global ExistingMutations8
        global ProgenitorChapter
        if ProgenitorChapter == "Ultramarines":
            ## Ultramarines
            LostZygote()
        elif ProgenitorChapter == "Blood Angels" and "Blood Angels" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            ## Blood Angels
            NumAngelsMutation = random.randint(1,6)
            print("Blood Angels Mutation Roll:")
            print(NumAngelsMutation)
            if NumAngelsMutation <= 3:
                f.writelines("\nAverage rate of the Red Thirst and the Black Rage")
            elif NumAngelsMutation <= 4:
                f.writelines("\nIncreased rate of the Red Thirst")
            elif NumAngelsMutation <= 5:
                f.writelines("\nIncreased rate of the Black Rage")
            elif NumAngelsMutation <= 6:
                f.writelines("\nIncreased rate of the Red Thirst and the Black Rage")
            ExistingMutations = "Blood Angels"
        elif ProgenitorChapter == "Dark Angels":
            ## Dark Angels
            LostZygote()
        elif ProgenitorChapter == "Unknown" or ProgenitorChapter == "Suspected Traitor":
            ## Unknown
            LostZygote()
        elif ProgenitorChapter == "Imperial Fists":
            ## Imperial Fists
            LostZygote()
        elif ProgenitorChapter == "White Scars":
            ## White Scars
            LostZygote()
        elif ProgenitorChapter == "Raven Guard" and "Melanochrome" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            ## Raven Guard
            f.writelines("\nMalfunctioning Melanochrome")
            ExistingMutations = "Melanochrome"
        elif ProgenitorChapter == "Iron Hands" and "Dysphoria" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            ## Iron Hands
            f.writelines("\nBody Dysphoria")
            ExistingMutations = "Dysphoria"
        elif ProgenitorChapter == "Space Wolves" and "Unstable Helix" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            ## Space Wolves
            f.writelines("\nUnstable Canis Helix")
            ExistingMutations = "Unstable Helix"
        elif ProgenitorChapter == "Salamanders" and "Melanochrome" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Melanchromic Organ":
            ## Salamanders
            f.writelines("\nMalfunctioning Melanochrome")
            ExistingMutations = "Melanochrome"
        else:
            LostZygote()

## The following code defines the Chapter's Mutations

    def Mutations():
        global ExistingMutations
        global ExistingMutations1
        global ExistingMutations2
        global ExistingMutations3
        global ExistingMutations4
        global ExistingMutations5
        global ExistingMutations6
        global ExistingMutations7
        global ExistingMutations8
        NumMutations = random.randint(1,21)
        print("Mutation Roll:")
        print(NumMutations)
        if NumMutations <= 1 and "Biscopea" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Biscopea")
            ExistingMutations = "Biscopea"
        elif NumMutations <= 2 and "Occulobe" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Occulobe":
            f.writelines("\nMutated Occulobe")
            ExistingMutations = "Occulobe"
        elif NumMutations <= 3 and "Catalepsean Node" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Catalepsean Node":
            f.writelines("\nMutated Catalepsean Node")
            ExistingMutations = "Catalepsean Node"
        elif NumMutations <= 4 and "Melanchromic Organ" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Melanochrome")
            ExistingMutations = "Melanochrome"
        elif NumMutations <= 5 and "Ossmodula" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Ossmodula")
            ExistingMutations = "Ossmodula"
        elif NumMutations <= 7:
            LostZygote()                        
        elif NumMutations <= 8:
            ProgenitorMutations()
        elif NumMutations <= 9 and "Larraman" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Larraman's Organ")
            ExistingMutations = "Larraman"
        elif NumMutations <= 10 and "Preomnor" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Preomnor":
            f.writelines("\nMutated Preomnor")
            ExistingMutations = "Preomnor"
        elif NumMutations <= 11 and "Omophagea" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Omophagea":
            f.writelines("\nMutated Omophagea")
            ExistingMutations = "Omophagea"
        elif NumMutations <= 12 and "Multi-lung" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Multi-lung")
            ExistingMutations = "Multi-lung"
        elif NumMutations <= 13 and "Lyman" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Lyman’s Ear":
            f.writelines("\nMutated Lyman's Ear")
            ExistingMutations = "Lyman"
        elif NumMutations <= 14 and "Membrane" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Sus-an Membrane":
            f.writelines("\nMutated Sus-an Membrane")
            ExistingMutations = "Membrane"
        elif NumMutations <= 15 and "Oolitic" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Oolitic Kidney":
            f.writelines("\nMutated Oolitic Kidney")
            ExistingMutations = "Oolitic"
        elif NumMutations <= 16 and "Neuroglottis" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Neuroglottis":
            f.writelines("\nMutated Neuroglottis")
            ExistingMutations = "Neuroglottis"
        elif NumMutations <= 17 and "Mucranoid" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Mucranoid":
            f.writelines("\nMutated Mucranoid")
            ExistingMutations = "Mucranoid"
        elif NumMutations <= 18 and "Betcher" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8) and MissingZygote != "Betcher's Gland":
            f.writelines("\nMutated Betcher's Gland")
            ExistingMutations = "Betcher"
        elif NumMutations <= 19 and "Haemastamen" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Haemastamen")
            ExistingMutations = "Haemastamen"
        elif NumMutations <= 20 and "Heart" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Secondary Heart")
            ExistingMutations = "Heart"
        elif NumMutations <= 21 and "Carapace" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
            f.writelines("\nMutated Black Carapace")
            ExistingMutations = "Carapace"
        else:
            LostZygote()
            
    def ChapterQuirks():
        global UnitRestrictions
        global ChapterQuirk
        global ChapterQuirk1
        global ChapterQuirk2
        global ChapterQuirk3
        NumQuirks = random.randint(1,30)
        print("Quirk Roll:")
        print(NumQuirks)
        if NumQuirks <= 2 and "Absolute Colors" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nAbsolute Colors: this Chapter will under no circumstances wear any colors but their own, refusing to use camouflage, wear the partial silver and black of the Deathwatch, or the absolute black of Black Shields.")
            ChapterQuirk = "Absolute Colors"
        elif NumQuirks <= 4 and "Scarification" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nScarification: this Chapter places cultural or practical emphasis on scarification. This may be a means of tallying kills, recording events, a spiritual practice, or something else entirely.")
            ChapterQuirk = "Scarification"
        elif NumQuirks <= 6 and "Peculiar Cuisine" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nPeculiar Cuisine: this Chapter has its own distinct food and drink, this being one of the few luxuries afforded to Astartes.")
            ChapterQuirk = "Peculiar Cuisine"
        elif NumQuirks <= 8 and "Particular Pastime" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nParticular Pastime: this Chapter has certain activities its Astartes enjoy as a hobby of sorts in their brief allotment of private time. This may be poetry, music, art, pet training, or something else entirely.")
            ChapterQuirk = "Particular Pastime"
        elif NumQuirks <= 10 and "Cultural Aesthetic" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nCultural Aesthetic: this Chapter has its own notions of what is pleasing to the eye. These notions may come across as strange to the wider Imperium.")
            ChapterQuirk = "Cultural Aesthetic"
        elif NumQuirks <= 12 and UnitRestrictions != "Librarian" and "Psychic Discipline" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nParticular Psychic Discipline: this Chapter's psykers have their own preferences for a psychic discipline. This may be aeromancy, pyromancy, terramancy, or something else entirely.")
            ChapterQuirk = "Psychic Discipline"
        elif NumQuirks <= 14 and "Naming Convention" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nUnusual Naming Conventions: this Chapter has its own system by which its Astartes name themselves. While taking a new name upon induction into a Chapter is not unusual, these Astartes name themselves in distinct ways, such as based on deeds, events, achievements, or something else entirely.")
            ChapterQuirk = "Naming Convention"
        elif NumQuirks <= 16 and "Hospitable" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3) and "Territorial" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nTerritorial: this Chapter places extraordinary importance on the integrity of their holdings. Violating the sanctity of a space or place they consider their own is a grave offense, and failing to protect their holdings is a serious stain on their honor.")
            ChapterQuirk = "Territorial"
        elif NumQuirks <= 18 and "Territorial" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3) and "Hospitable" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nHospitable: this Chapter places extraordinary importance on the integrity of guest rights. Imperilling anyone under their protection is considered a grave offense, and failing to protect a guest is a serious stain on their honor.")
            ChapterQuirk = "Hospitable"
        elif NumQuirks <= 20 and "Unique Language" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nUnique Language: this Chapter maintains its own language, distinct enough from standard Imperial High or Low Gothic that it cannot be mutually understood. This may be a tongue of their own making, the language of their homeworld's native populaton, or something else entirely.")
            ChapterQuirk = "Unique Language"
        elif NumQuirks <= 22 and "Peculiar Honor" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nPeculiar Honor: this Chapter's views on what is and isn't honorable might be considered strange by the wider Imperium. This may be due to a unique internal code of conduct, cultural associations brought over from their homeworld's native population, or something else entirely.")
            ChapterQuirk = "Peculiar Honor"
        elif NumQuirks <= 24 and "Unusual Penal Code" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nUnusual Penal Code: this Chapter's means of policing itself, and the punishments it issues to its Astartes, is unique to them, and may be entirely indecipherable to outsiders. They may restrict this to themselves alone, or they may apply it to others as well, as and when appropriate.")
            ChapterQuirk = "Unusual Penal Code"
        elif NumQuirks <= 26 and "Faceless" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nFaceless: this Chapter's Astartes, for one reason or another, never show their faces, even when unarmored and when not deployed to a warzone, in which cases they use some other means of concealing their countenances from others. This may extend even to their own brothers.")
            ChapterQuirk = "Faceless"
        elif NumQuirks <= 28 and "Silent" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nSilent: this Chapter's Astartes, for one reason or another, never speak with outsiders, relying instead on trusted mortal intermediaries to represent them when communicating with the wider Imperium.")
            ChapterQuirk = "Silent"
        elif NumQuirks <= 30 and "Trophy Taking" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3):
            f.writelines("\nTrophy Taking: this Chapter traditionally takes trophies from enemies. This may take a variety of forms, such as keeping eyes, preserving hearts, taking skulls, or something else entirely. There may also be various criteria, such as trophies only being taken from worthy foes, only from leaders, only at certain times, or something else entirely.")

## The following code opens (or creates, if none exists) the .txt file. Upon execution, the file automatically saves and closes.

    with open("Your Chapter.txt", "w") as f:
        
## The following code defines the reason for the Chapter's Founding

        f.writelines("    Founding Reason")
        NumFoundingReason = random.randint(1,28)
        print("Founding Reason Roll:")
        print(NumFoundingReason)
        if NumFoundingReason <= 4:
            f.writelines("\nPrognostication: Imperial psykers determined a unique need for a particular Chapter at a specific place at a certain time. This Chapter is, for all intents and purposes, the direct result of prophecy. Even if that prophecy is no longer relevant for one reason nor another, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 8:
            f.writelines("\nPreparation: Imperial authorities identified the need for a Chapter to combat a specific threat. Even if that threat no longer exists today, its original presence lead to the founding of this Chapter.")
        elif NumFoundingReason <= 12:
            f.writelines("\nDefense: Imperial authorities identified a part of the Imperium so crucial to its continued existence that a Chapter was deemed necessary for its protection. Even if the aforementioned part of the Imperium has now fallen, this Chapter was created for that express purpose, and its identity might still be strongly influenced by it")
        elif NumFoundingReason <= 16:
            f.writelines("\nOffense: Imperial authorities identified the need for a crusading Chapter, whether as part of an organised offensive or as a flexible strike force. This Chapter was created for that purpose, and is on its crusade to this very day. Even if the offensive that originally justified its creaton is no longer ongoing, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 20:
            f.writelines("\nUnknown: records of why this Chapter was founded have been lost. The Chapter's identity might be strongly influenced by the loss of this important information.")
        elif NumFoundingReason <= 24:
            f.writelines("\nSecret: the true reason for this Chapter being founded was of such importance that it was kept secret to all but the High Lords of Terra and the Chapter itself. Other agencies of the Imperium, such as the Inquisition, likely know at least part of the truth. The Chapter may maintain an official founding cause to obfuscate the truth. Even if the secret circumstance is no longer relevant, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 28:
            f.writelines("\nRefounding: Imperial authorities decided to reform a Chapter that was once lost, either in battle or by some other means. This Chapter likely, but not necessarily, maintains a similar culture, organisation and demeanor to its namesake.")
        
            
        f.writelines("\n")
        
        
## The following code defines the date of the Chapter's Founding
        
        global Founding
        f.writelines("\n    Founding Date")  
        NumFoundingDate = random.randint(1,140)
        print("Founding Date Roll:")
        print(NumFoundingDate)
        if NumFoundingDate <= 1:
            f.writelines("\n2nd Founding: although no concrete evidence exists, this Chapter claims to be have been founded in the early 31st millennium. During the 2nd Founding, the original Legions were split into many smaller Chapters immediately following the Horus Heresy. This time also saw the 1st Black Crusade of Abaddon the Despoiler.")
        elif NumFoundingDate <= 5:
            f.writelines("\n3rd Founding: this Chapter was created in the early 32nd millennium, during the 3rd Founding. Unlike the Second Founding, which was a reorganisation of existing Astartes from Legions into Chapters, this was the first time truly new Chapters were raised. This time also saw the 2nd and 3rd Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 10:
            f.writelines("\nUnknown: if any records of this Chapter's founding exist anywhere, they are not known to the Chapter, nor indeed the Imperium at large.")
        elif NumFoundingDate <= 15:
            f.writelines("\n4th Founding: this Chapter was created in the mid 32nd millennium, during the 4th Founding. This was an uncertain and tumultuous time, following the cataclysmic War of the Beast.")
        elif NumFoundingDate <= 20:
            f.writelines("\n5th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 5th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler. The 6th and 7th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 25:
            f.writelines("\n6th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 6th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler. The 5th and 7th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 30:
            f.writelines("\n7th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 7th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler The 5th and 6th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 45:
            f.writelines("\n8th Founding: this Chapter was created in the mid 34th millennium, during the 8th Founding. Like others of this Founding, accounts are fragmentary at best, and likely not contemporary.")
        elif NumFoundingDate <= 50:
            f.writelines("\n9th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 9th Founding. The 10th, 11th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 55:
            f.writelines("\n10th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 10th Founding. The 9th, 11th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 60:
            f.writelines("\n11th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 11th Founding. The 9th, 10th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 65:
            f.writelines("\n12th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 12th Founding. The 9th, 10th and 11th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 70:
            f.writelines("\n13th Founding: this Chapter claims to have been created in the mid 35th millennium, during the 13th 'Dark' Founding. However, the Adeptus Terra possesses no original samples of gene-seed from any Chapters of the 13th Founding, so this claim is disputed.")
        elif NumFoundingDate <= 75:
            f.writelines("\n14th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 14th Founding. The 15th, 16th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 80:
            f.writelines("\n15th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 15th Founding. The 14th, 16th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 85:
            f.writelines("\n16th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 16th Founding. The 14th, 15th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 90:
            f.writelines("\n17th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 17th Founding. The 14th, 15th, 16th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 95:
            f.writelines("\n18th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 18th Founding. The 14th, 15th, 16th, 17th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 100:
            f.writelines("\n19th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 19th Founding. The 14th, 15th, 16th, 17th, 18th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 105:
            f.writelines("\n20th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 20th Founding. The 14th, 15th, 16th, 17th, 18th and 19th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 110:
            f.writelines("\n21st Founding: this Chapter was created in the late 35th millennium, immediately prior to the Age of Apostasy, during the 21st 'Cursed' Founding. The single largest Founding since the 2nd, only a scant few have survived unscathed to the 42nd millennium. A dark omen hangs over the Chapter.")
            Founding = "Cursed Founding"
        elif NumFoundingDate <= 115:
            f.writelines("\n22nd Founding: this Chapter was created in the early 36th millennium to the late 37th millennium, during the 22nd Founding. These were the years following the Age of Apostasy, which also saw the Great Cull carried out, as well as the 5th, 6th, 7th and 8th Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 120:
            f.writelines("\n23rd Founding: this Chapter was created in the late 37th millennium to early 38th millennium, during the 23rd 'Sentinel' Founding. It was intended to replace the catastrophic losses of at least 57 Chapters in the preceding years and close vital gaps in the Imperium's defenses. This time also saw the 9th Black Crusade of Abaddon the Despoiler.")
        elif NumFoundingDate <= 125:
            f.writelines("\n24th Founding: this Chapter was created between the 38th millennium and the 39th millennium, during the 24th Founding. This time also saw the beginning of The Waning, which was a gradual decrease in stability within the Imperium, the Redemption Crusades, and the 10th and 11th Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 130:
            f.writelines("\n25th Founding: this Chapter was created in the 40th millennium, during the 25th 'Bastion' Founding. This time also saw the return of Krieg to Imperial rule and the beginning of the Macharian Crusade. A comparatively stable and peaceful time for the Imperium, allowing borders to be both expanded and reinforced.")
        elif NumFoundingDate <= 135:
            f.writelines("\n26th Founding: this Chapter was created in the 41st millennium, during the 26th Founding, making them the last of the original breed of Astartes, who would later become known as The Firstborn. This time also saw the 12th and ultimate 13th Black Crusades of Abaddon the Despoiler, as well as the consequential creation of the Cicatrix Maledictum, or the Great Rift.")
        elif NumFoundingDate <= 140:
            f.writelines("\nUltima Founding: this Chapter was created in the early 42nd millennium, during the Ultima Founding, and accordingly consists entirely of Primaris Astartes. Freshly formed, they face a galaxy split in two by the Cicatrix Maledictum, the culmination of the Archenemy's Long War, and the realisation of the Chaos Gods' plans.")
            Founding = "Ultima Founding"
            
        f.writelines("\n")
        
## The following code defines whether the Chapter is pre- or post-42nd Millennium and whether Primaris reinforcements have been received
        
        if Founding != "Ultima Founding":
            global PrimarisReinforcements
            f.writelines("\n    Timeline Status")
            NumTimeline = random.randint(1,100)
            print("Timeline Status Roll")
            print(NumTimeline)
            if NumTimeline <= 50:
                f.writelines("\nPre-42nd Millennium")
            elif NumTimeline <= 100:
                f.writelines("\nPost-42nd Millennium")
                f.writelines("\n")
                f.writelines("\n    Primaris Reinforcements Status")
                NumPrimarisReinforcements = random.randint(1,100)
                print("Primaris Reinforcements Roll")
                print(NumPrimarisReinforcements)
                if NumPrimarisReinforcements <= 80:
                    f.writelines("\nReceived")
                    PrimarisReinforcements = "Yes"
                elif NumPrimarisReinforcements <= 100:
                    f.writelines("\nNot received")
        
            f.writelines("\n")
        
## The following code defines curses for Chapters of the 21st Founding

        if Founding == "Cursed Founding":
            global ExistingMutations
            global ExistingMutations1
            global ExistingMutations2
            global ExistingMutations3
            global ExistingMutations4
            global ExistingMutations5
            global ExistingMutations6
            global ExistingMutations7
            global ExistingMutations8
            f.writelines("\n    Curse")
            NumCurse = random.randint(1,12)
            print("Curse Roll")
            print(NumCurse)
            if NumCurse <= 1:
                f.writelines("\nBad Luck: this Chapter suffers from some unquantifiable misfortune, resulting in extraordinarily bad luck. Bad things always seem to happen at the worst of times. And, worse still, even at the best of times.")
            elif NumCurse <= 2:
                f.writelines("\nEverything Is Fine: this Chapter is fine. There's absolutely nothing to worry about. Nothing at all is wrong. Everything is as it ought to be. The Chapter is doing well and will definitely continue to do well. Don't worry about it.")
            elif NumCurse <= 3:
                f.writelines("\nNothing: this Chapter got lucky and is one of the very, very few from the Cursed Founding to have no curse. Even so, some may still treat them with suspicion.")
            elif NumCurse <= 4 and "DOOMED" not in (ExistingMutations, ExistingMutations1, ExistingMutations2, ExistingMutations3, ExistingMutations4, ExistingMutations5, ExistingMutations6, ExistingMutations7, ExistingMutations8):
                f.writelines("\nDOOMED: this Chapter has lost the ability to create new Progenoid Glands. Unless this is somehow fixed, they are doomed to suffer a slow death by attrition.")
                ExistingMutations = "DOOMED"
            elif NumCurse <= 5:
                f.writelines("\nExcessive Mutation: this Chapter suffers from an inexplicable overabundance of mutations. Whether from a defective gene-seed, deliberate tampering, or some sinister element is unknown.")
                Mutations()
                ExistingMutations5 = ExistingMutations
                MissingZygote5 = MissingZygote
                Mutations()
                ExistingMutations6 = ExistingMutations
                MissingZygote6 = MissingZygote
                Mutations()
                ExistingMutations7 = ExistingMutations
                MissingZygote7 = MissingZygote
                Mutations()
                ExistingMutations8 = ExistingMutations
                MissingZygote8 = MissingZygote
            elif NumCurse <= 6:
                f.writelines("\nProphetic Treason: this Chapter is prophesied to betray the Imperium of Man. The details of the prophecy have been lost, and so these Astartes are left with an ostensible guarantee of treason, without the how, the why and the when of it all.")
            elif NumCurse <= 7:
                f.writelines("\nLoathed: this Chapter is intensely hated by everyone they encounter. Regardless of their actions, no matter their cooperative spirit, benevolent endeavors or altruistic outreach, they are met with universal scorn. Some justify their hatred. Others may find it difficult to explain.")
            elif NumCurse <= 8:
                f.writelines("\nSudden Death: this Chapter is subject to a curious condition by which its Astartes universally, without exception, die upon reaching 100 years of age. Marines who perish in this manner carry no indications or symptoms that might explain their passing.")
            elif NumCurse <= 9:
                f.writelines("\nCursed Providence: this Chapter has found that it must always consult the Emperor's Tarot when making decisions. Any choice made without doing so inevitably results in failure.")
            elif NumCurse <= 10:
                f.writelines("\nScotophobia: this Chapter is subject to a strange calamity, by which its Astartes always go missing in dark places. The darker it is, the greater the likelihood of disappearance. Where they go and what happens to them is unknown. None ever return.")
            elif NumCurse <= 11:
                f.writelines("\nHomichlophobia: this Chapter suffers from an unusual condition. Without exception, its Astartes will lose consciousness upon entering a certain concentration of mist or fog.")
            elif NumCurse <= 12:
                f.writelines("\nSudden Mutation: this Chapter suffers from an unidentified condition, by which its Astartes suffer spontaneous mutations of varying severity when subjected to some hitherto unidentified criteria.")
            elif NumCurse <= 13:
                f.writelines("\nLost: this Chapter is perpetually lost. They never reach their intended destination, always somehow ending up in a different place, sometimes entirely removed from their original target.")
            
            f.writelines("\n")

## The following code defines the Chapter's Progenitor

        f.writelines("\n    Progenitor")
        if Founding != "Ultima Founding":
            NumProgenitor = random.randint(1,160)
            print("Progenitor Roll:")
            print(NumProgenitor)
            if NumProgenitor <= 50:
                f.writelines("\nUltramarines: this Chapter is of Roboute Guilliman's accomplished lineage, whether from original Ultramarines stock or through a successor Chapter.")
                ProgenitorChapter = "Ultramarines"
            elif NumProgenitor <= 75:
                f.writelines("\nUnknown: this Chapter, as well as the Imperium at large, has lost all records of its progenitor. There may be claims of one progenitor or another, but nothing can be proven.")
                ProgenitorChapter = "Unknown"
            elif NumProgenitor <= 90:
                f.writelines("\nDark Angels: this Chapter is of the Lion El'Jonson's proud lineage, whether from original Dark Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Dark Angels"
            elif NumProgenitor <= 105:
                f.writelines("\nBlood Angels: this Chapter is of Sanguinius' esteemed lineage, whether from original Blood Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Blood Angels"
            elif NumProgenitor <= 120:
                f.writelines("\nImperial Fists: this Chapter is of Rogal Dorn's stubborn lineage, whether from original Imperial Fists stock or through a successor Chapter.")
                ProgenitorChapter = "Imperial Fists"
            elif NumProgenitor <= 130:
                f.writelines("\nWhite Scars: this Chapter is of Jaghatai Khan's fierce lineage, whether from original White Scars stock or through a successor Chapter.")
                ProgenitorChapter = "White Scars"
            elif NumProgenitor <= 140:
                f.writelines("\nRaven Guard: this Chapter is of Corvus Corax' noble lineage, whether from original Raven Guard stock or through a successor Chapter.")
                ProgenitorChapter = "Raven Guard"
            elif NumProgenitor <= 150:
                f.writelines("\nIron Hands: this Chapter is of Ferrus Manus' troubled lineage, whether from original Iron Hands stock or through a successor Chapter.")
                ProgenitorChapter = "Iron Hands"
            elif NumProgenitor <= 151:
                f.writelines("\nSpace Wolves: this Chapter claims to be of Leman Russ' savage lineage. However, the Space Wolves themselves deny this claim, and no solid evidence exists to substantiate it.")
                ProgenitorChapter = "Space Wolves"
            elif NumProgenitor <= 152:
                f.writelines("\nSalamanders: this Chapter claims to be of Vulkan's benevolent lineage. However, the Salamanders themselves deny this claim, and no solid evidence exists to substantiate it.")
                ProgenitorChapter = "Salamanders"
            elif NumProgenitor <= 160:
                f.writelines("\nSuspected Traitor: this Chapter, as well as the Imperium at large, has lost all records of its progenitor. There may be claims of one progenitor or another, but nothing can be proven, and rumors abound that their gene-seed was actually sourced from one of the 9 traitor Legions.")
                ProgenitorChapter = "Suspected Traitor"
        if Founding == "Ultima Founding":
            NumUltimaProgenitor = random.randint(1,170)
            print("Progenitor Roll:")
            print(NumUltimaProgenitor)
            if NumUltimaProgenitor <= 50:
                f.writelines("\nUltramarines: this Chapter is of Roboute Guilliman's accomplished lineage, whether from original Ultramarines stock or through a successor Chapter.")
                ProgenitorChapter = "Ultramarines"
            elif NumUltimaProgenitor <= 75:
                f.writelines("\nUnknown: this Chapter was created from gene-seed stocks whose records of origin have been lost. There may be claims of one progenitor or another, but nothing can be proven.")
                ProgenitorChapter = "Unknown"
            elif NumUltimaProgenitor <= 90:
                f.writelines("\nDark Angels: this Chapter is of the Lion El'Jonson's proud lineage, whether from original Dark Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Dark Angels"
            elif NumUltimaProgenitor <= 105:
                f.writelines("\nBlood Angels: this Chapter is of Sanguinius' esteemed lineage, whether from original Blood Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Blood Angels"
            elif NumUltimaProgenitor <= 120:
                f.writelines("\nImperial Fists: this Chapter is of Rogal Dorn's stubborn lineage, whether from original Imperial Fists stock or through a successor Chapter.")
                ProgenitorChapter = "Imperial Fists"
            elif NumUltimaProgenitor <= 130:
                f.writelines("\nWhite Scars: this Chapter is of Jaghatai Khan's fierce lineage, whether from original White Scars stock or through a successor Chapter.")
                ProgenitorChapter = "White Scars"
            elif NumUltimaProgenitor <= 140:
                f.writelines("\nRaven Guard: this Chapter is of Corvus Corax' noble lineage, whether from original Raven Guard stock or through a successor Chapter.")
                ProgenitorChapter = "Raven Guard"
            elif NumUltimaProgenitor <= 150:
                f.writelines("\nIron Hands: this Chapter is of Ferrus Manus' troubled lineage, whether from original Iron Hands stock or through a successor Chapter.")
                ProgenitorChapter = "Iron Hands"
            elif NumUltimaProgenitor <= 155:
                f.writelines("\nSpace Wolves: this Chapter is of Leman Russ' savage lineage.")
                ProgenitorChapter = "Space Wolves"
            elif NumUltimaProgenitor <= 160:
                f.writelines("\nSalamanders: this Chapter is of Vulkan's benevolent lineage.")
                ProgenitorChapter = "Salamanders"
            elif NumUltimaProgenitor <= 170:
                f.writelines("\nSuspected Traitor: this Chapter was created from gene-seed stocks whose records of origin have been lost. There may be claims of one progenitor or another, but nothing can be proven, and rumors abound that their gene-seed was actually sourced from one of the 9 traitor Legions.")
                ProgenitorChapter = "Suspected Traitor"
            
        f.writelines("\n")

## The following code defines the purity of the Chapter's Gene-seed
h, hey. What are you doing out here?
        f.writelines("\n    Gene-seed purity")
        NumPurity = random.randint(1,20)
        print("Purity Roll:")
        print(NumPurity)
        if NumPurity <= 1:
            f.writelines("\nPure: this Chapter's gene-seed is, for all intents and purposes, purer than even its progenitor's.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage.")
        elif NumPurity <= 10:
            f.writelines("\nMatches progenitor: this Chapter's gene-seed is largely identical to its progenitor's. Consequently, it likely suffers similar flaws.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            NumMutations1 = random.randint(1,10)
            print("Progenitor Match Roll:")
            print(NumMutations1)
            if NumMutations1 > 5:
                f.writelines("\n")
                f.writelines("\n    Mutations")
                ProgenitorMutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
        elif NumPurity <= 16:
            f.writelines("\nDeviant: this Chapter's gene-seed has undergone small changes, whether deliberate or accidental, deviating from its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(1,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 7:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
            elif NumMutations1 <= 10:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
        elif NumPurity <= 19:
            f.writelines("\nMutated: this Chapter's gene-seed has undergone substantial changes, whether deliberate or accidental, resulting in mutations significantly different from its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(1,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 7:
                Mutations()
            elif NumMutations1 <= 9:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
            elif NumMutations1 <= 10:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
                Mutations()
                ExistingMutations3 = ExistingMutations
                MissingZygote3 = MissingZygote
                DOOMED()
        elif NumPurity <= 20:
            f.writelines("\nDamaged: this Chapter's gene-seed has suffered catastrophic damage, whether from deliberate tampering or some critical accident, resulting in severe flaws that make it unrecognisable when compared to its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(10,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 7:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
            elif NumMutations1 <= 9:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
                Mutations()
                ExistingMutations3 = ExistingMutations
                MissingZygote3 = MissingZygote
            elif NumMutations1 <= 10:
                Mutations()
                ExistingMutations1 = ExistingMutations
                MissingZygote1 = MissingZygote
                Mutations()
                ExistingMutations2 = ExistingMutations
                MissingZygote2 = MissingZygote
                Mutations()
                ExistingMutations3 = ExistingMutations
                MissingZygote3 = MissingZygote
                Mutations()
                ExistingMutations4 = ExistingMutations
                MissingZygote4 = MissingZygote
                DOOMED()
                
        f.writelines("\n")
        
## The following code defines the stability of the Chapter's gene-seed

        f.writelines("\n    Gene-Seed Stability")
        NumStability = random.randint(1,10)
        print("Gene-Seed Stability Roll:")
        print(NumStability)
        if NumStability <= 2:
            f.writelines("\nStable: this Chapter's gene-seed is remarkably stable, significantly more so than what is average. New flaws, deficiencies and mutations are practically unheard of, even when used to found a new Chapter.")
        elif NumStability <= 7:
            f.writelines("\nAverage: this Chapter's gene-seed is, for all intents and purposes, run-of-the-mill. New flaws, deficiencies and mutations are not unheard of, particularly when used to found a new Chapter, but are manageable enough to be considered a non-issue.")
        elif NumStability <= 8:
            f.writelines("\nSlightly Unstable: this Chapter's gene-seed is less stable than what is average. New flaws, deficiencies and mutations are relatively common, even when used to found a new Chapter, but sufficiently frequent to be considered an issue.")
        elif NumStability <= 9:
            f.writelines("\nQuite Unstable: this Chapter's gene-seed is significantly less stable than what is average. New flaws, deficiencies and mutations are common, particularly when used to found a new Chapter, and sufficiently frequent to be considered a considerable issue.")
        elif NumStability <= 10:
            f.writelines("\nVery Unstable: this Chapter's gene-seed is unstable. New flaws, deficiencies and mutations are widespread, particularly when used to found a new Chapter, if such a thing will ever be considered.")
        
        f.writelines("\n")

## The following code defines the Chapter's Demeanor

        f.writelines("\n    Chapter Demeanor")
        NumDemeanor = random.randint(1,34)
        print("Demeanor Roll:")
        print(NumDemeanor)
        if NumDemeanor <= 1:
            f.writelines("\nAudacious: this Chapter prides itself on its willingness to make bold decisions and perform daring actions; some, however, may call it recklessness.")
        elif NumDemeanor <= 2:
            f.writelines("\nMeticulous: this Chapter is well-known for its thorough approach to any given situation, though detractors may argue it can be to a fault.")
        elif NumDemeanor <= 3:
            f.writelines("\nCallous: this Chapter is famous (or infamous) for its indifference to suffering, whether it be their own, that of their enemies, or that of their allies.")
        elif NumDemeanor <= 4:
            f.writelines("\nTactical: this Chapter regards the proverbial 'small picture' to be paramount. Accordingly, their focus in battle is largely on tactical movements, possibly at the risk of ignoring grander elements.")
        elif NumDemeanor <= 5:
            f.writelines("\nStrategic: this Chapter regards the proverbial 'big picture' to be paramount. Accordingly, their focus in battle is largely on strategic movements, possibly at the risk of ignoring more minute elements.")
        elif NumDemeanor <= 6:
            f.writelines("\nCunning: this Chapter emphasizes the necessity of cleverness. While it serves them well, both on the battlefield and in the politics of the Adeptus Astartes and the wider Imperium alike, this guile might lead some to view them as scheming, or downright untrustworthy.")
        elif NumDemeanor <= 7:
            f.writelines("\nZealous: this Chapter pursues every task with a level of fervor uncommon even among Astartes. Such is their drive and certainty in their actions that it may blind them to alternatives.")
        elif NumDemeanor <= 8:
            f.writelines("\nRelentless: this Chapter has been known to pursue a given task with such adamant stubbornness that they have been compared to an unstoppable force. Some may wonder what happens if they meet an immovable object. Others may call them inflexible.")
        elif NumDemeanor <= 9:
            f.writelines("\nRepentless: this Chapter has never been known to apologize, viewing such a thing as beneath them. While some appreciate such dedication and willingness to stand by their every action, others may chafe under perceived arrogance.")
        elif NumDemeanor <= 10:
            f.writelines("\nImperial: this Chapter, moreso than most of their peers, are dedicated to the expansion of the Imperium and the vision of the Emperor. This may come at the expense of other concerns, and some may question their interpretaton of the Emperor's vision.")
        elif NumDemeanor <= 11:
            f.writelines("\nPenitent: this Chapter has a considerable focus on repentance - typically their own. While their endeavors to right wrongs they have done are admirable, some might argue they have a tendency to exaggerate a given situation.")
        elif NumDemeanor <= 12:
            f.writelines("\nHonorable: this Chapter holds honor in high regard, although some may call it an obsession. They exist by some code or another, whether of their own making or one given to them; any breach of this code, whether by themselves or a third party, is seen as unacceptable.")
        elif NumDemeanor <= 13:
            f.writelines("\nHonest: this Chapter cannot tell a lie, for one reason or another. While some will appreciate their sincerity, others might consider them neurotic in their obsession with honesty. Others again might point out that lies can be avoided by telling technical or half-truths... or by absolute silence.")
        elif NumDemeanor <= 14:
            f.writelines("\nCalm: this Chapter is known to be very slow to stir, possessing an overabundance of patience. Lauded by some for this trait, others may consider them placid or even lackadaisical.")
        elif NumDemeanor <= 15:
            f.writelines("\nIrate: this Chapter is known to be very quick to stir, possessing a shortage of patience. While some might argue they're simply decisive and bold, others may instead consider them reckless and prone to outbursts.")
        elif NumDemeanor <= 16:
            f.writelines("\nMorose: this Chapter is prone to dour moods, often paying excessive attention to the negatives of a given situation. Some consider them realists, but many consider them pessimists.")
        elif NumDemeanor <= 17:
            f.writelines("\nJovial: this Chapter is widely considered good-natured, even sociable by Astartes standards. Although this makes them many friends, there are those who deride them as naive and even flippant.")
        elif NumDemeanor <= 18:
            f.writelines("\nDire: this Chapter possessed of a grim determination, and a penchant for stoicism besides. Thought to be steadfast and reliable by some, others may decry them as a dismal lot whose moods are altogether disheartening.")
        elif NumDemeanor <= 19:
            f.writelines("\nSecretive: this Chapter values privacy and secrecy, none moreso than their own. Certainly a great boon insofar as operational security is concerned, some may find them difficult to trust, given their furtive nature.")
        elif NumDemeanor <= 20:
            f.writelines("\nUnyielding: this Chapter is uncompromising, possessing a determination so thoroughly impenetrable that rumors hold they have never once retreated. True or not, they certainly are implacable, even if detractors may prefer to call them obstinate.")
        elif NumDemeanor <= 21:
            f.writelines("\nParanoid: this Chapter is often charitably described as unreasonable due to their suspicious nature. Others might instead consider them mad, always expecting the worst, even from their allies, though such accusations will seldom be forthcoming when face-to-face.")
        elif NumDemeanor <= 22:
            f.writelines("\nInquisitive: this Chapter this Chapter is both skillful in information gathering, and possessed of a drive to do so. Praised by some for their dedication to such intelligence, others may consider them nosey at best, and a threat at worst.")
        elif NumDemeanor <= 23:
            f.writelines("\nSoft-hearted: this Chapter possesses a great affinity for the civilian population of the Imperium, often going to great extents to safeguard them, and perhaps even interact with them. Many praise this altruism, although detractors may consider them weak, and may even question their dedication to waging war as Astartes ought.")
        elif NumDemeanor <= 24:
            f.writelines("\nHard-hearted: this Chapter has little care for the civilian population of the Imperium, often pre-emptively writing off their presence in theatres of war as acceptable casualties. Condemned by many for being so dismissive, others praise them for their perceived pragmatism.")
        elif NumDemeanor <= 25:
            f.writelines("\nIndustrious: this Chapter has little care for anything other than their own work and endeavors. Although unconfirmed rumors hold that they spend what precious little time Astartes are afforded for free time on more practical pursuits, it certainly is known that they never rest until their work is done. It is said Astartes know no fear, but these in particular may fear a task left unfinished.")
        elif NumDemeanor <= 26:
            f.writelines("\nSpiritual: this Chapter dedicates an extraordinary amount of time to matters of reverence. Certainly well-received by others of similar inclinations, others may deride them as misguided, or even superstitious.")
        elif NumDemeanor <= 27:
            f.writelines("\nMundane: this Chapter cares little for matters of spirituality, religion and the like. Certainly well-received by others of similar inclinations, others may deride them as irreverent, or even profane.")
        elif NumDemeanor <= 28:
            f.writelines("\nGenealogical: this Chapter places great importance on, and has great interest in, matters of ancestry, particularly their own. This may border on obsessive behavior, leading some to consider them lost in the past, while others may praise them for their record keeping and reverence for history.")
        elif NumDemeanor <= 29:
            f.writelines("\nShameful: this Chapter believes itself disgraced. Whether true or merely perceived, they may either go to great lengths to rectify whatever transpired to cause this state of mind, or take great care to hide it from outsiders - perhaps even from their own brothers.")
        elif NumDemeanor <= 30:
            f.writelines("\nLogistical: this Chapter is deeply fascinated by the bureaucratic web of supply lines. This, in turn, has lead to significant proficiency in such matters, although some may disparage such endeavors as unworthy of Astartes warriors and better left to mortal humans.")
        elif NumDemeanor <= 31:
            f.writelines("\nLogical: this Chapter is deeply fascinated by systems of logic. Endeavoring to create a system by which all things might be organised is certainly impressive, particularly to the Tech-Priests of Mars, to whom others may instead believe such matters should be reserved.")
        elif NumDemeanor <= 32:
            f.writelines("\nProud: this Chapter is well-known for taking great pleasure in its own accomplishments. While many will agree that such pride has been earned, others may instead find them arrogant. They certainly do not suffer insults to their achievements lightly.")
        elif NumDemeanor <= 33:
            f.writelines("\nHumble: this Chapter is well-known for placing little import on honor rolls and the recording of deeds, although such records are still made and kept. Some view this as a virtue, while others may consider these Astartes timid.")
        elif NumDemeanor <= 34:
            f.writelines("\nPerfectionist: this Chapter is famous, or infamous, for its pursuit of perfection. While certainly a useful trait insofar as their prowess is concerned, these Astartes are nonetheless known to fall victim to malaise, or even anger, if they consider their deeds and endeavors insufficient.")

        f.writelines("\n")
        
## The following code defines the Chapter's quirks
        
        NumQuirkyChapter = random.randint(1,20)
        print("Quirky Chapter Roll:")
        print(NumQuirkyChapter)
        f.writelines("\n    Chapter Quirks")
        if NumQuirkyChapter <= 16:
            ChapterQuirks()
            ChapterQuirk1 = ChapterQuirk
        elif NumQuirkyChapter <= 18:
            ChapterQuirks()
            ChapterQuirk1 = ChapterQuirk
            ChapterQuirks()
            ChapterQuirk2 = ChapterQuirk
        elif NumQuirkyChapter <= 20:
            ChapterQuirks()
            ChapterQuirk1 = ChapterQuirk
            ChapterQuirks()
            ChapterQuirk2 = ChapterQuirk
            ChapterQuirks()
            ChapterQuirk3 = ChapterQuirk
            
        f.writelines("\n")

## The following code defines the Chapter's Legend

        global LegendaryFigure
        f.writelines("\n    Legendary Figure")
        NumLegendFigure = random.randint(1,130)
        print("Legendary Figure Roll:")
        print(NumLegendFigure)
        if NumLegendFigure <= 20:
            f.writelines("\nA Founding Chapter member:")
            NumFoundingLegend = random.randint(21,130)
            print("Founding Legend Roll:")
            print(NumFoundingLegend)
            if NumFoundingLegend <= 40:
                f.writelines(" Chapter Master, or equivalent")
                LegendaryFigure = "Chapter Master"
            elif NumFoundingLegend <= 50:
                NumFoundingChampSelect1 = random.randint (1,2)
                print("Founding Champion Roll:")
                print(NumFoundingChampSelect1)
                if NumFoundingChampSelect1 == 1:
                    f.writelines(" Chapter Champion, or equivalent")
                elif NumFoundingChampSelect1 == 2:
                    NumFoundingChampSelect2 = random.randint (1,10)
                    print("Founding Champion Company Roll:")
                    print(NumFoundingChampSelect2)
                    if NumFoundingChampSelect2 == 1:
                        f.writelines(" 1st Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 2:
                        f.writelines(" 2nd Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 3:
                        f.writelines(" 3rd Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 4:
                        f.writelines(" 4th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 5:
                        f.writelines(" 5th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 6:
                        f.writelines(" 6th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 7:
                        f.writelines(" 7th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 8:
                        f.writelines(" 8th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 9:
                        f.writelines(" 9th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 10:
                        f.writelines(" 10th Company Champion, or equivalent")
                LegendaryFigure = "Champion"
            elif NumFoundingLegend <= 60:
                f.writelines(" Librarian, or equivalent")
                LegendaryFigure = "Librarian"
            elif NumFoundingLegend <= 70:
                f.writelines(" Chaplain, or equivalent")
                LegendaryFigure = "Chaplain"
            elif NumFoundingLegend <= 80:
                f.writelines(" Techmarine, or equivalent")
                LegendaryFigure = "Techmarine"
            elif NumFoundingLegend <= 90 and Founding == "Ultima Founding":
                f.writelines(" Lieutenant, or equivalent")
                LegendaryFigure = "Lieutenant"
            elif NumFoundingLegend <= 100:
                f.writelines(" Force Commander, or equivalent")
                LegendaryFigure = "Force Commander"
            elif NumFoundingLegend <= 110:
                f.writelines(" Apothecary, or equivalent")
                LegendaryFigure = "Apothecary"
            elif NumFoundingLegend <= 120:
                NumFoundingCptSelect = random.randint (1,10)
                print("Founding Captain Roll:")
                print(NumFoundingCptSelect)
                if NumFoundingCptSelect == 1:
                    f.writelines(" 1st Company Captain, or equivalent")
                elif NumFoundingCptSelect == 2:
                    f.writelines(" 2nd Company Captain, or equivalent")
                elif NumFoundingCptSelect == 3:
                    f.writelines(" 3rd Company Captain, or equivalent")
                elif NumFoundingCptSelect == 4:
                    f.writelines(" 4th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 5:
                    f.writelines(" 5th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 6:
                    f.writelines(" 6th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 7:
                    f.writelines(" 7th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 8:
                    f.writelines(" 8th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 9:
                    f.writelines(" 9th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 10:
                    f.writelines(" 10th Company Captain, or equivalent")
                LegendaryFigure = "Captain"
            elif NumFoundingLegend <= 130:
                f.writelines(" Dreadnought, or equivalent")
                LegendaryFigure = "Dreadnought"
            elif NumFoundingLegend <= 135:
                f.writelines(" Sergeant, or equivalent")
                LegendaryFigure = "Sergeant"
            elif NumFoundingLegend <= 138:
                f.writelines(" Battle-Brother, or equivalent")
                LegendaryFigure = "Battle-Brother"
            elif NumFoundingLegend == 140:
                f.writelines(" A Chapter member of your choice")
        elif NumLegendFigure <= 40:
            f.writelines("\nChapter Master, or equivalent")
            LegendaryFigure = "Chapter Master"
        elif NumLegendFigure <= 50:
            NumChampSelect1 = random.randint (1,2)
            print("Champion Roll:")
            print(NumChampSelect1)
            if NumChampSelect1 == 1:
                f.writelines("\nChapter Champion, or equivalent")
            elif NumChampSelect1 == 2:
                NumChampSelect2 = random.randint (1,10)
                print("Champion Company Roll:")
                print(NumChampSelect2)
                if NumChampSelect2 == 1:
                    f.writelines("\n1st Company Champion, or equivalent")
                elif NumChampSelect2 == 2:
                    f.writelines("\n2nd Company Champion, or equivalent")
                elif NumChampSelect2 == 3:
                    f.writelines("\n3rd Company Champion, or equivalent")
                elif NumChampSelect2 == 4:
                    f.writelines("\n4th Company Champion, or equivalent")
                elif NumChampSelect2 == 5:
                    f.writelines("\n5th Company Champion, or equivalent")
                elif NumChampSelect2 == 6:
                    f.writelines("\n6th Company Champion, or equivalent")
                elif NumChampSelect2 == 7:
                    f.writelines("\n7th Company Champion, or equivalent")
                elif NumChampSelect2 == 8:
                    f.writelines("\n8th Company Champion, or equivalent")
                elif NumChampSelect2 == 9:
                    f.writelines("\n9th Company Champion, or equivalent")
                elif NumChampSelect2 == 10:
                    f.writelines("\n10th Company Champion, or equivalent")
            LegendaryFigure = "Champion"
        elif NumLegendFigure <= 60:
            f.writelines("\nLibrarian, or equivalent")
            LegendaryFigure = "Librarian"
        elif NumLegendFigure <= 70:
            f.writelines("\nChaplain, or equivalent")
            LegendaryFigure = "Chaplain"
        elif NumLegendFigure <= 80:
            f.writelines("\nTechmarine, or equivalent")
            LegendaryFigure = "Techmarine"
        elif NumLegendFigure <= 90 and PrimarisReinforcements == "Yes" or Founding == "Ultima Founding":
            f.writelines("\nLieutenant, or equivalent")
            LegendaryFigure = "Lieutenant"
        elif NumLegendFigure <= 100:
            f.writelines("\nForce Commander, or equivalent")
            LegendaryFigure = "Force Commander"
        elif NumLegendFigure <= 110:
            f.writelines("\nApothecary, or equivalent")
            LegendaryFigure = "Apothecary"
        elif NumLegendFigure <= 120:
            NumCptSelect = random.randint (1,10)
            print("Captain Roll:")
            print(NumCptSelect)
            if NumCptSelect == 1:
                f.writelines("\n1st Company Captain, or equivalent")
            elif NumCptSelect == 2:
                f.writelines("\n2nd Company Captain, or equivalent")
            elif NumCptSelect == 3:
                f.writelines("\n3rd Company Captain, or equivalent")
            elif NumCptSelect == 4:
                f.writelines("\n4th Company Captain, or equivalent")
            elif NumCptSelect == 5:
                f.writelines("\n5th Company Captain, or equivalent")
            elif NumCptSelect == 6:
                f.writelines("\n6th Company Captain, or equivalent")
            elif NumCptSelect == 7:
                f.writelines("\n7th Company Captain, or equivalent")
            elif NumCptSelect == 8:
                f.writelines("\n8th Company Captain, or equivalent")
            elif NumCptSelect == 9:
                f.writelines("\n9th Company Captain, or equivalent")
            elif NumCptSelect == 10:
                f.writelines("\n10th Company Captain, or equivalent")
            LegendaryFigure = "Captain"
        elif NumLegendFigure <= 130:
            f.writelines("\nDreadnought, or equivalent")
            LegendaryFigure = "Dreadnought"
        elif NumLegendFigure <= 135:
            f.writelines("\nSergeant, or equivalent")
            LegendaryFigure = "Sergeant"
        elif NumLegendFigure <= 138:
            f.writelines("\nBattle-Brother, or equivalent")
            LegendaryFigure = "Battle-Brother"
        elif NumLegendFigure == 140:
            f.writelines("\nA Chapter member of your choice")
            
        f.writelines("\n")

## The following code defines the deeds of the Chapter's Legend

        f.writelines("\n    Legendary Deeds")
        NumLegendDeeds = random.randint (1,201)
        print("Legendary Deed Roll:")
        print(NumLegendDeeds)
        if NumLegendDeeds <= 15:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the foul orks.")
            NumOrkDeeds = random.randint (1,100)
            print("Ork Deeds Roll:")
            print(NumOrkDeeds)
            if NumOrkDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many greenskins across so many battlefields that some among the repulsive xenos themselves have become familiar with his name.")
            elif NumOrkDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he foiled the plans of enough Warbosses that a wealth of bounties were placed on his head. Freebootaz tell stories about failed attempts to claim it.")
            elif NumOrkDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was instrumental in putting such a grinding halt to a Waaagh! that the resulting infighting over who was to blame lead directly to its dissolution into warring factions.")
            elif NumOrkDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he single-handedly felled a Gargant. Apocryphal stories are told by allies about how a lone Astartes boarded the colossal machine and did not emerge until it was destroyed.")
            elif NumOrkDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the greenskins so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 30:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the perfidious eldar.")
            NumEldarDeeds = random.randint (1,100)
            print("Eldar Deeds Roll:")
            print(NumEldarDeeds)
            if NumEldarDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many eldar across so many battlefields that some among the deceitful xenos themselves have become familiar with his name.")
            elif NumEldarDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he interrupted so many prophecies that some Farseers have come to suspect that he is somehow beyond their sight or means of intervention.")
            elif NumEldarDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was instrumental in stopping so many drukhari slave raids that various Kabals began blaming one another for somehow being responsible for his presence, allegedly to sabotage their rivals. The ensuing infighting crippled their operatons for a considerable time.")
            elif NumEldarDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was directly responsible for the harming of an exodite World Spirit. This monumental blow to their society, pride and spiritual well-being earned him the eternal ire of that world's exodites, and likely any Craftworld benefactors they might have.")
            elif NumEldarDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the eldar so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 45:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the vile tyranids.")
            NumTyranidDeeds = random.randint (1,100)
            print("Tyranid Deeds Roll:")
            print(NumTyranidDeeds)
            if NumTyranidDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many tyranids across so many battlefields that some among the ravenous xenos themselves have become familiar with him on some instinctive level.")
            elif NumTyranidDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was instrumental in halting the invasion and preventing the subsequent consumption of an Imperial world. The surviving populace hailed him as their savior.")
            elif NumTyranidDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he hunted down and destroyed a plethora of Genestealer Cults, ending their sinister plans of rebellion. Depending on the brutality of the purges, the local populaces may remember him as a necessary evil.")
            elif NumTyranidDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he cleansed a space hulk of its genestealer infestation, aboard which he was thought lost when it disappeared into the Warp. When it reappeared, his was the only life sign detected aboard.")
            elif NumTyranidDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was assumed dead by the tyranids so many times that some base instinct now seems to hold that he is deathless. Some among their number have taken to making sure their prey is dead, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 60:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the upstart tau.")
            NumTauDeeds = random.randint (1,100)
            print("Tau Deeds Roll:")
            print(NumTauDeeds)
            if NumTauDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many tau across so many battlefields that some among the ignorant xenos themselves have become familiar with his name.")
            elif NumTauDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was responsible for the deaths of multiple Ethereals, demoralising their people. There has been no shortage of tau curses directed at him.")
            elif NumTauDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he wiped out an entire kroot Kindred. Others swore to hunt him down and avenge their kin.")
            elif NumTauDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was instrumental in a planetary invasion that saw local Gue'vesa traitors purged and Imperial rule restored.")
            elif NumTauDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the tau so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 75:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the abominable necrons.")
            NumNecronDeeds = random.randint (1,100)
            print("Necron Deeds Roll:")
            print(NumNecronDeeds)
            if NumNecronDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many necrons across so many battlefields that some among the aberrant xenos themselves have become familiar with his name.")
            elif NumNecronDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he recognised that if the monolith was destroyed, the battle would be over. Field reports indicate that he led a charge against the xenos construct, resulting in its annihilation.")
            elif NumNecronDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he personally fought through a throng of immortals and slew the Lord who was coordinating the battle. The subsequent victory was attributed to him.")
            elif NumNecronDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was responsible for the destruction of an entire Destroyer Cult. The irony of the situation became something of a joke within the Chapter - at least as far as Astartes humor goes.")
            elif NumNecronDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the necrons so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to making sure their enemies are dead, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 90:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the heretical minions of Chaos.")
            NumChaosDeeds = random.randint (1,100)
            print("Chaos Deeds Roll:")
            print(NumChaosDeeds)
            if NumChaosDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many of them across so many battlefields that some among the contemptible heretics themselves have become familiar with his name.")
            elif NumChaosDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he hunted down and destroyed a plethora of cults dedicated to the ruinous powers, ending their heretical plans of rebellion. Depending on the brutality of the purges, the local populaces may remember him as a necessary evil.")
            elif NumChaosDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he so thoroughly foiled the plans of a Chaos Lord. The failure was so absolute that the Lord was punished for his shortcomings by being transformed into a gibbering, witless Chaos Spawn.")
            elif NumChaosDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he personally slew a daemon prince")
                NumDaemonPrinceGod = random.randint (1,41)
                print("Daemon Prince God Roll:")
                print(NumDaemonPrinceGod)
                if NumDaemonPrinceGod <= 10:
                    f.writelines(" of Khorne")
                elif NumDaemonPrinceGod <= 20:
                    f.writelines(" of Tzeentch")
                elif NumDaemonPrinceGod <= 30:
                    f.writelines(" of Nurgle")
                elif NumDaemonPrinceGod <= 40:
                    f.writelines(" of Slaanesh")
                elif NumDaemonPrinceGod <= 41:
                    f.writelines(" of Chaos Undivided")
                f.writelines(", banishing it back to the Warp and ending the threat it posed for numerous generations.")
            elif NumChaosDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the followers of Chaos so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 100:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the misguided humans from non-Imperial factions.")
            NumRebelDeeds = random.randint (1,100)
            print("Rebel Deeds Roll:")
            print(NumRebelDeeds)
            if NumRebelDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many of them across so many battlefields that the dissidents themselves have become familiar with his name.")
            elif NumRebelDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was instrumental in the defeat of a rebel uprising, preventing their secession from the Imperium.")
            elif NumRebelDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was responsible for bringing a hitherto undiscovered lesser human empire into the light of the Emperor, absorbing it into the Imperium.")
            elif NumRebelDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he discovered the existence of a human-xenos alliance that had gone unnoticed until then. The humans were punished for their betrayal of human supremacy. The xenos were exterminated.")
            elif NumRebelDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the dissenters so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 115:
            f.writelines("\nThis Astartes is remembered for his dedication to upholding the Chapter's honor.")
            NumHonorDeeds = random.randint (1,100)
            print("Honor Deeds Roll:")
            print(NumHonorDeeds)
            if NumHonorDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally recovered a standard of the Chapter that had long been lost to the enemy.")
            elif NumHonorDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he slew a sworn enemy of the Chapter in single combat, settling a grudge and ending a long-standing rivalry.")
            elif NumHonorDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was instrumental in recovering a land raider that was thought to have been lost, or even destroyed.")
            elif NumHonorDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was directly responsible for lifting a siege of the Chapter's Fortress-Monastery, preventing its destruction, or worse, desecration.")
            elif NumHonorDeeds <= 100:
                f.writelines("\nAmong other heroic acts, he personally recovered a suit of terminator armor that had long been absent from the Chapter's armory.")
            elif NumHonorDeeds <= 110:
                f.writelines("\nAmong other heroic acts, he helped hunt down and kill a number of traitorous brothers who had gone renegade, or worse, fallen to the Ruinous Powers.")
            elif NumHonorDeeds <= 120:
                f.writelines("\nAmong other heroic acts, he was instrumental in recovering an amount of precious gene-seed that was thought to have been lost, or even destroyed.")
            elif NumHonorDeeds <= 130:
                f.writelines("\nAmong other heroic acts, he was instrumental in the preservation of an amount of Chapter lore, which would otherwise have been lost.")
        elif NumLegendDeeds <= 130:
            f.writelines("\nThis Astartes is remembered for his dedication to the people of the Imperium.")
            NumImperiumDeeds = random.randint (1,100)
            print("Imperium Deeds Roll:")
            print(NumImperiumDeeds)
            if NumImperiumDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally retrieved a vital replacement component, instrumental in the continued operation of a hive city, as well as the survival of its inhabitants.")
            elif NumImperiumDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was directly responsible for enduring a siege laid against a hive city, as well as subsequently repulsing the attack and scattering the enemy before the city's walls.")
            elif NumImperiumDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he once stood alone between a civilian shelter and the enemies of the Imperium. The Chapter maintains he held this position for at least 20 hours, without pause.")
            elif NumImperiumDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was instrumental in staging a fighting retreat when battle lines collapsed, which bought time for a civilian evacuation and ensured the survival of countless non-combatants.")
            elif NumImperiumDeeds <= 100:
                f.writelines("\nAmong other heroic acts, he helped rebuild planetary infrastructure following a particularly destructive war.")
        elif NumLegendDeeds <= 145:
            f.writelines("\nThis Astartes is remembered as an accomplished warrior.")
            NumWarriorDeeds = random.randint (1,100)
            print("Warrior Deeds Roll:")
            print(NumWarriorDeeds)
            if NumWarriorDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he spent countless hours familiarising himself with the Chapter's arsenal, eventually mastering every weapon in the armory, a feat not achieved by his brothers before or since.")
            elif NumWarriorDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he slew countless enemy champions across his lifetime. Occasionally, such feats would effectively end a battle prematurely, as his victory bolstered the morale of his allies, while crushing that of his foes.")
            elif NumWarriorDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he spent countless hours familiarising himself with his weapon of choice, eventually mastering it to a degree that was unparalleled in the Chapter. Some hold that he is unsurpassed to this day.")
            elif NumWarriorDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he fought in more battles than anyone else in the Chapter, seeing deployment on a myriad worlds across innumerable theaters.")
            elif NumWarriorDeeds <= 100:
                f.writelines("\nAmong other heroic acts, the Chapter claims he never once suffered an injury in battle. Whether through skill or luck, the legend persists, although outsiders are typically skeptical of these claims.")
        elif NumLegendDeeds <= 160:
            f.writelines("\nThis Astartes is remembered as an inspiring leader.")
            NumLeaderDeeds = random.randint (1,100)
            print("Leader Deeds Roll:")
            print(NumLeaderDeeds)
            if NumLeaderDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he roused his battle brothers to perform great deeds against insurmountable odds across many battles, turning the tide in an otherwise bleak situation.")
            elif NumLeaderDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he roused mortal warriors to perform great deeds against insurmountable odds across many battles, turning the tide in an otherwise bleak situation.")
            elif NumLeaderDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he served on the leading council of an Imperial crusade. His counsel directly resulted in countless battles, and some might argue he was largely responsible for the crusade's success.")
            elif NumLeaderDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he wrote a treatise on strategy. Although not comparable in scope or complexity to the Codex Astartes, it was nonetheless comprehensive, and is still used by the Chapter to this day.")
            elif NumLeaderDeeds <= 100:
                f.writelines("\nAmong other heroic acts, the Chapter claims he once won a battle with words alone, convincing the enemy to surrender without a fight.")
        elif NumLegendDeeds <= 175:
            f.writelines("\nThis Astartes is remembered as a paragon of his craft.")
            print("Paragon Deeds Roll:")
            print(LegendaryFigure)
            if LegendaryFigure == "Chapter Master":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Chapter Masters in its history. Those who follow in his footsteps will inevitably be measured against his considerable leadership skills.")
            elif LegendaryFigure == "Champion":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Champions in its history. Those who follow in his footsteps will inevitably be measured against his considerable duelling skills.")
            elif LegendaryFigure == "Librarian":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Librarians in its history. Those who follow in his footsteps will inevitably be measured against his considerable knowledge of the eldritch and arcane.")
            elif LegendaryFigure == "Chaplain":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Chaplains in its history. Those who follow in his footsteps will inevitably be measured against his considerable oratory skills.")
            elif LegendaryFigure == "Techmarine":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Techmarines in its history. Those who follow in his footsteps will inevitably be measured against his considerable mastery of machines and cogitators.")
            elif LegendaryFigure == "Force Commander":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Force Commanders in its history. Those who follow in his footsteps will inevitably be measured against his considerable leadership skills.")
            elif LegendaryFigure == "Apothecary":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Apothecaries in its history. Those who follow in his footsteps will inevitably be measured against his considerable medical knowledge and healing skills.")
            elif LegendaryFigure == "Captain":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Captains in its history. Those who follow in his footsteps will inevitably be measured against his considerable leadership skills.")
            elif LegendaryFigure == "Dreadnought":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Dreadnoughts in its history. Those who follow in his footsteps will inevitably be measured against his considerable historical knowledge and martial skills.")
            elif LegendaryFigure == "Sergeant":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Sergeants in its history. Those who follow in his footsteps will inevitably be measured against his considerable leadership skills.")
            elif LegendaryFigure == "Battle-Brother":
                f.writelines("\nAmong other heroic acts, his Chapter holds him to be among the most proficient Battle-Brothers in its history. Those who follow in his footsteps will inevitably be measured against his considerable martial skills.")
        elif NumLegendDeeds <= 200:
            f.writelines("\nThis Astartes is remembered for having recovered an STC fragment.")
            NumSTCFragmentDeeds = random.randint (1,100)
            print("STC Fragment Deeds Roll:")
            print(NumSTCFragmentDeeds)
            if NumSTCFragmentDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a barely functional fragment of a Standard Template Construct. However, a barely functional STC fragment is still a considerable boon.")
            elif NumSTCFragmentDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a mostly functional fragment of a Standard Template Construct. Although not fully functional, any STC fragment is still a considerable boon.")
            elif NumSTCFragmentDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a functional fragment of a Standard Template Construct. While not a complete STC, a fragment of one is still a considerable boon.")
            elif NumSTCFragmentDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a pristine fragment of a Standard Template Construct. While not a complete STC, this fragment is almost immaculate, representing a considerable boon.")
            elif NumSTCFragmentDeeds <= 100:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, multiple fragments of a Standard Template Construct of varying quality. Finding one is extraordinary, but finding multiple is particularly rare.")
        elif NumLegendDeeds <= 201:
            f.writelines("\nThis Astartes is remembered for having recovered a full STC.")
            NumFullSTCDeeds = random.randint (1,100)
            print("Full STC Deeds Roll")
            print(NumFullSTCDeeds)
            if NumFullSTCDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a barely functional Standard Template Construct. However, a barely functional STC is still an incomparable boon.")
            elif NumFullSTCDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a mostly functional Standard Template Construct. Although not fully functional, any STC is still an incomparable boon.")
            elif NumFullSTCDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a functional Standard Template Construct. Such a discovery represents an incomparable boon.")
            elif NumFullSTCDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a pristine Standard Template Construct. This STC is almost immaculate, representing an incomparable boon.")
            elif NumFullSTCDeeds <= 100:
                f.writelines("\nAmong other heroic acts, he managed to discover, and recover, a multiple Standard Template Constructs of varying quality. Finding one is almost unheard of, but finding multiple is incomprehensibly rare.")
            
        f.writelines("\n")
        
## The following code defines the fate of the legend

        f.writelines("\n    Legendary Figure's Fate")
        NumLegendFate = random.randint (1,21)
        print("Legend Fate Roll:")
        print(NumLegendFate)
        if NumLegendFate <= 10:
            f.writelines("\nDead: no man lives forever, even among the Adeptus Astartes. Whether by the hands of the Chapter's enemies, due to some catastrophe, or something else entirely, he no longer lives.")
        elif NumLegendFate <= 15:
            f.writelines("\nMissing: having vanished without a trace, many outside the Chapter have written him off as dead. However, his brothers claim he yet lives, and may even believe he will return.")
        elif NumLegendFate <= 20:
            f.writelines("\nAlive: undeterred by age, wounds and foes, he still serves within the Chapter to this very day.")
        elif NumLegendFate <= 21:
            f.writelines("\nTraitor: it happens on occasion that Astartes must either die, lest they live long enough to betray their brothers. Whether falling to Chaos or simply going rogue as a renegade Astartes, whatever the reason might have been, he turned his back on the Chapter, and may even have taken others with him.")

        f.writelines("\n")

## The following code defines the Chapter's Homeworld

        f.writelines("\n    Chapter Homeworld")
        NumChapterHomeworld = random.randint (1,100)
        print("Homeworld Roll:")
        print(NumChapterHomeworld)
        if NumChapterHomeworld <= 15:
            HomeworldModifier()
            f.writelines("Hive World: this Chapter's homeworld is the site of numerous hive cities, each home to billions of Imperial citizens, spanning entire continents.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 30:
            HomeworldModifier()
            f.writelines("Civilised World: this Chapter's homeworld is not dissimilar to Old Earth during the Age of Terra, in and around the 3rd millennium.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 60:
            HomeworldModifier()
            f.writelines("Feudal World: this Chapter's homeworld has not yet developed past a medieval stage, whether by design or by chance, although it may exist amidst the ruins of a more technologically advanced civilisaton.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 70:
            HomeworldModifier()
            f.writelines("Fortress World: this Chapter's homeworld has been transformed into a virtually unassailable stronghold. Even beyond the Fortress-Monastery, planetary defences are both extensive and vast.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 80:
            HomeworldModifier()
            f.writelines("Death World: this Chapter's homeworld is entirely hostile to human life. This may be limited to the biosphere, but can also include the entirety of the planetary environment in one way or another.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 90:
            HomeworldModifier()
            f.writelines("Armory World: this Chapter's homeworld is home to a vast store of arms, armor and munitions, some of it new, some of it ancient.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 100:
            f.writelines("\nFleet-based: this Chapter, whether or not by choice, has no homeworld. Instead, they roam the stars aboard ~")
            NumFleetSize = str(random.randint(10+1, 10+10))
            print("Fleet Size Roll:")
            print(NumFleetSize)
            f.write(NumFleetSize)
            f.write(" ships. In most fleet-based Chapters, a battle-barge typically fills the role of Fortress-Monastery.")
            NumUniqueFlagship = random.randint(10,10)
            print("Unique Flagship Roll:")
            print(NumUniqueFlagship)
            if NumUniqueFlagship == 10:
                f.writelines("\nHowever, this Chapter makes use of a unique vessel instead of a 'standard' battle-barge.")
            Homeworld = "Fleet-Based"
            
        f.writelines("\n")
        
## The following code defines the Chapter's means of recruitment if fleet-based

        if Homeworld == "Fleet-Based":
            f.writelines("\n    Fleet-Based Recruitment")
            NumFleetRecruitment = random.randint (1,8)
            print("Fleet Recruitment Roll:")
            print(NumFleetRecruitment)
            if NumFleetRecruitment <= 2:
                f.writelines("\nKeeps: this Chapter maintains a number of keeps throughout the Imperium, from which are used to stage recruitment efforts.")
            elif NumFleetRecruitment <= 4:
                f.writelines("\nLocals: this Chapter draws its Aspirants from worlds they come across during their voyage through the void, probably most frequently from worlds on which the Chapter has been deployed.")
            elif NumFleetRecruitment <= 6:
                f.writelines("\nRecruitment Worlds: this Chapter has ")
                NumFleetRecruitmentWorlds = random.randint (1,14)
                print("Chapter Endangered Roll:")
                print(NumFleetRecruitmentWorlds)
                if NumFleetRecruitmentWorlds <= 5:
                    f.writelines("a recruitment world")
                elif NumFleetRecruitmentWorlds <= 8:
                    f.writelines("two recruitment worlds")
                elif NumFleetRecruitmentWorlds <= 11:
                    f.writelines("three recruitment worlds")
                elif NumFleetRecruitmentWorlds <= 13:
                    f.writelines("four recruitment worlds")
                elif NumFleetRecruitmentWorlds <= 14:
                    f.writelines("five recruitment worlds")
                f.writelines(" from which it can draw its Aspirants.")
            elif NumFleetRecruitment <= 8:
                f.writelines("\nShip Crews: this Chapter draws its Aspirant from ship crews, whether those manning its own vessels, or from Imperial Navy vessels active in the same theater.")
            f.writelines("\n")
            
## The following code defines the nature of the Chapter's Fortress-Monastery

        if Homeworld != "Fleet-Based":
            f.writelines("\n    Fortress-Monastery Type")
            NumMonasteryType = random.randint (1,20)
            print("Fortress-Monastery Type Roll:")
            print(NumMonasteryType)
            if NumMonasteryType <= 10:
                f.writelines("\nClassic Fortress: this Chapter's Fortress-Monastery is as 'normal' as such things get, taking the form of a massive, static planetside fortification. In rare cases, it may also be multiple such locations, though likely smaller in size. In even rarer cases, the site, or sites, may be subterranean.")
            elif NumMonasteryType <= 12:
                f.writelines("\nMobile Land Fortress: this Chapter's Fortress-Monastery is landbound and mobile, taking the form of a great machine capable of moving across the planet's surface. In rare cases, it may also be multiple such machines, though likely smaller in size. In even rarer cases, the machine, or machines, may be subterranean.")
            elif NumMonasteryType <= 14:
                f.writelines("\nMobile Air Fortress: this Chapter's Fortress-Monastery is aerial and mobile, taking the form of a great machine capable of moving through the planet's skies. In rare cases, it may also be multiple such machines, though likely smaller in size.")
            elif NumMonasteryType <= 16 and HomeworldModifier != "Frozen" and HomeworldModifier != "Sunless":
                f.writelines("\nMobile Sea Fortress: this Chapter's Fortress-Monastery is nautical and mobile, taking the form of a great machine capable of moving across the planet's seas. In rare cases, it may also be multiple such machines, though likely smaller in size. In even rarer cases, the machine, or machines, may be submersible.")
            elif NumMonasteryType <= 18:
                f.writelines("\nRepurposed Voidship: this Chapter's Fortress-Monastery was built from the hull of a voidship, likely having been previously active in the Chapter's own fleet. Whether it was deliberately landed on the planet or crashed for one reason or another, its size may range from a light cruiser to a battle-barge.")
            elif NumMonasteryType <= 19:
                f.writelines("\nOrbital Space Station: this Chapter's Fortress-Monastery takes the form of a large station orbiting their homeworld. In rare cases, it may also be multiple such orbital structures, though likely smaller in size. In even rarer cases, the station, or stations, may be capable of relocation by some means.")
            elif NumMonasteryType <= 20:
                f.writelines("\nChoose something truly unusual.")
            f.writelines("\n")
            
## The following code defines additional recruiting worlds
        
        if Homeworld != "Fleet-Based":
            NumAdditionalWorlds = random.randint (1,10)
            print("Additional Recruiting Worlds Roll:")
            print(NumAdditionalWorlds)
            if NumAdditionalWorlds <= 8:
                f.writelines("")
            elif NumAdditionalWorlds <= 10:
                f.writelines("\n    Additional Recruiting Worlds")
                NumRecruitingWorldNumber = random.randint(1,14)
                print("Recruiting World Number Roll:")
                print(NumRecruitingWorldNumber)
                if NumRecruitingWorldNumber <= 5:
                    f.writelines("\nThis Chapter has one recruiting world in addition to its homeworld.")
                elif NumRecruitingWorldNumber <= 8:
                    f.writelines("\nThis Chapter has two recruiting worlds in addition to its homeworld.")
                elif NumRecruitingWorldNumber <= 11:
                    f.writelines("\nThis Chapter has three recruiting worlds in addition to its homeworld.")
                elif NumRecruitingWorldNumber <= 13:
                    f.writelines("\nThis Chapter has four recruiting worlds in addition to its homeworld.")
                elif NumRecruitingWorldNumber <= 14:
                    f.writelines("\nThis Chapter has five recruiting worlds in addition to its homeworld.")
                f.writelines("\n")
            
## The following code defines the Chapter's Organisation

        f.writelines("\n    Organisation")
        if ProgenitorChapter == "Ultramarines":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 7:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Codex Elements")
                CodexElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 10:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
        elif ProgenitorChapter == "Imperial Fists" or ProgenitorChapter == "White Scars" or ProgenitorChapter == "Raven Guard":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 5:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Codex Elements")
                CodexElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 10:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
        elif ProgenitorChapter == "Dark Angels" or ProgenitorChapter == "Blood Angels" or ProgenitorChapter == "Iron Hands" or ProgenitorChapter == "Space Wolves" or ProgenitorChapter == "Salamanders":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 3:
                f.writelines("\nThis Chapter matches its progenitor's organisation")
            elif NumChapterOrg <= 5:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Codex Elements")
                CodexElement()
            elif NumChapterOrg <= 7:
                f.writelines("\nThis Chapter has somewhat diverged from its progenitor's organisation")
                f.writelines("\n")
                f.writelines("\n    Non-Progenitor Elements")
                NonProgenitorElement()
            elif NumChapterOrg <= 8:
                f.writelines("\nThis Chapter has significantly diverged from its progenitor's organisation")
                f.writelines("\n")
                f.writelines("\n    Non-Progenitor Elements")
                NonProgenitorElement()
                NonProgenitorElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 10:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
        elif ProgenitorChapter == "Unknown" or ProgenitorChapter == "Suspected Traitor":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 3:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Codex Elements")
                CodexElement()
            elif NumChapterOrg <= 8:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
                
        f.writelines("\n")
        
## The following code defines the Chaoter's unity

        f.writelines("\n    Chapter Unity")
        NumChapterUnity = random.randint (1,100)
        print("Chapter Unity Roll:")
        print(NumChapterUnity)
        if NumChapterUnity <= 85:
            f.writelines("\nUnited: this Chapter is, regardless of more minute details of organisation, a single, cohesive group. There are no internal conflicts beyond what is the norm for the Adeptus Astartes.")
        elif NumChapterUnity <= 90:
            f.writelines("\nMostly United: this Chapter can, regardless of more minute details of organisation, for the most part be considered a cohesive group. However, internal conflicts are more common than among their peers, and there may be external concerns about this.")
        elif NumChapterUnity <= 95:
            f.writelines("\nBarely United: this Chapter is held together by name and affiliation alone. Internal conflicts are frequent, and while the Chapter still functions as a Chapter, the wider Imperium is well aware that the fabric of the Chapter is thoroughly frayed.")
        elif NumChapterUnity <= 100:
            f.writelines("\nFractured: this Chapter is a Chapter in name only. Its Astartes have split into factions that only share a name, roaming around with their own agendas. Their Fortress-Monastery likely reflects this internal turmoil. These Astartes are infamous in the wider Imperium for their inability to cooperate with their own brothers.")
        
        f.writelines("\n")

## The following code defines the Chapter's Doctrine

        global CombatDoctrine
        f.writelines("\n    Combat Doctrine")
        NumCombatDoctrine = random.randint (1,28)
        print("Combat Doctrine Roll:")
        print(NumCombatDoctrine)
        if NumCombatDoctrine <= 1:
            f.writelines("\nClose Combat: this Chapter favors engaging the enemy in close quarters. While still proficient at range, these Astartes are truly in their element when crossing blades with their foes, eye to eye.")
        elif NumCombatDoctrine <= 2:
            f.writelines("\nRanged Combat: this Chapter favors engaging the enemy at range. While still proficient in melee, these Astartes are truly in their element when allowed to fight from a distance.")
        elif NumCombatDoctrine <= 3:
            f.writelines("\nArmoured Assault: this Chapter favors engaging the enemy as an entirely mechanized force, affording them excellent tactical mobility.")
        elif NumCombatDoctrine <= 4:
            f.writelines("\nStealth: this Chapter favors engaging the enemy while they're unaware, having mastered the art of ambushes and the use of traps.")
        elif NumCombatDoctrine <= 5:
            f.writelines("\nLightning Strike: this Chapter favors engaging the enemy hard and fast, using hit-and-run tactics if the initial assault fails to destroy them entirely.")
        elif NumCombatDoctrine <= 6:
            f.writelines("\nDrop Pod Assault: this Chapter favors engaging the enemy via orbital insertion, relying on the element of surprise by suddenly appearing amidst or behind enemy lines.")
        elif NumCombatDoctrine <= 7:
            f.writelines("\nThunderhawk Assault: this Chapter favors engaging the enemy via aerial insertion, using their armed transports to clear a landing zone before rapidly disembarking.")
        elif NumCombatDoctrine <= 8:
            f.writelines("\nSiege: this Chapter favors engaging the enemy via encirclement and with massed artillery, or using an assortment of other siege methods to crack hostile fortresses.")
        elif NumCombatDoctrine <= 9:
            f.writelines("\nShock & Awe: this Chapter favors engaging the enemy with overwhelming firepower, relying in part on its sheer concussive effect, and in part on its destructive force.")
        elif NumCombatDoctrine <= 10:
            f.writelines("\nBoarding Actions: this Chapter favors engaging the enemy during fleet actions as true space marines, boarding their enemies and killing them from inside out.")
        elif NumCombatDoctrine <= 11:
            f.writelines("\nUrban Combat: this Chapter favors engaging the enemy in cities, hives and factories. Where others lay siege, these Astartes breach and attack.")
        elif NumCombatDoctrine <= 12:
            f.writelines("\nForce Recon: this Chapter favors a doctrine of using smaller detachment to scout and sabotage their enemies immediately prior to attacking.")
        elif NumCombatDoctrine <= 13:
            f.writelines("\nAerial Supremacy: this Chapter favors engaging the enemy with superior air support, relying heavily on the substantial arsenal of combat aircraft available to the Adeptus Astartes.")
        elif NumCombatDoctrine <= 14:
            f.writelines("\nDefensive Operations: this Chapter favors fighting from a static or semi-static position of strength, relying on the substantial resources and expertise the Adeptus Astartes can call upon to create strong defenses.")
        elif NumCombatDoctrine <= 15:
            f.writelines("\nAll Or Nothing: this Chapter favors fighting as a single comprehensive force, deploying the entirety of its available Astartes when possible.")
        elif NumCombatDoctrine <= 16:
            f.writelines("\nTask Force: this Chapter favors deploying the minimum practical number of Astartes, focusing instead on putting as many marines in as many right places at the right time as possible.")
        elif NumCombatDoctrine <= 17:
            f.writelines("\nMinimize Losses: this Chapter favors a cautious form of combat, whereby they seek to inflict as many casualties on their enemies as possible, while suffering as few of their own as possible.")
        elif NumCombatDoctrine <= 18 and UnitRestrictions != "Librarian":
            f.writelines("\nMartial Psykers: this Chapter favors bringing psychic powers to bear on their enemies, relying heavily on their Librarians to augment their fighting forces.")
            CombatDoctrine = "Martial Psykers"
        elif NumCombatDoctrine <= 19:
            f.writelines("\nEndurance: this Chapter favors leveraging the raw staying power of superhuman Astartes over tactical or strategic considerations.")
        elif NumCombatDoctrine <= 20:
            f.writelines("\nFlanking Strikes: this Chapter favors engaging the enemy where they aren't, rather than where they are, preferring to strike at the weakest points.")
        elif NumCombatDoctrine <= 21 and UnitRestrictions != "Terminator":
            f.writelines("\nTerminator Assault: this Chapter favors engaging the enemy using Terminators as a proverbial speartip, relying heavily on their sheer durability and awesome firepower.")
        elif NumCombatDoctrine <= 22 and UnitRestrictions != "Dreadnought":
            f.writelines("\nDreadnought Assault: this Chapter favors engaging the enemy using Dreadnoughts as a proverbial speartip, relying heavily on their sheer durability and awesome firepower.")
        elif NumCombatDoctrine <= 23:
            f.writelines("\nHonorable Conduct: this Chapter favors fighting according to a set of rules by which they believe a proper and just war ought to be waged.")
        elif NumCombatDoctrine <= 24:
            f.writelines("\nTerror: this Chapter favors engaging the enemy using psychological warfare, employing fear as its foremost weapon.")
        elif NumCombatDoctrine <= 25:
            f.writelines("\nRaiding: this Chapter favors attacking exposed or poorly defended enemy elements and infrastructure and withdrawing before a counter-attack can be organised. While some decry this practice as dishonorable, these Astartes either disagree with such assessments, or simply don't care.")
        elif NumCombatDoctrine <= 26:
            f.writelines("\nArchaic: this Chapter favors methods of waging war that are considered archaic by its contemporaries.")
        elif NumCombatDoctrine <= 27:
            f.writelines("\nSpecialists: this Chapter favors tactics and strategies that emphasize the use of specialists over the otherwise widespread importance of the Tactical Squad or its Primaris Intercessor equivalent.")
        elif NumCombatDoctrine <= 28:
            f.writelines("\nGeneralists: this Chapter favors tactics and strategies that emphasize the use of generalists over the otherwise widespread importance of specialist force multipliers.")
        f.writelines("\nNeedless to say, this is not their sole means of fighting their enemies, merely the preferred manner in which they do so, and the means by which they excel.")
        
        f.writelines("\n")

## The following code defines the Chapter's Training

        f.writelines("\n    Characteristic Chapter Training")
        NumChapterTraining = random.randint (1,120)
        print("Chapter Training Roll:")
        print(NumChapterTraining)
        if NumChapterTraining <= 10:
            f.writelines("\nPersonal Weapon Focus: this Chapter instills in its Astartes the vital importance of intimate familiarity with their weapons. They may do this in a variety of ways, for example by meditation, consecration, or frequent maintenance.")
        elif NumChapterTraining <= 20:
            f.writelines("\nBrotherhood: this Chapter instills in its Astartes the paramount value of their bond with their brothers in arms. Consequently, their performance is noticeably higher when in the company of their brothers.")
        elif NumChapterTraining <= 30:
            f.writelines("\nEndurance: this Chapter instills in its Astartes both the utility and the virtue of endurance. Whether mental or physical, no trial is unbearable to these marines.")
        elif NumChapterTraining <= 40:
            f.writelines("\nAccuracy: this Chapter instills in its Astartes the shame of missing a target. Whether in melee or at range, these marines maintain an almost neurotic dedicaton to precision. Perhaps incidentally, they're also very punctual.")
        elif NumChapterTraining <= 50:
            f.writelines("\nStrength: this Chapter instills in its Astartes the overriding principle of strength. With enough force, there is no hide tough enough, no armour resilient enough, and no wall thick enough to withstand their attacks.")
        elif NumChapterTraining <= 60:
            f.writelines("\nInspiration: this Chapter instills in its Astartes an appreciation for the oft-misunderstood art of lifting the hearts of others. Great orators all, they always seem to know exactly what to say, and when to say it, and have used this skill to turn the tide of many battles.")
        elif NumChapterTraining <= 70:
            f.writelines("\nIndividual Skill: this Chapter instills in its Astartes a notion that the performance of the Chapter is reliant on the performance of the individual. Consequently, they perform exceptionally well, even when apart from their brothers.")
        elif NumChapterTraining <= 80:
            f.writelines("\nFlexibility: this Chapter instills in its Astartes a jack-of-all-trades mentality, whereby they perform admirably in most roles. While not specialists, this affords them tremendous tactical flexibility.")
        elif NumChapterTraining <= 90:
            f.writelines("\nPersonal Armor Focus: this Chapter instills in its Astartes the vital importance of intimate familiarity with their armor. They may do this in a variety of ways, for example by meditation, consecration, or frequent maintenance.")
        elif NumChapterTraining <= 100:
            f.writelines("\nAgility: this Chapter instills in its Astartes the life-saving nature of speed and alacrity. A static marine is a dead marine, and they will be in constant motion once battle is joined.")
        elif NumChapterTraining <= 110:
            f.writelines("\nCooperation: this Chapter instills in its Astartes the value of fighting alongside the mortal humans whose Imperium they protect. Accordingly, they may frequently integrate with Imperial military forces, rather than stand apart from them, and either way work well with non-Astartes forces.")
        elif NumChapterTraining <= 120:
            f.writelines("\nSeclusion: this Chapter instills in its Astartes the superiority of space marines over any other fighting force. Consequently, they frequently fight apart from other Imperial military forces, preferring the prowess of their own kind.")
        
        f.writelines("\n")
        
        f.writelines("\n    Aspirant Recruitment")
        NumAspirantRecruitment = random.randint(1,100)
        print("Aspirant Recruitment Roll:")
        print(NumAspirantRecruitment)
        if NumAspirantRecruitment <= 10:
            f.writelines("\nTrial by Combat: this Chapter recruits its Aspirants based on their fighting skills. This may be tested by some manner of organised tournament, observing battles potential Aspirants take part in, or something else entirely.")
        elif NumAspirantRecruitment <= 20:
            f.writelines("\nExposure: this Chapter recruits its Aspirants based on their survival skills, or just sheer endurance. This may be tested by expecting potential Aspirants to travel through hazardous environments to a recruitment location of their own volition, finding outcasts that have survived despite the odds, or something else entirely.")
        elif NumAspirantRecruitment <= 30:
            f.writelines("\nTest of Will: this Chapter recruits its Aspirants based on their resolve. This may be tested by engineering impossible tests and observing who still undertake them, offering temptations that must be rejected, or something else entirely.")
        elif NumAspirantRecruitment <= 40:
            f.writelines("\nSelf-Discovery: this Chapter recruits its Aspirants based on their capacity for introspection. This may be tested by extended meditation, consumption of hallucinogenics, or something else entirely.")
        elif NumAspirantRecruitment <= 50:
            f.writelines("\nChance: this Chapter recruits its Aspirants based on chance. This may be tested by a lottery, an interpretation of causality, or something else entirely.")
        elif NumAspirantRecruitment <= 60:
            f.writelines("\nMentorship: this Chapter recruits its Aspirants via a mentor program. This may take the form of serving as a squire of sorts for an Astartes, living and working among the Serfs for a period, or something else entirely.")
        elif NumAspirantRecruitment <= 70:
            f.writelines("\nTest of Strength: this Chapter recruits its Aspirants based on their strength. This may be tested by a series of feats of strength, a physical competition against an Astartes, or something else entirely.")
        elif NumAspirantRecruitment <= 80:
            f.writelines("\nEsotericism: this Chapter recruits its Aspirants based on their pool of hidden knowledge. This may be tested by some occult ritual the potential Aspirant must conceive and perform, secrets they must discover, or something else entirely.")
        elif NumAspirantRecruitment <= 90:
            f.writelines("\nTest of Wit: this Chapter recruits its Aspirants based on their wit. This may be tested by a sequence of increasingly obscure riddles, placing the Aspirant in a situation from which they can only be delivered by devising a clever means of escape, or something else entirely.")
        elif NumAspirantRecruitment <= 100:
            f.writelines("\nTest of Courage: this Chapter recruits its Aspirants based on their bravery. This may be tested by a ritualised confrontation with their innermost fears, orchestrating events by which they must sacrifice themselves to save someone else, or something else entirely.")
        f.writelines("\nFollowing this, they are examined by the Chapter's apothecaries to determine whether they are suited for gene-seed implantation.")
        
        f.writelines("\n")
        
## The following code defines the Chapter's rite of passage for Neophytes
        
        f.writelines("\n    Recruitment Style")
        NumRecruitmentStyle = random.randint(1,30)
        print("Recruitment Style Roll:")
        print(NumRecruitmentStyle)
        if NumRecruitmentStyle <= 10:
            f.writelines("\nVolunteers: this Chapter only draws its Aspirants from a pool of volunteers.")
        elif NumRecruitmentStyle <= 20:
            f.writelines("\nKidnapping: this Chapter only draws its Aspirants from non-voluntary youths.")
        elif NumRecruitmentStyle <= 30:
            f.writelines("\nMix: this Chapter draws its Aspirants from both a pool of volunteers and non-voluntary youths.")
            
        f.writelines("\n")
        
## The following code defines what happens to the Chapter's failed Aspirants

        f.writelines("\n    Failed Aspirant Fate")
        NumFailedAspirant = random.randint(1,100)
        print("Failed Aspirant Roll:")
        print(NumFailedAspirant)
        if NumFailedAspirant <= 50:
            f.writelines("\nSerf Induction: Aspirants whose bodies reject the gene-seed implants and survive are permitted to join the Chapter's Serfs.")
        elif NumFailedAspirant <= 60:
            f.writelines("\nServitor Conversion: Aspirants whose bodies reject the gene-seed implants and survive are turned into servitors.")
        elif NumFailedAspirant <= 70:
            f.writelines("\nEuthanasia: Aspirants whose bodies reject the gene-seed implants and survive are killed.")
        elif NumFailedAspirant <= 80:
            f.writelines("\nReplacement Parts: Aspirants whose bodies reject the gene-seed implants and survive are put in some form of suspended animation so they can be used to harvest replacement body parts.")
        elif NumFailedAspirant <= 90:
            f.writelines("\nBanishment: Aspirants whose bodies reject the gene-seed implants and survive are ejected from the Chapter and may or may not be returned to their family.")
        elif NumFailedAspirant <= 100 and ExistingMutations != "DOOMED":
            f.writelines("\nProgenoid Slave: Aspirants whose bodies reject the gene-seed implants and survive are used as an incubator for progenoid glands, provided his body didn't reject those.")
        else:
            f.writelines("\nSerf Induction: Aspirants whose bodies reject the gene-seed implants and survive are permitted to join the Chapter's Serfs.")
            
        f.writelines("\n")

## The following code defines the Chapter's treatment of its Serfs

        f.writelines("\n    Serf Treatment")
        NumSerfTreatment = random.randint(1,10)
        print("Serf Treatment Roll:")
        print(NumSerfTreatment)
        if NumSerfTreatment <= 5:
            f.writelines("\nIndifferent: this Chapter treats its Serfs fairly, but largely disregard their presence when interaction is not necessary.")
        elif NumSerfTreatment <= 7:
            f.writelines("\nRespectful: this Chapter treats its Serfs well, recognising the significance of their work. Interaction is fairly common, even when not strictly necessary.")
        elif NumSerfTreatment <= 9:
            f.writelines("\nSlavery: this Chapter treats its Serfs like chattel, considering them to be inferior, worth only what labor they can perform.")
        elif NumSerfTreatment <= 10:
            f.writelines("\nEquals: this Chapter treats its Serfs extraordinarily well, viewing them as equals, without whom the Adeptus Astartes would be unable to carry out their tasks.")
        
        f.writelines("\n")
        
## The following code defines the Chapter's Beliefs

        f.writelines("\n    Chapter Beliefs")
        NumChapterBeliefs = random.randint (1,190)
        print("Chapter Beliefs Roll:")
        print(NumChapterBeliefs)
        if NumChapterBeliefs <= 60 and ProgenitorChapter != "Unknown" and ProgenitorChapter != "Suspected Traitor":
            f.writelines("\nMatches Progenitor: this Chapter maintains beliefs and a culture closely related to the ")
            if ProgenitorChapter == "Ultramarines":
                f.writelines("Ultramarines")
            elif ProgenitorChapter == "Dark Angels":
                f.writelines("Dark Angels")
            elif ProgenitorChapter == "Blood Angels":
                f.writelines("Blood Angels")
            elif ProgenitorChapter == "Imperial Fists":
                f.writelines("Imperial Fists")
            elif ProgenitorChapter == "White Scars":
                f.writelines("White Scars")
            elif ProgenitorChapter == "Raven Guard":
                f.writelines("Raven Guard")
            elif ProgenitorChapter == "Iron Hands":
                f.writelines("Iron Hands")
            elif ProgenitorChapter == "Space Wolves":
                f.writelines("Space Wolves")
            elif ProgenitorChapter == "Salamanders":
                f.writelines("Salamanders")
            f.writelines(", even in the event that there has been a doctrinal or organisational divergence from their progenitor.")
        elif NumChapterBeliefs <= 80:
            f.writelines("\nPrimarch Worship: this Chapter reveres its Primarch as the ultimate example of everything all Astartes should be... perhaps even what all humans ought to be.")
        elif NumChapterBeliefs <= 100:
            f.writelines("\nEmperor Worship: this Chapter reveres the Emperor as the ultimate example of everything an Astartes should strive to be, and everything humanity could be. They may even have adopted the Ecclesiarchy's belief in the Emperor's divinity, which might ingratiate the Chapter with the priesthood.\nHowever, should the worship be of a nature deemed heretical by the Ecclesiarchy, it may actually harm relations instead.")
        elif NumChapterBeliefs <= 115:
            f.writelines("\nAncestor Worship: this Chapter reveres its own ancestors. Having made the ultimate sacrifice, their actions represent a measuring stick by which the Chapter's contemporary marines judge the worth of their own actions.")
        elif NumChapterBeliefs <= 130:
            f.writelines("\nDeath Cult: this Chapter views death in service to the Emperor as the ultimate duty of any Astartes. Mortality, therefore, occupies a central position in their culture.")
        elif NumChapterBeliefs <= 135:
            f.writelines("\nIconography: this Chapter has a certain symbol that holds special meaning to them. Consequently, it can be found throughout their culture, always held in reverence. Insulting it or even expressing ignorance of it may be met with anger.")
        elif NumChapterBeliefs <= 140:
            f.writelines("\nPurity: this Chapter believes that the human form is sacred in some way, and therefore must be preserved at all costs. They may even view themselves as the ultimate expression of human excellence and potential.")
        elif NumChapterBeliefs <= 145:
            f.writelines("\nTranshumanism: this Chapter views humanity as inferior to themselves, and Astartes as entirely separate. This may take on a patronising view, whereby humanity must be protected by their betters, or a dismissive view, whereby humanity is disregarded as unimportant to the Chapter.")
        elif NumChapterBeliefs <= 150:
            f.writelines("\nEsoteric: this Chapter's culture is strange, perhaps even unpalatable, to the wider Imperium. While important to themselves, their allies may not fully understand the Chapter's beliefs. Some may even respond with hostility should they become privy to it.")
        elif NumChapterBeliefs <= 155:
            f.writelines("\nIconoclasm: this Chapter holds a peculiar view of iconography, namely that such things are frivolous and should be scorned if not serving some immediately practical function. Needless to say, this belief may not be particularly well-received by the wider Imperium.")
        elif NumChapterBeliefs <= 160:
            f.writelines("\nNative Faith: this Chapter maintains the faith of its homeworld. While it has likely been sanctioned by the Ecclesiarchy, it may nonetheless tread a fine line.")
        elif NumChapterBeliefs <= 165:
            f.writelines("\nNative Philosophy: this Chapter maintains the secular beliefs of its homeworld. While such things are not necessarily subject to scrutiny from the Ecclesiarchy, it may nonetheless tread a fine line.")
        elif NumChapterBeliefs <= 170:
            f.writelines("\nLife Cult: this Chapter views death in service to the Emperor as inevitable, but simultaneously holds that any death in vain is a grave affront to His Imperium and His great endeavor to safeguard humanity. Human life is precious; Astartes lives moreso, having been forged by the Emperor himself.")
        elif NumChapterBeliefs <= 175:
            f.writelines("\nMachine Worship: this Chapter reveres machines. This may take the form of officially adopting the Cult Mechanicus, some unique worship of their own design, or something else entirely. Although this may ingratiate the Chapter with the Adeptus Mechanicus, it may also alienate parts of the wider Imperium.\nMoreover, should the machine worship be of a nature incompatible with Mechanicus views, it may actually harm relations rather than improve them.")
        elif NumChapterBeliefs <= 180:
            f.writelines("\nMight Makes Right: this Chapter reveres power, maybe even at the expense of all else. Care should be taken, for although certainly lending themselves well to warriors, such views may ultimately lead down a dark path.")
        elif NumChapterBeliefs <= 185:
            f.writelines("\nSacred Liberty: this Chapter reveres freedom as an ultimate ideal, maybe even at the expense of all else. Care should be taken, for although certainly lending themselves well to liberators, such views may ultimately lead down a rebellious path.")
        elif NumChapterBeliefs <= 190:
            f.writelines("Cult of Personality: this Chapter reveres one of its leading figures. This may be limited to high esteem for his deeds or the contents of his character, but it may also develop into something that might not be accepted by the wider Imperium.")
            
        f.writelines("\n")

## The following code defines the Chapter's Strength

        f.writelines("\n    Chapter Strength")
        NumChapterStrength = random.randint (1,13)
        print("Chapter Strength Roll:")
        print(NumChapterStrength)
        if NumChapterStrength <= 1:
            f.writelines("\nEndangered: this Chapter numbers ~")
            NumChapterEndangered = str(random.randint (50,500))
            print("Chapter Endangered Roll:")
            print(NumChapterEndangered)
            f.writelines(NumChapterEndangered)
            f.write(" Astartes. This may be a temporary state of affairs due to recent heavy losses, a permanent side effect of relentless fighting, or something else entirely.")
        elif NumChapterStrength <= 2:
            f.writelines("\nSignificantly Under Strength: this Chapter numbers ~")
            NumChapterUnderStrength = str(random.randint (500,700))
            print("Chapter Significantly Under Strength Roll:")
            print(NumChapterUnderStrength)
            f.write(NumChapterUnderStrength)
            f.writelines(" Astartes. This may be a temporary state of affairs due to recent heavy losses, a permanent side effect of relentless fighting, or something else entirely.")
        elif NumChapterStrength <= 3:
            f.writelines("\nUnder Strength: this Chapter numbers ~")
            NumChapterUnderStrength = str(random.randint (700,900))
            print("Chapter Under Strength Roll:")
            print(NumChapterUnderStrength)
            f.write(NumChapterUnderStrength)
            f.writelines(" Astartes. This may be a temporary state of affairs due to recent heavy losses, a permanent side effect of relentless fighting, or something else entirely.")
        elif NumChapterStrength <= 10:
            f.writelines("\nNormal: this Chapter numbers ~1000 Astartes. This number is likely to occasionally fall, but their current numbers are largely stable.")
        elif NumChapterStrength <= 12:
            f.writelines("\nOver Strength: this Chapter numbers ~")
            NumChapterOverStrength = str(random.randint (1100,1500))
            print("Chapter Over Strength Roll:")
            print(NumChapterOverStrength)
            f.write(NumChapterOverStrength)
            f.writelines(" Astartes. This may be due to a loophole they found in the Codex Astartes, simple disregard for the part of the Codex that mandates Chapter numbers, or something else entirely.")
        elif NumChapterStrength <= 13:
            f.writelines("\nUnknown: somehow, records detailing the number of Astartes in this Chapter have been lost. Or, perhaps, deliberately hidden. They may simply be so thinly spread across the galaxy that an accurate account is borderline impossible, or some other cause entirely is to blame.")
        f.writelines("\nThe Codex Astartes prescribes a standing force of 1000 marines spread across 10 Companies of 100 marines.")
        f.writelines("\nThat number specifically refers to fighting men and does not include command or support staff.")
        f.writelines("\nMortal human serfs are also not included.")
            
        f.writelines("\n")
        
## The following code defines the size of the Chapter's vehicle pool

        f.writelines("\n    Vehicle Pool")
        NumVehicleStrength = random.randint(1,13)
        print("Vehicle Strength Roll:")
        print(NumVehicleStrength)
        if NumVehicleStrength <= 1:
            f.writelines("\nSeverely Under-Strength: this Chapter's vehicle pool is in an extremely depleted state. The Chapter likely struggled to field any meaningful number of even basic Astartes vehicles, let alone rare ones.")
        elif NumVehicleStrength <= 2:
            f.writelines("\nSignificantly Under-strength: this Chapter's vehicle pool is so small that its worth as a force multiplier has been noticeably impacted. The Chapter is likely unable to field some of the rarer vehicles otherwise available to the Adeptus Astartes.")
        elif NumVehicleStrength <= 3:
            f.writelines("\nUnder-strength: this Chapter's vehicle pool is smaller than average, although it still represents a significant force multiplier. The Chapter most likely has a shortage of rare vehicles in particular.")
        elif NumVehicleStrength <= 10:
            f.writelines("\nNormal: this Chapter's vehicle pool is of average size and makeup, as one might expect from a baseline Chapter. It can most likely field a few rare vehicles as well.")
        elif NumVehicleStrength <= 12:
            f.writelines("\nOver-Strength: this Chapter's vehicle pool is larger than average, providing a powerful advantage. The Chapter most likely also has greater access to rare vehicles.")
        elif NumVehicleStrength <= 13:
            f.writelines("\nUnknown: somehow, records detailing the vehicle inventory of this Chapter have been lost. Or, perhaps, deliberately hidden. They may simply be so thinly spread across the galaxy that an accurate account is borderline impossible, or some other cause entirely is to blame.") 
        f.writelines("\nNote that the Codex Astartes places no limitations on a Chapter's vehicle pool. Instead, there are practical limits to consider; mainly matters of logistics, attrition, production and crewing.")

        f.writelines("\n")        

## The following code defines the Chapter's available terminator armor

        f.writelines("\n    Terminator Armor Availability")
        NumTerminatorAvailability = random.randint(1,13)
        print("Terminator Armor Availability Roll:")
        print(NumTerminatorAvailability)
        if NumTerminatorAvailability <= 1:
            f.writelines("\nFar Below Average: this Chapter's supply of terminator armor is so low that it might not be able to field any at all. It certainly has no access to rarer suits.")
        elif NumTerminatorAvailability <= 2:
            f.writelines("\nSignificantly Below Average: this Chapter's supply of terminator armor is much smaller than what one might expect. The Chapter is unlikely to have any access to rarer suits.")
        elif NumTerminatorAvailability <= 3:
            f.writelines("\nBelow Average: this Chapter's supply of terminator armor is subpar, but still enough to provide a serious advantage. The Chapter likely has a shortage of rarer suits in particular.")
        elif NumTerminatorAvailability <= 10:
            f.writelines("\nAverage: this Chapter's supply of terminator armor is on par with expectations. The Chapter likely even has access to a number of rarer suits as well.")
        elif NumTerminatorAvailability <= 12:
            f.writelines("\nAbove Average: this Chapter's supply of terminator armor is beyond what one might expect, representing a potent advantage. The Chapter likely also has greater access to rarer suits.")
        elif NumTerminatorAvailability <= 13:
            f.writelines("\nUnknown: somehow, records detailing the availability of terminator armor in this Chapter have been lost. Or, perhaps, deliberately hidden. They may simply be so thinly spread across the galaxy that an accurate account is borderline impossible, or some other cause entirely is to blame.")
        f.writelines("\nNote that the Codex Astartes places no limitations on a Chapter's inventory of power armor, let alone terminator armor. However, these suits are prohibitably expensive and difficult to create and maintain.")
        f.writelines("\nSome Chapters, however, are more likely to have a greater number of suits available than others. As an example, this is particularly true for Dark Angels successors who maintain the tradition of the Deathwing formation.")

        f.writelines("\n")
        
## The following code defines the condition of the Chapter's armory

        f.writelines("\n    Armory Condition")
        NumArmoryCondition = random.randint (1,13)
        print("Armory Condition Roll:")
        print(NumArmoryCondition)
        if NumArmoryCondition <= 1:
            f.writelines("\nDreadful: this Chapter's armory is in a sorry state, and it will need to equip the majority of Astartes with inferior gear. If the Chapter has any rare equipment at all, it will probably be closely guarded and seldom issued.")
        elif NumArmoryCondition <= 2:
            f.writelines("\nPoor: this Chapter's armory is well below expectations, and it will need to equip many Astartes with inferior gear. The Chapter is unlikely to have much in the way of rare equipment.")
        elif NumArmoryCondition <= 3:
            f.writelines("\nSubpar: this Chapter's armory is somewhat lower than ordinary expectations, and it may need to equip some Astartes with inferior gear. The Chapter likely has a shortage of rare equipment in particular.")
        elif NumArmoryCondition <= 10:
            f.writelines("\nAverage: this Chapter's armory is on par with expectations, and it can fully equip every Astartes with adequate gear. The Chapter likely has access to some rare equipment in addition to its standard inventory.")
        elif NumArmoryCondition <= 12:
            f.writelines("\nExceptional: this Chapter's armory is unusually well-stocked, and it can fully equip every Astartes with adequate gear, and even a considerable number with superior gear. The Chapter likely has greater access to rare equipment in addition to its standard inventory.")
        elif NumArmoryCondition <= 13:
            f.writelines("\nUnknown: somehow, records detailing the condition of the Chapter's armory have been lost. Or, perhaps, deliberately hidden. They may simply be so thinly spread across the galaxy that an accurate account is borderline impossible, or some other cause entirely is to blame.")
        f.writelines("\nNote that the Codex Astartes places no limitations on a Chapter's armory. Instead, there are practical limits to consider; mainly matters of logistics, attrition and production.")
        f.writelines("\nSome Chapters, however, are more likely to have a greater amount of rare or superior equipment. As an example, this is particularly true for Salamanders successors who maintain their progenitor's strong emphasis on craftsmanship.")
        
        f.writelines("\n")
        
## The following code defines psyker prevalence within the Chapter
        
        f.writelines("\n    Psyker Prevalence")
        NumPsykerPrevalence = random.randint (1,13)
        print("Psyker Prevalence Roll:")
        print(NumPsykerPrevalence)
        if NumPsykerPrevalence <= 1 and "Psychic Discipline" not in (ChapterQuirk, ChapterQuirk1, ChapterQuirk2, ChapterQuirk3) and CombatDoctrine != "Martial Psykers":
            f.writelines("\nNone: this Chapter has no psykers at all. Whether due to some mutation in their gene-seed or the population from which they recruit, or just simple scorn, they eschew an otherwise powerful asset.")
        elif NumPsykerPrevalence <= 2:
            f.writelines("\nVery Few: this Chapter has much fewer psykers in its ranks than most of its peers. Regardless of this heavily diminished number and how these psykers employ their abilities, they represent a powerful asset.")
        elif NumPsykerPrevalence <= 3:
            f.writelines("\nFew: this Chapter has fewer psykers in its ranks than most of its peers. Regardless of this diminished number and how these psykers employ their abilities, they represent a powerful asset.")
        elif NumPsykerPrevalence <= 10:
            f.writelines("\nAverage: this Chapter has an average number of psykers in its ranks. Regardless of how these psykers employ their abilities, they represent a powerful asset.")
        elif NumPsykerPrevalence <= 12:
            f.writelines("\nMany: this Chapter has more psykers in its ranks than most of its peers. Regardless of how these psykers employ their abilities, they represent a powerful asset, particularly in such numbers.")
        elif NumPsykerPrevalence <= 13:
            f.writelines("\nUnknown: somehow, records detailing the number of the Chapter's psykers have been lost. Or, perhaps, deliberately hidden. They may simply be so thinly spread across the galaxy that an accurate account is borderline impossible, or some other cause entirely is to blame.")
        
        f.writelines("\n")

## The following code defines the Chapter's Allies

        f.writelines("\n    Chapter Allies")
        NumChapterAllies = random.randint (1,100)
        print("Chapter Allies Roll:")
        print(NumChapterAllies)
        if NumChapterAllies <= 1:
            NumChapterAlliedEnemies = random.randint (1,100)
            print("Chapter Allied Enemies Roll:")
            print(NumChapterAlliedEnemies)
            if NumChapterAlliedEnemies <= 21:
                f.writelines("\nOrks: this Chapter has made the questionable decision to weaponise the greenskins. This is most likely done by somehow exploiting the nature and mentality of the orks to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient.\nHowever, there is a chance that they have made the EXTREMELY questionable decision to outright ally with the orks.\nThis is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")
            elif NumChapterAlliedEnemies <= 30:
                f.writelines("\nTau Empire: this Chapter has made the questionable decision to weaponise the tau. This is most likely done by somehow exploiting the nature and mentality of the tau to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient.\nHowever, there is a chance that they have made the very questionable decision to outright ally with the tau.\nThis is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")
            elif NumChapterAlliedEnemies <= 31:
                f.writelines("\nYnnari: this Chapter has formed a tentative alliance with the followers of Ynnead. Despite their recent endeavors to resurrect Roboute Guilliman, at best, the wider Imperium views all eldar with suspicion.")
            elif NumChapterAlliedEnemies <= 42:
                f.writelines("\nAsuryani: this Chapter has made the questionable very decision to form a very tentative alliance with the eldar of a particular Craftworld. Despite the recent endeavors of the Ynnari to resurrect Roboute Guilliman, far from all eldar support them, and, at best, the wider Imperium views all eldar with suspicion.")
            elif NumChapterAlliedEnemies <= 51:
                f.writelines("\nTyranids: this Chapter has made the extremely questionable decision to weaponise the invading Hive Fleets. This is most likely done by somehow exploiting the nature and mentality of the tyranids to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. They must also, rather likely, be quite mad.")
            elif NumChapterAlliedEnemies <= 60:
                f.writelines("\nRenegade Space Marines: this Chapter has made the rather questionable decision to form a tentative alliance with a group of renegade Astartes. Although renegade doesn't automatically mean traitor or Chaos, the wider Imperium is unlikely to be very understanding of the situation. This is likely a closely guarded secret.")
            elif NumChapterAlliedEnemies <= 70:
                f.writelines("\nChaos Space Marines: this Chapter has made the extremely questionable decision to form a very tentative alliance with a group of traitor Astartes. This is effectively treason, so unless the Chapter is in a hurry to be declared traitors themselves, this will likely be a very, very closely guarded secret.")
            elif NumChapterAlliedEnemies <= 75:
                f.writelines("\nDaemons: this Chapter has made the extremely questionable decision to weaponise the minions of the Archenemy. This is most likely done by forcing daemons to serve them by a variety of means, such as binding them to a host or object. However, there is the slim possibility that they have made the arguably outright stupid decision to ally themselves with one or more daemons.\nThis is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")
            elif NumChapterAlliedEnemies <= 80:
                f.writelines("\nNon-Imperial Humans: this Chapter has made the rather questionable decision to form a tentative alliance with a group of non-Imperial humans. While technically this is not necessarily treason outright, the wider Imperium is highly unlikely to be understanding of the situation.")            
            elif NumChapterAlliedEnemies <= 90:
                f.writelines("\nDrukhari: this Chapter has made the very, very questionable decision to weaponise the Dark Eldar. This is most likely done by somehow exploiting the nature and mentality of the Drukhari to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient.\nHowever, there is a chance that they have made the very, very questionable decision to outright ally with the Dark Eldar.\nThis is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")            
            elif NumChapterAlliedEnemies <= 99:
                f.writelines("\nNecrons: this Chapter has made the extraordinarily questionable decision to weaponise the Necron Dynasties. This is most likely done by somehow exploiting the nature and mentality of the necrons to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient.\nHowever, there is a chance that they have made the extraordinarily questionable decision to outright ally with the necrons.\nThis is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")            
            elif NumChapterAlliedEnemies <= 100:
                NumChapterOtherAlliedEnemies = random.randint (1,100)
                print("Chapter Other Enemies Roll:")
                print(NumChapterOtherAlliedEnemies)
                if NumChapterOtherAlliedEnemies <= 15:
                    f.writelines("\nUmbra: this Chapter has made the extremely questionable decision to weaponise the umbra. This is most likely done by somehow exploiting the nature and mentality of the umbra to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. They must also, rather likely, be quite mad. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 25:
                    f.writelines("\nHrud: this Chapter has made the exceptionally questionable decision to weaponise the hrud. This is most likely done by somehow exploiting the nature and mentality of the hrud to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 35:
                    f.writelines("\nFra'al: this Chapter has made the highly questionable decision to form a very tentative alliance with the fra'al. This is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")
                elif NumChapterOtherAlliedEnemies <= 45:
                    f.writelines("\nKhrave: this Chapter has made the extremely questionable decision to weaponise the khrave. This is most likely done by somehow exploiting the nature and mentality of the khrave to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. They must also, rather likely, be quite mad. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 55:
                    f.writelines("\nRak'gol: this Chapter has made the extremely questionable decision to weaponise the rak'gol. This is most likely done by somehow exploiting the nature and mentality of the rak'gol to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 65:
                    f.writelines("\nEnslavers: this Chapter has made the insane decision to weaponise enslavers. This is most likely done by somehow exploiting the nature of the enslavers to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. They must also be quite mad. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 70:
                    f.writelines("\nQ'Orl: this Chapter has made the highly questionable decision to form a very tentative alliance with the Q'Orl Swarmhood. This is effectively treason, so unless the Chapter is in a hurry to be declared traitors, this will likely be a very, very closely guarded secret.")
                elif NumChapterOtherAlliedEnemies <= 75:
                    f.writelines("\nSlaugth: this Chapter has made the monumentally questionable decision to bargain with the dream eaters. In a worst case scenario, their dealings are with the Amaranthine Syndicate.")
                elif NumChapterOtherAlliedEnemies <= 80:
                    f.writelines("\nHellgrammite: this Chapter has made the extremely questionable decision to weaponise the hellgrammites. This is most likely done by somehow exploiting the nature and mentality of the hellgrammites to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")
                elif NumChapterOtherAlliedEnemies <= 85:
                    f.writelines("\nLoxatl: this Chapter has made the questionable decision to weaponise the loxatl. They might somehow have secured a mercenary contract, but this is most likely done by somehow exploiting the nature and mentality of the loxatl to manipulate them into doing things that benefit the Chapter or the wider Imperium in some way, at which these Astartes must then be quite proficient. Alternatively, they may also have a number of specimens in captivity that can be used against their enemies.")            
                elif NumChapterOtherAlliedEnemies <= 90:
                    f.writelines("\nAbominable Intelligences: this Chapter has made the extremely questionable decision to weaponise artificial intelligences. Regardless of how precisely this is achieved, the wider Imperium, and the Mechanicus in particular, are unlikely to be very understanding of this choice. This is likely a very, very closely guarded secret.")
                elif NumChapterOtherAlliedEnemies <= 92:
                    f.writelines("\nCreate your own lesser xenos faction.")
                elif NumChapterOtherAlliedEnemies <= 100:
                    f.writelines("\nPick literally anyone.")
        elif NumChapterAllies <= 5:
            f.writelines("\nAdministratum: this Chapter has ingratiated itself with some in the bureaucratic apparatus of the Imperium. This may, for example, allow them to get certain things done in a more expedient fashion when dealing with other bodies of the Imperium.")
        elif NumChapterAllies <= 10:
            f.writelines("\nAdeptus Arbites: this Chapter has made friends among the enforcers of Imperial law. This may, for example, allow them to expedite recruitment from criminal elements, or make them more capable of rooting out heretics and other undesirables.")
        elif NumChapterAllies <= 20:
            f.writelines("\nLeagues of Votann: this Chapter has allied itself with a squat Stronghold, or even an entire League. This may, for example, allow them access to advanced technology, improve the quality of their techmarines, or even allow them to call upon reinforcements.")
        elif NumChapterAllies <= 30:
            f.writelines("\nAnother Chapter: this Chapter has a strong bond with another Chapter of the Adeptus Astartes. This may, for example, allow them to call upon reinforcements, or draw from their allies' specialist expertise, which they might otherwise lack.")
        elif NumChapterAllies <= 35:
            f.writelines("\nAdeptus Astra Telepathica: this Chapter has connections among the sanctioned psykers of the Imperium. This may, for example, allow them to enhance their astropath communicatons, or even perhaps recruit psykers from the League of Blackships.")
        elif NumChapterAllies <= 45:
            f.writelines("\nAdeptus Mechanicus: this Chapter has allied itself with either a forge world, or Mars itself. This may, for example, allow them access to advanced technology, improve the quality of their techmarines, or even allow them to call upon reinforcements.")
        elif NumChapterAllies <= 50:
            f.writelines("\nAdepta Sororitas: this Chapter has garnered a significant reputation amongst an Order of the fearsome Sisters of Battle. This may, for example, allow them to call upon reinforcements, or make them more capable of rooting out heretics.")
        elif NumChapterAllies <= 53:
            f.writelines("\nCollegia Titanica: this Chapter has gained the fierce friendship of a titan legion. This may, for example, allow them to call upon the god-machines themselves as reinforcements, or give them significant leverage in Mechanicus politics.")
        elif NumChapterAllies <= 55:
            f.writelines("\nQuestor Imperialis: this Chapter has earned the proud loyalty of a knight, or an entire Household. This may, for example, allow them to call upon reinforcements, or allow them to recruit from a Knight World's populaton.")
        elif NumChapterAllies <= 58:
            f.writelines("\nLogis Strategos: this Chapter has ingratiated itself with some in the Imperial intelligence agency. This may, for example, give them access to significantly superior information of strategic value.")
        elif NumChapterAllies <= 60:
            f.writelines("\nChartist Captains: this Chapter has obtained influence amongst the civilian merchant fleet of the Imperium. This may, for example, allow them to draw upon the inflexible, but considerable, logistical network the captains maintain.")
        elif NumChapterAllies <= 65:
            f.writelines("\nAdeptus Ministorum: this Chapter has earned the zealous favor of some in the Ecclesiarchy. This may, for example, allow them access to a considerable recruitment pool of faithful people who view them as the Emperor's own angels.")
        elif NumChapterAllies <= 75:
            f.writelines("\nAstra Militarum: this Chapter has allied itself with a Regiment of the Imperial Guard. This may, for example, allow them to call upon the ponderous but awesome force of the Imperial war machine.")
        elif NumChapterAllies <= 79:
            f.writelines("\nNavis Imperialis: this Chapter has gained a measure of influence with a battlegroup of the Imperial Navy. This may, for example, allow them to call upon the frightful firepower available to the great ships of the Imperium.")
        elif NumChapterAllies <= 85:
            f.writelines("\nInquisition: this Chapter has the questionable honor of being on an Inquisitor's good side. For however long that lasts, they may, for example, have considerable leverage in most Imperial affairs... at a cost.")
        elif NumChapterAllies <= 88:
            f.writelines("\nNavis Nobilite: this Chapter has somehow pierced the unfathomable politics of the Navigators and gained the favor of one of their Houses. This may, for example, give them considerable benefits when traveling the void.")
        elif NumChapterAllies <= 91:
            f.writelines("\nOfficio Assassinorum: this Chapter has ingratiated itself with some in the Assassin Temples. This may, for example, give them access to a covert and extraordinarily efficient means of resolving conflicts before they even truly begin.")
        elif NumChapterAllies <= 93:
            f.writelines("\nPlanetary Defence Force: this Chapter has obtained the loyalty of a local PDF. This may, for example, give them access to very earnest reinforcements of dubious worth in battle.")
        elif NumChapterAllies <= 98:
            f.writelines("\nRogue Traders: this Chapter has connections among some of the Imperium's very own frontier explorers. This may, for example, give them access to all sorts of exotic inventories of questionable origins.")
        elif NumChapterAllies == 99:
            f.writelines("\nSchola Progenium: this Chapter has made friends among some in the orphanages of the Ministorum. This may, for example, give them access to a small but extremely determined recruitment pool.")
        elif NumChapterAllies == 100:
            f.writelines("\nAdeptus Custodes: this Chapter has somehow gained a small measure of influence with some of the Emperor's own guards. This may, for example, give them considerable leverage in most Imperial affairs.")
            
        f.writelines("\n")

## The following code defines the Chapter's Enemies

        f.writelines("\n    Chapter Enemies")
        NumChapterEnemies = random.randint (1,100)
        print("Chapter Enemies Roll:")
        print(NumChapterEnemies)
        if NumChapterEnemies <= 2:
            NumChapterEnemyAllies = random.randint (1,100)
            print("Chapter Enemy Allies Roll:")
            print(NumChapterEnemyAllies)
            if NumChapterEnemyAllies <= 5:
                f.writelines("\nAdministratum: this Chapter has earned the ire of some in the bureaucratic apparatus of the Imperium. This may, for example, prevent them from getting certain things done in a more expedient fashion when dealing with other bodies of the Imperium. It may also be worse.")
            elif NumChapterEnemyAllies <= 10:
                f.writelines("\nAdeptus Arbites: this Chapter has made enemies among the enforcers of Imperial law. This may, for example, hinder recruitment from criminal elements, or make them less capable of rooting out heretics and other undesirables. It may also be worse.")
            elif NumChapterEnemyAllies <= 20:
                f.writelines("\nLeagues of Votann: this Chapter has become the subject of one or more grudges in a squat Stronghold, or even an entire League. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 30:
                f.writelines("\nAnother Chapter: this Chapter has a hostile relationship another Chapter of the Adeptus Astartes. This may, for example, result in open conflict, or disrupt their activities during joint missions. It may also be worse.")
            elif NumChapterEnemyAllies <= 35:
                f.writelines("\nAdeptus Astra Telepathica: this Chapter has enemies among the sanctioned psykers of the Imperium. This may, for example, recude the quality of their astropath communicatons, or prevent them from recruiting psykers from the League of Blackships. It may also be worse.")
            elif NumChapterEnemyAllies <= 45:
                f.writelines("\nAdeptus Mechanicus: this Chapter has angered either a forge world, or Mars itself. This may, for example, prevent access to advanced technology, or outright reduce the quality of their techmarines. It may also be worse.")
            elif NumChapterEnemyAllies <= 50:
                f.writelines("\nAdepta Sororitas: this Chapter has a negative reputation amongst an Order of the fearsome Sisters of Battle. This may, for example, result in open conflict, or make them less capable of rooting out heretics. It may also be worse.")
            elif NumChapterEnemyAllies <= 53:
                f.writelines("\nCollegia Titanica: this Chapter has earned the fierce anger of a titan legion. This may, for example, result in open conflict, or significantly reduce their leverage in Mechanicus politics. It may also be worse.")
            elif NumChapterEnemyAllies <= 55:
                f.writelines("\nQuestor Imperialis: this Chapter has earned the proud contempt of a knight, or an entire Household. This may, for example, result in open conflict, or bar them from recruiting from a Knight World's populaton. It may also be worse.")
            elif NumChapterEnemyAllies <= 58:
                f.writelines("\nLogis Strategos: this Chapter has somehow antagonized some in the Imperial intelligence agency. This may, for example, result in significantly inferior information of strategic value. It may also be worse.")
            elif NumChapterEnemyAllies <= 60:
                f.writelines("\nChartist Captains: this Chapter has angered many amongst the civilian merchant fleet of the Imperium. This may, for example, prevent them from drawing upon the inflexible, but considerable, logistical network the captains maintain. It may also be worse.")
            elif NumChapterEnemyAllies <= 65:
                f.writelines("\nAdeptus Ministorum: this Chapter has earned the zealous ire of some in the Ecclesiarchy. This may, for example, bar them from a considerable recruitment pool of faithful, or even result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 75:
                f.writelines("\nAstra Militarum: this Chapter has made enemies with a Regiment of the Imperial Guard. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 79:
                f.writelines("\nNavis Imperialis: this Chapter has gained the displeasure of a battlegroup of the Imperial Navy. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 85:
                f.writelines("\nInquisition: this Chapter has the questionable honor of being on an Inquisitor's bad side. For however long that lasts, they may, for example, suffer a series of unfortunate events. It may also be worse.")
            elif NumChapterEnemyAllies <= 88:
                f.writelines("\nNavis Nobilite: this Chapter has somehow pierced the unfathomable politics of the Navigators in such a way that it angered one of their Houses. This may, for example, give them considerable drawbacks when traveling the void. It may also be worse.")
            elif NumChapterEnemyAllies <= 91:
                f.writelines("\nOfficio Assassinorum: this Chapter has angered some in the Assassin Temples. This may, for example, result in open conflict, or, if they're very unlucky, hidden conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 93:
                f.writelines("\nPlanetary Defence Force: this Chapter has earned the ire of a local PDF. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies <= 98:
                f.writelines("\nRogue Traders: this Chapter has enemies among some of the Imperium's very own frontier explorers. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterEnemyAllies == 99:
                f.writelines("\nSchola Progenium: this Chapter has made enemies among the orphanages of the Ministorum. This may, for example, bar them access from a small but extremely determined recruitment pool. It may also be worse.")
            elif NumChapterEnemyAllies == 100:
                f.writelines("\nAdeptus Custodes: this Chapter has somehow gained a small measure of indignation from some of the Emperor's own guards. This may, for example, give them considerable drawbacks in most Imperial affairs, or result in open conflict. It may also be worse.")
        elif NumChapterEnemies <= 21:
            f.writelines("\nOrks: this Chapter has become proficient fighting greenskins. Where some disregard them as disorganised rabble, these Astartes recognise them for the true threat they are.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 30:
            f.writelines("\nTau Empire: this Chapter has become proficient fighting tau. Ignored by some in the Imperium as insignificant upstarts, these Astartes see the long-term potential of the tau, and the danger of it being realised.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 31:
            f.writelines("\nYnnari: this Chapter has become proficient fighting the followers of Ynnead. Despite their recent endeavors to resurrect Roboute Guilliman, these Astartes fully expect betrayal before long.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 42:
            f.writelines("\nAsuryani: this Chapter has become proficient fighting Craftworld Eldar. Thought by some to be the irrelevant remnants of a dying species, these Astartes know all too well the perfidy of these farsighted xenos.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 51:
            f.writelines("\nTyranids: this Chapter has become proficient fighting the invading Hive Fleets. There are voices in the Imperium who consider the threat to have been dealt with, but these Astartes know that so long as a single hive organism remains, the war is not over.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 60:
            f.writelines("\nGenestealer Cults: this Chapter has become proficient rooting out the insidious cults paving the path for their tyranid masters. While often overlooked by others, these Astartes view the premature end of the cults as the ultimate means of preventing tyranid attacks.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 70:
            f.writelines("\nChaos Space Marines: this Chapter has become proficient opposing the Long War. While the threat of the Traitor Legions waxes and wanes, these Astartes are ever vigilant in their persecution of traitor marines, whether the betrayal be ancient or recent.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 75:
            f.writelines("\nDaemons: this Chapter has become proficient combating the Archenemy. While tentatively attempted to be kept secret from the Imperium at large, these Astartes are fully aware of the danger presented by the empyreal minions Chaos.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 80:
            f.writelines("\nNon-Imperial Humans: this Chapter has become proficient crushing rebellions, reconquering secessionist territory and bringing forgotten pockets of humanity into the Imperial fold. While some may doubt the decision to send marines to accomplish such tasks, these Astartes are convinced that their presence during such endeavors is a necessity, being the Emperor's angels of death.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 90:
            f.writelines("\nDrukhari: this Chapter has become proficient fighting the Dark Eldar. While often forgotten due to their reclusive nature and penchant for obfuscaton, these Astartes are acutely aware of the toll these insidious xenos take on the Imperium.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 99:
            f.writelines("\nNecrons: this Chapter has become proficient fighting the Necron Dynasties. While sometimes forgotten, and even occasionally attempted controlled, these Astartes have come to understand the true scope of the empire buried beneath countless worlds, and the threat of it awakening and rising once more under their very feet.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies == 100:
            NumChapterOtherEnemies = random.randint (1,100)
            print("Chapter Other Enemies Roll:")
            print(NumChapterOtherEnemies)
            if NumChapterOtherEnemies <= 15:
                f.writelines("\nUmbra: this Chapter has become proficient fighting the mysterious Umbra. Rare enough that most give them little thought, these Astartes have seen what the eldritch fiends are capable of.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 25:
                f.writelines("\nHrud: this Chapter has become proficient fighting the repulsive Hrud. Although a lesser xenos species, what little presence they have on the galactic scale is recognised by these Astartes as potentially catastrophic if left unchecked.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 35:
                f.writelines("\nFra'al: this Chapter has become proficient fighting the monstrous Fra'al. While not a major faction in the galaxy, these Astartes view their nomadic empire as a menace to the Imperium that needs to be stopped before it evolved beyond a minor threat.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 45:
                f.writelines("\nKhrave: this Chapter has become proficient fighting the sinister Khrave. A long-standing, but relatively minor enemy of the Imperium, they are frequently overlooked in favor of more pressing matters. These Astartes, however, consider the mind-eaters and their expansionist empire to be one such pressing matter.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 55:
                f.writelines("\nRak'gol: this Chapter has become proficient fighting the abominable Rak'gol. Considered by some to be little more than a minor pirate problem, these Astartes believe that, if left unchecked, the Rak'gol and their ramshackle technology could become a problem similar to the Tau Empire.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 65:
                f.writelines("\nEnslavers: this Chapter has become proficient fighting the despicable enslavers. Known also as Krell, or Psyrens, there are some who view the endeavor of exterminating them as futile. These Astartes are of the contrary position, viewing them as a potentially apocalyptic threat to the Imperium, as well as the galaxy at large.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 70:
                f.writelines("\nQ'orl: this Chapter has become proficient fighting the Swarmhood. Often forgotten about, these Astartes consider their empire's size and proximity to Terra alone to mark them as a grave threat.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 75:
                f.writelines("\nSlaugth: this Chapter has become proficient fighting the vile dream eaters. Inhabiting forgotten and obscure places, many have never heard of the carrion masters, let alone seen them. These Astartes have, and they are determined to destroy the Slaugth wherever they surface.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 80:
                f.writelines("\nHellgrammite: this Chapter has become proficient fighting the remnants of the Hellgrammite Empire. While many consider them to have been crushed, these Astartes have yet to relent in the persecution of the vile xenos and their occult ways.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 85:
                f.writelines("\nLoxatl: this Chapter has become proficient fighting the amphibious mercenaries known as the Loxatl. Although their homeworld has yet to be found, these Astartes have encountered them on enough battlefields to understand the danger posed by their continued employment by the Imperium's enemies.")            
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 90:
                f.writelines("\nAbominable Intelligences: this Chapter has become proficient fighting the mechanical minds of rogue machine spirits, self-aware cogitators and other Abominable Intelligences. Forgotten by many outside the Mechanicus, these Astartes have learned to maintain a vigilant watch for any signs of renegade machines.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 92:
                f.writelines("\nCreate your own lesser xenos faction.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 100:
                f.writelines("\nPick literally anyone.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")

## The following code executes the Chapter creation script
        
ChapterCreationTable()