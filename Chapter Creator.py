##########################################################################################################################
##########################################################################################################################
## Hello,                                                                                                               ##
## I am the Scandinavian, the creator of this script.                                                                   ##
## Chances are you haven't heard of me until now.                                                                       ##
## The script the work of an amateur with a slightly-more-than-passing interest in the Warhammer 40,000 setting.        ##
##                                                                                                                      ##
## The creation table I worked off of was originally made by the anons on 4chan's /tg/.                                 ##
## If you're curious, it can be found on 1d4chan.org.                                                                   ##
## I have never personally visited /tg/, unless after the time of writing this I shared this script there.              ##
## If anyone from /tg/ reads this, thanks for the inspiraton guys.                                                      ##
## I manually rolled 52 Chapters on the table before I got the idea to automate the process.                            ##
##                                                                                                                      ##
## Most of the sources I've used for the roll results are from 1d4chan, Lexicanum, or the Warhammer 40k Wiki.           ##
## Perhaps unsurprisingly, cross-referencing was a mess. I can now sympathize with the Adeptus Administratum.           ##
##                                                                                                                      ##
## Prior to writing this, I had very little coding experience, and none at all in Python.                               ##
## With that in mind, please be aware that the script is not at all perfect, but it does work.                          ##
## It will allow you to automatically generate a Space Marine Chapter in the form of a text document.                   ##
## (Names are not generated, you'll have to do that part.)                                                              ##
##                                                                                                                      ##
## The script's only requirement is that Python is installed.                                                           ##
## Without Python installed, the script will not work.                                                                  ##
##                                                                                                                      ##
## The text file generated by the script will be put in the same folder as the script itself.                           ##
## It will be called "Your Chapter.txt" - I recommend that you store the script in its own folder.                      ##
##                                                                                                                      ##
## VERY IMPORTANT:                                                                                                      ##
##                                                                                                                      ##
## BE AWARE THAT RUNNING THE SCRIPT TWICE DOES NOT CREATE 2 TEXT FILES.                                                 ##
## THE 2ND TEXT FILE WILL OVERRIDE THE 1ST.                                                                             ##
## IF YOU WANT TO KEEP THE TEXT FILE, YOU SHOULD RENAME IT OR MOVE IT.                                                  ##
##                                                                                                                      ##
## The script is easily modifiable.                                                                                     ##
## Simply alter the generated text (the green codelines in the f.writelines("") sections).                              ##
## Be aware that \n is a function that writes text on a new line. Without it, the text output would all be on one line. ##
##                                                                                                                      ##
## The code should be fairly easy to read.                                                                              ##
## To a seasoned coder, I'm sure many parts of it appear crude or inefficient, but I tried to at least make it legible. ##
##                                                                                                                      ##
## Mandatory disclaimer:                                                                                                ##
## My work on this project is unpaid.                                                                                   ##
## If you paid for this script, you've been tricked.                                                                    ##
##                                                                                                                      ##
## In closing, I have no idea how many people will ever use my script, let alone take the time to read all this.        ##
## If you find this message, I appreciate you.                                                                          ##
## And, if you so desire, do share my script with your friends.                                                         ##
##########################################################################################################################
##########################################################################################################################

## The following code imports the random number generator function

import random

## The following code defines the variable object for the code defining the Chapter homeworld's modifier

HomeworldModifier = None

## The following code defines the variable object for the code defining the Chapter's Founding

Founding = None

## The following code defines the variable object for the code defining the Chapter's Progenitor

ProgenitorChapter = None

## The following code defines the variable object for the code defining the Chapter's lost Zygotes
        
MissingZygote = None
        
## The following code defines the variable object for the code defining the Chapter's Mutations
        
ExistingMutations = None
        
## The following code defines the variable object for the code defining the Chapter's special equipment is Organisation is divergent or unique
        
ExistingNonCodexElement = None

## The following code defines the Chapter creation script as a whole

def ChapterCreationTable():

## The following code is apparently necessary for these variables to be called properly later

    global HomeworldModifier
    global Founding
    global ProgenitorChapter
    global MissingZygote
    global ExistingMutations
    global ExistingNonCodexElement

## The following code defines the manner in which the Chapter's Homeworld is ruled

    def HomeworldRule():
        f.writelines("\n")
        f.writelines("\n    Rule of homeworld")
        NumHomeworldRule = random.randint (1,10)
        print("Homeworld Rule Roll:")
        print(NumHomeworldRule)
        if NumHomeworldRule == 1:
            f.writelines("\nDirect: this Chapter rules the world themselves, and are personally involved in local affairs.")
        elif NumHomeworldRule <= 4:
            f.writelines("\nStewardship: this Chapter rules the world via a proxy in the form of a local human governor or equivalent.")
        elif NumHomeworldRule <= 10:
            f.writelines("\nDistant: this Chapter rules the world in name only, and are marginally involved in local affairs at most.")

## The following code defines to what degree the Chapter is royally fucked

    def DOOMED():
        global ExistingMutations
        NumDoomed = random.randint(1,3)
        print("Doomed Roll:")
        print(NumDoomed)
        if NumDoomed <= 1 and ExistingMutations != "DOOMED":
            f.writelines("\nDOOMED: this Chapter can only produce a single Progenoid Gland: the one in the neck. It takes 5 years to mature; if an Astartes dies prior to then, the gene-seed is lost.")
            ExistingMutations = "DOOMED"
        elif NumDoomed <= 2 and ExistingMutations != "DOOMED":
            f.writelines("\nDOOMED: this Chapter can only produce a single Progenoid Gland: the one in the chest. It takes 10 years to mature; if an Astartes dies prior to then, the gene-seed is lost.")
            ExistingMutations = "DOOMED"
        elif NumDoomed == 3 and ExistingMutations != "DOOMED":
            f.writelines("\nDOOMED: this Chapter has lost the ability to create new Progenoid Glands. Unless this is somehow fixed, they are doomed to suffer a slow death by attrition.")
            ExistingMutations = "DOOMED"

## The following code defines the Chapter's special equipment if Organisation is Divergent or Unique

    def NonCodexElement():
        global ExistingNonCodexElement
        NumNonCodexElement = random.randint (1,151)
        print("Non-Codex Element Roll:")
        print(NumNonCodexElement)
        if NumNonCodexElement <= 10 and ExistingNonCodexElement != "Traditional Weapon":
            f.writelines("\nFavored Weapon: contrary to Codex standards, this Chapter has a strong preference for a particular type of weapon, whether due to culture, circumstance or some other factor.")
            ExistingNonCodexElement = "Traditional Weapon"
        elif NumNonCodexElement <= 20 and ExistingNonCodexElement != "Unique Markings":
            f.writelines("\nUnique Markings: contrary to Codex standards, this Chapter uses its own particular means of marking various units and identifying certain ranks.")
            ExistingNonCodexElement = "Unique Markings"
        elif NumNonCodexElement <= 30 and ExistingNonCodexElement != "Modified Packs":
            f.writelines("\nModified Jump Packs: contrary to Codex standards, this Chapter has made extensive modificatons to their jump packs, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Packs"
        elif NumNonCodexElement <= 40 and ExistingNonCodexElement != "Beast Companions":
            f.writelines("\nBestial Companion: contrary to Codex standards, this Chapter maintains a population of animals that are important to either their culture, battlefield tactis and strategies, or both.")
            ExistingNonCodexElement = "Beast Companions"
        elif NumNonCodexElement <= 50 and ExistingNonCodexElement != "Rare Weapons":
            f.writelines("\nRare Weaponry: contrary to Codex standards, this Chapter, for one reason or another, has access to, and fields, an abnormally large number of weapons otherwise considered rare, exotic, or both.")
            ExistingNonCodexElement = "Rare Weapons"
        elif NumNonCodexElement <= 60 and ExistingNonCodexElement != "Blessed Gear":
            f.writelines("\nBlessed Wargear: contrary to Codex standards, this Chapter requires its arms and armor to be individually consecrated by a Chaplain (or equivalent) before going to war.")
            ExistingNonCodexElement = "Blessed Gear"
        elif NumNonCodexElement <= 70 and ExistingNonCodexElement != "Special Mounts":
            f.writelines("\nSpecial Mounts: contrary to Codex standards, this Chapter makes use of either modified bikes, genetically engineered animals, or something else entirely to carry them into battle.")
            ExistingNonCodexElement = "Special Mounts"
        elif NumNonCodexElement <= 80 and ExistingNonCodexElement != "Modified Vehicles":
            f.writelines("\nModified Vehicles: contrary to Codex standards, this Chapter has made extensive modifications to their vehicles, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Vehicles"
        elif NumNonCodexElement <= 90 and ExistingNonCodexElement != "Special Style":
            f.writelines("\nPreferred Fighting Style: contrary to Codex standards, this Chapter has adopted methods of waging war, whether individually or as a unit, that are considered unusual or unorthodox by Astartes standards.")
            ExistingNonCodexElement = "Special Style"
        elif NumNonCodexElement <= 100 and ExistingNonCodexElement != "Modified Weapons":
            f.writelines("\nModified Weaponry: contrary to Codex standards, this Chapter has made extensive modificatons to their weaponry, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Weapons"
        elif NumNonCodexElement <= 110 and ExistingNonCodexElement != "Modified Armor":
            f.writelines("\nModified Armor: contrary to Codex standards, this Chapter has made extensive modificatons to their armor, either in form, function, or both.")
            ExistingNonCodexElement = "Modified Armor"
        elif NumNonCodexElement <= 120 and ExistingNonCodexElement != "Unique Rank Combo":
            f.writelines("\nUnique Rank Combinations: contrary to Codex standards, this Chapter has folded two (or, very rarely, more) ranks into one, such as combining the roles of Apothecary and Librarian, or Chaplain and Techmarine.")
            ExistingNonCodexElement = "Unique Rank Combo"
        elif NumNonCodexElement <= 130 and ExistingNonCodexElement != "AlteredTerminatorRules":
            f.writelines("\nAltered Teminator Rules: contrary to Codex standards, this Chapter does not reserve its terminator armor for 1st Company Veterans, instead issuing it by some other criteria.")
            ExistingNonCodexElement = "AlteredTerminatorRules"
        elif NumNonCodexElement <= 140 and ExistingNonCodexElement != "AlteredScoutOrg":
            f.writelines("\nAltered Recruit Organisaton: contrary to Codex standards, this Chapter does not organise its recruits as Scouts in the 10th Company. New recruits might not even begin as Scouts in the traditional sense, but fill some other role.")
            ExistingNonCodexElement = "AlteredScoutOrg"
        elif NumNonCodexElement <= 150 and ExistingNonCodexElement != "UnorthodoxMasterSelection":
            f.writelines("\nUnorthodox Chapter Master Selection: contrary to Codex standards, this Chapter does not select its Chapter Master from amongst its Captains, instead preferring some other selection criteria. For example, Chapter Masters may be drawn from the Chapter's Champions.")
            ExistingNonCodexElement = "UnorthodoxMasterSelection"
        elif NumNonCodexElement <= 151 and ExistingNonCodexElement != "Truly Unusual":
            f.writelines("\nChoose something truly unusual.")
            ExistingNonCodexElement = "Truly Unusual"

## The following code defines the Chapter's unit restrictions

    def UnitRestrictions():
        f.writelines("\n")
        f.writelines("\n    Unit Restrictions")
        NumUnitRestrictions = random.randint (1,100)
        print("Unit Restrictions Roll:")
        print(NumUnitRestrictions)
        if NumUnitRestrictions <= 15:
            f.writelines("\nThis Chapter fields no Apothecaries; someone else takes on the crucial responsibility of collecting progenoids from their fallen brothers.")
        elif NumUnitRestrictions <= 30:
            f.writelines("\nThis Chapter fields no Assault Squads; jump packs can still be issued, if the Chapter has access to them at all.")
        elif NumUnitRestrictions <= 45:
            f.writelines("\nThis Chapter fields no Devastator Squads; heavy weapons can still be issued, if the Chapter has access to them at all.")
        elif NumUnitRestrictions <= 60:
            f.writelines("\nThis Chapter fields no Techmarines; someone else takes on the vital task of repairing and maintenaning the Chapter's weapons and machines.")
        elif NumUnitRestrictions <= 75:
            f.writelines("\nThis Chapter fields no Librarians; someone else accepts the mission of keeping the Chapter's lore, recording its history and maintaining its library.")
        elif NumUnitRestrictions <= 90:
            f.writelines("\nThis Chapter fields no Chaplains; someone else shoulders the burden of looking after the Chapter's relics and their brothers' spiritual well-being.")
        elif NumUnitRestrictions <= 99:
            f.writelines("\nThis Chapter fields no Dreadnoughts; something else needs to be done with the severely wounded.")
        elif NumUnitRestrictions == 100:
            f.writelines("\nChoose something truly unusual.")

## The following code defines modifiers for the Chapter's Homeworld

    def HomeworldModifier():
        global HomeworldModifier
        NumHomeworldModifier = random.randint (1,100)
        print("Homeworld Modifier Roll:")
        print(NumHomeworldModifier)
        if NumHomeworldModifier <= 25:
            f.writelines("\nTemperate ")
            HomeworldModifier = "Temperate"
        elif NumHomeworldModifier <= 50:
            f.writelines("\nArid ")
            HomeworldModifier = "Arid"
        elif NumHomeworldModifier <= 60:
            f.writelines("\nFrozen ")
            HomeworldModifier = "Frozen"
        elif NumHomeworldModifier <= 65:
            f.writelines("\nOceanic ")
            HomeworldModifier = "Oceanic"
        elif NumHomeworldModifier <= 75:
            f.writelines("\nFeral ")
            HomeworldModifier = "Feral"
        elif NumHomeworldModifier <= 80:
            f.writelines("\nMountainous ")
            HomeworldModifier = "Mountainous"
        elif NumHomeworldModifier <= 85:
            f.writelines("\nPenal ")
            HomeworldModifier = "Penal"
        elif NumHomeworldModifier <= 90:
            f.writelines("\nSubterranean ")
            HomeworldModifier = "Subterranean"
        elif NumHomeworldModifier <= 99:
            f.writelines("\nForbidden ")
            HomeworldModifier = "Forbidden"
        elif NumHomeworldModifier == 100:
            f.writelines("\nSunless ")
            HomeworldModifier = "Sunless"
            
## The following code defines a function that writes out extra text for homeworlds depending on its modifier.

    def HomeworldModifierText():
        global HomeworldModifier
        if HomeworldModifier == "Temperate":
            f.writelines(" The world possesses a mild climate, agreeable to most humans.")
        if HomeworldModifier == "Arid":
            f.writelines(" The world possesses a very dry climate, and may feature extensive deserts.")
        if HomeworldModifier == "Frozen":
            f.writelines(" The world possesses an extremely cold climate, hazardous to most humans.")
        if HomeworldModifier == "Oceanic":
            f.writelines(" The world possesses vast oceans, covering 85% to 95% of the surface.")
        if HomeworldModifier == "Feral":
            f.writelines(" The world has regressed to a state of primitive tribalism, regardless of its previous technological level and remaining infrastructure.")
        if HomeworldModifier == "Mountainous":
            f.writelines(" The world possesses vast mountain ranges visible from space, covering at least 70% of the surface.")
        if HomeworldModifier == "Penal":
            f.writelines(" The world is almost entirely populated by criminals, sent here for isolation, labor or both.")
        if HomeworldModifier == "Subterranean":
            f.writelines(" The world's surface is not at all conducive to settlement or construction. Consequently, its populaton and infrastructure are almost entirely underground.")
        if HomeworldModifier == "Forbidden":
            f.writelines(" The world has been quarantined for one reason or another, and is now off-limits to all but the Chapter and the highest Imperial authorities.")
        if HomeworldModifier == "Sunless":
            f.writelines(" The world has no sun. Any civilisaton clinging to life in this desolate place does so tentatively at best.")
        

## The following code defines the Chapter's single lost Zygote
   
    def LostZygote():    
        global MissingZygote
        global ExistingMutations
        f.writelines("\nLost zygote:")
        NumOneLostZygote = random.randint(1,100)
        print("Lost Zygote Roll:")
        print(NumOneLostZygote)
        if NumOneLostZygote <= 8 and MissingZygote != "Catalepsean Node" and ExistingMutations != "Catalepsean Node":
            f.writelines(" Catalepsean Node")
            MissingZygote = "Catalepsean Node"
        elif NumOneLostZygote <= 17 and MissingZygote != "Preomnor" and ExistingMutations != "Preomnor":
            f.writelines(" Preomnor")
            MissingZygote = "Preomnor"
        elif NumOneLostZygote <= 26 and MissingZygote != "Omophagea" and ExistingMutations != "Omophagea":
            f.writelines(" Omophagea")
            MissingZygote = "Omophagea"
        elif NumOneLostZygote <= 35 and MissingZygote != "Occulobe" and ExistingMutations != "Occulobe":
            f.writelines(" Occulobe")
            MissingZygote = "Occulobe"
        elif NumOneLostZygote <= 44 and MissingZygote != "Lyman’s Ear" and ExistingMutations != "Lyman":
            f.writelines(" Lyman’s Ear")
            MissingZygote = "Lyman’s Ear"
        elif NumOneLostZygote <= 53 and MissingZygote != "Sus-an Membrane" and ExistingMutations != "Membrane":
            f.writelines(" Sus-an Membrane")
            MissingZygote = "Sus-an Membrane"
        elif NumOneLostZygote <= 62 and MissingZygote != "Oolitic Kidney" and ExistingMutations != "Oolitic":
            f.writelines(" Oolitic Kidney")
            MissingZygote = "Oolitic Kidney"
        elif NumOneLostZygote <= 71 and MissingZygote != "Neuroglottis" and ExistingMutations != "Neuroglottis":
            f.writelines(" Neuroglottis")
            MissingZygote = "Neuroglottis"
        elif NumOneLostZygote <= 80 and MissingZygote != "Mucranoid" and ExistingMutations != "Mucranoid":
            f.writelines(" Mucranoid")
            MissingZygote = "Mucranoid"
        elif NumOneLostZygote <= 89 and MissingZygote != "Betcher's Gland" and ExistingMutations != "Betcher":
            f.writelines(" Betcher's Gland")
            MissingZygote = "Betcher's Gland"
        elif NumOneLostZygote <= 98 and MissingZygote != "Melanchromic Organ" and ExistingMutations != "Melanochrome":
            f.writelines(" Melanchromic Organ")
            MissingZygote = "Melanchromic Organ"
        elif NumOneLostZygote <= 100:
                    
## The following code defines the Chapter's two lost Zygotes
            
            NumTwoLostZygotes1 = random.randint(1,98)
            print("Multiple Lost Zygotes Roll 1:")
            print(NumTwoLostZygotes1)
            if NumTwoLostZygotes1 <= 8 and MissingZygote != "Catalepsean Node" and ExistingMutations != "Catalepsean Node":
                f.writelines(" Catalepsean Node")
                MissingZygote = "Catalepsean Node"
            elif NumTwoLostZygotes1 <= 17 and MissingZygote != "Preomnor" and ExistingMutations != "Preomnor":
                f.writelines(" Preomnor")
                MissingZygote = "Preomnor"
            elif NumTwoLostZygotes1 <= 26 and MissingZygote != "Omophagea" and ExistingMutations != "Omophagea":
                f.writelines(" Omophagea")
                MissingZygote = "Omophagea"
            elif NumTwoLostZygotes1 <= 35 and MissingZygote != "Occulobe" and ExistingMutations != "Occulobe":
                f.writelines(" Occulobe")
                MissingZygote = "Occulobe"
            elif NumTwoLostZygotes1 <= 44 and MissingZygote != "Lyman’s Ear" and ExistingMutations != "Lyman":
                f.writelines(" Lyman’s Ear")
                MissingZygote = "Lyman’s Ear"
            elif NumTwoLostZygotes1 <= 53 and MissingZygote != "Sus-an Membrane" and ExistingMutations != "Membrane":
                f.writelines(" Sus-an Membrane")
                MissingZygote = "Sus-an Membrane"
            elif NumTwoLostZygotes1 <= 62 and MissingZygote != "Oolitic Kidney" and ExistingMutations != "Oolitic":
                f.writelines(" Oolitic Kidney")
                MissingZygote = "Oolitic Kidney"
            elif NumTwoLostZygotes1 <= 71 and MissingZygote != "Neuroglottis" and ExistingMutations != "Neuroglottis":
                f.writelines(" Neuroglottis")
                MissingZygote = "Neuroglottis"
            elif NumTwoLostZygotes1 <= 80 and MissingZygote != "Mucranoid" and ExistingMutations != "Mucranoid":
                f.writelines(" Mucranoid")
                MissingZygote = "Mucranoid"
            elif NumTwoLostZygotes1 <= 89 and MissingZygote != "Betcher's Gland" and ExistingMutations != "Betcher":
                f.writelines(" Betcher's Gland")
                MissingZygote = "Betcher's Gland"
            elif NumTwoLostZygotes1 <= 98 and MissingZygote != "Melanchromic Organ" and ExistingMutations != "Melanochrome":
                f.writelines(" Melanchromic Organ")
                MissingZygote = "Melanchromic Organ"
            f.writelines("\nLost zygote:")
            NumTwoLostZygotes2 = random.randint(1,98)
            print("Multiple Lost Zygotes Roll 2:")
            print(NumTwoLostZygotes2)
            if NumTwoLostZygotes2 <= 8 and MissingZygote != "Catalepsean Node" and ExistingMutations != "Catalepsean Node":
                f.writelines(" Catalepsean Node")
                MissingZygote = "Catalepsean Node"
            elif NumTwoLostZygotes2 <= 17 and MissingZygote != "Preomnor" and ExistingMutations != "Preomnor":
                f.writelines(" Preomnor")
                MissingZygote = "Preomnor"
            elif NumTwoLostZygotes2 <= 26 and MissingZygote != "Omophagea" and ExistingMutations != "Omophagea":
                f.writelines(" Omophagea")
                MissingZygote = "Omophagea"
            elif NumTwoLostZygotes2 <= 35 and MissingZygote != "Occulobe" and ExistingMutations != "Occulobe":
                f.writelines(" Occulobe")
                MissingZygote = "Occulobe"
            elif NumTwoLostZygotes2 <= 44 and MissingZygote != "Lyman’s Ear" and ExistingMutations != "Lyman":
                f.writelines(" Lyman’s Ear")
                MissingZygote = "Lyman’s Ear"
            elif NumTwoLostZygotes2 <= 53 and MissingZygote != "Sus-an Membrane" and ExistingMutations != "Membrane":
                f.writelines(" Sus-an Membrane")
                MissingZygote = "Sus-an Membrane"
            elif NumTwoLostZygotes2 <= 62 and MissingZygote != "Oolitic Kidney" and ExistingMutations != "Oolitic":
                f.writelines(" Oolitic Kidney")
                MissingZygote = "Oolitic Kidney"
            elif NumTwoLostZygotes2 <= 71 and MissingZygote != "Neuroglottis" and ExistingMutations != "Neuroglottis":
                f.writelines(" Neuroglottis")
                MissingZygote = "Neuroglottis"
            elif NumTwoLostZygotes2 <= 80 and MissingZygote != "Mucranoid" and ExistingMutations != "Mucranoid":
                f.writelines(" Mucranoid")
                MissingZygote = "Mucranoid"
            elif NumTwoLostZygotes2 <= 89 and MissingZygote != "Betcher's Gland" and ExistingMutations != "Betcher":
                f.writelines(" Betcher's Gland")
                MissingZygote = "Betcher's Gland"
            elif NumTwoLostZygotes2 <= 98 and MissingZygote != "Melanchromic Organ" and ExistingMutations != "Melanochrome":
                f.writelines(" Melanchromic Organ")
                MissingZygote = "Melanchromic Organ"

    def ProgenitorMutations():
        global ExistingMutations
        global ProgenitorChapter
        if ProgenitorChapter == "Ultramarines":
            ## Ultramarines
            LostZygote()
        elif ProgenitorChapter == "Blood Angels" and ExistingMutations != "Blood Angels":
            ## Blood Angels
            NumAngelsMutation = random.randint(1,6)
            print("Blood Angels Mutation Roll:")
            print(NumAngelsMutation)
            if NumAngelsMutation <= 3:
                f.writelines("\nAverage rate of the Red Thirst and the Black Rage")
            elif NumAngelsMutation <= 4:
                f.writelines("\nIncreased rate of the Red Thirst")
            elif NumAngelsMutation <= 5:
                f.writelines("\nIncreased rate of the Black Rage")
            elif NumAngelsMutation <= 6:
                f.writelines("\nIncreased rate of the Red Thirst and the Black Rage")
            ExistingMutations = "Blood Angels"
        elif ProgenitorChapter == "Dark Angels":
            ## Dark Angels
            LostZygote()
        elif ProgenitorChapter == "Unknown" or ProgenitorChapter == "Suspected Traitor":
            ## Unknown
            LostZygote()
        elif ProgenitorChapter == "Imperial Fists":
            ## Imperial Fists
            LostZygote()
        elif ProgenitorChapter == "White Scars":
            ## White Scars
            LostZygote()
        elif ProgenitorChapter == "Raven Guard" and ExistingMutations != "Melanochrome":
            ## Raven Guard
            f.writelines("\nMalfunctioning Melanochrome")
            ExistingMutations = "Melanochrome"
        elif ProgenitorChapter == "Iron Hands" and ExistingMutations != "Dysphoria":
            ## Iron Hands
            f.writelines("\nBody Dysphoria")
            ExistingMutations = "Dysphoria"
        elif ProgenitorChapter == "Space Wolves" and ExistingMutations != "Unstable Helix":
            ## Space Wolves
            f.writelines("\nUnstable Canis Helix")
            ExistingMutations = "Unstable Helix"
        elif ProgenitorChapter == "Salamanders" and ExistingMutations != "Melanochrome" and MissingZygote != "Melanchromic Organ":
            ## Salamanders
            f.writelines("\nMalfunctioning Melanochrome")
            ExistingMutations = "Melanochrome"
        else:
            LostZygote()

## The following code defines the Chapter's Mutations

    def Mutations():
        global ExistingMutations
        NumMutations = random.randint(1,21)
        print("Mutation Roll:")
        print(NumMutations)
        if NumMutations <= 1 and ExistingMutations != "Biscopea":
            f.writelines("\nMutated Biscopea")
            ExistingMutations = "Biscopea"
        elif NumMutations <= 2 and ExistingMutations != "Occulobe" and MissingZygote != "Occulobe":
            f.writelines("\nMutated Occulobe")
            ExistingMutations = "Occulobe"
        elif NumMutations <= 3 and ExistingMutations != "Catalepsean Node" and MissingZygote != "Catalepsean Node":
            f.writelines("\nMutated Catalepsean Node")
            ExistingMutations = "Catalepsean Node"
        elif NumMutations <= 4 and ExistingMutations != "Melanochrome" and MissingZygote != "Melanchromic Organ":
            f.writelines("\nMutated Melanochrome")
            ExistingMutations = "Melanochrome"
        elif NumMutations <= 5 and ExistingMutations != "Ossmodula":
            f.writelines("\nMutated Ossmodula")
            ExistingMutations = "Ossmodula"
        elif NumMutations <= 7:
            LostZygote()                        
        elif NumMutations <= 8:
            ProgenitorMutations()
        elif NumMutations <= 9 and ExistingMutations != "Larraman":
            f.writelines("\nMutated Larraman's Organ")
            ExistingMutations = "Larraman"
        elif NumMutations <= 10 and ExistingMutations != "Preomnor" and MissingZygote != "Preomnor":
            f.writelines("\nMutated Preomnor")
            ExistingMutations = "Preomnor"
        elif NumMutations <= 11 and ExistingMutations != "Omophagea" and MissingZygote != "Omophagea":
            f.writelines("\nMutated Omophagea")
            ExistingMutations = "Omophagea"
        elif NumMutations <= 12 and ExistingMutations != "Multi-lung":
            f.writelines("\nMutated Multi-lung")
            ExistingMutations = "Multi-lung"
        elif NumMutations <= 13 and ExistingMutations != "Lyman" and MissingZygote != "Lyman’s Ear":
            f.writelines("\nMutated Lyman's Ear")
            ExistingMutations = "Lyman"
        elif NumMutations <= 14 and ExistingMutations != "Membrane" and MissingZygote != "Sus-an Membrane":
            f.writelines("\nMutated Sus-an Membrane")
            ExistingMutations = "Membrane"
        elif NumMutations <= 15 and ExistingMutations != "Oolitic" and MissingZygote != "Oolitic Kidney":
            f.writelines("\nMutated Oolitic Kidney")
            ExistingMutations = "Oolitic"
        elif NumMutations <= 16 and ExistingMutations != "Neuroglottis" and MissingZygote != "Neuroglottis":
            f.writelines("\nMutated Neuroglottis")
            ExistingMutations = "Neuroglottis"
        elif NumMutations <= 17 and ExistingMutations != "Mucranoid" and MissingZygote != "Mucranoid":
            f.writelines("\nMutated Mucranoid")
            ExistingMutations = "Mucranoid"
        elif NumMutations <= 18 and ExistingMutations != "Betcher" and MissingZygote != "Betcher's Gland":
            f.writelines("\nMutated Betcher's Gland")
            ExistingMutations = "Betcher"
        elif NumMutations <= 19 and ExistingMutations != "Haemastamen":
            f.writelines("\nMutated Haemastamen")
            ExistingMutations = "Haemastamen"
        elif NumMutations <= 20 and ExistingMutations != "Heart":
            f.writelines("\nMutated Secondary Heart")
            ExistingMutations = "Heart"
        elif NumMutations <= 21 and ExistingMutations != "Carapace":
            f.writelines("\nMutated Black Carapace")
            ExistingMutations = "Carapace"
        else:
            LostZygote()

## The following code opens (or creates, if none exists) the .txt file

    with open("Your Chapter.txt", "w") as f:
        
## The following code defines the reason for the Chapter's Founding

        f.writelines("    Founding reason")
        NumFoundingReason = random.randint(1,28)
        print("Founding Reason Roll:")
        print(NumFoundingReason)
        if NumFoundingReason <= 4:
            f.writelines("\nPrognostication: Imperial psykers determined a unique need for a particular Chapter at a specific place at a certain time. This Chapter is, for all intents and purposes, the direct result of prophecy. Even if that prophecy is no longer relevant for one reason nor another, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 8:
            f.writelines("\nPreparation: Imperial authorities identified the need for a Chapter to combat a specific threat. Even if that threat no longer exists today, its original presence lead to the founding of this Chapter.")
        elif NumFoundingReason <= 12:
            f.writelines("\nDefense: Imperial authorities identified a part of the Imperium so crucial to its continued existence that a Chapter was deemed necessary for its protection. Even if the aforementioned part of the Imperium has now fallen, this Chapter was created for that express purpose, and its identity might still be strongly influenced by it")
        elif NumFoundingReason <= 16:
            f.writelines("\nOffense: Imperial authorities identified the need for a crusading Chapter, whether as part of an organised offensive or as a flexible strike force. This Chapter was created for that purpose, and is on its crusade to this very day. Even if the offensive that originally justified its creaton is no longer ongoing, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 20:
            f.writelines("\nUnknown: records of why this Chapter was founded have been lost. The Chapter's identity might be strongly influenced by the loss of this important information.")
        elif NumFoundingReason <= 24:
            f.writelines("\nSecret: the true reason for this Chapter being founded was of such importance that it was kept secret to all but the High Lords of Terra and the Chapter itself. Other agencies of the Imperium, such as the Inquisition, likely know at least part of the truth. The Chapter may maintain an official founding cause to obfuscate the truth. Even if the secret circumstance is no longer relevant, the Chapter's identity might still be strongly influenced by it.")
        elif NumFoundingReason <= 28:
            f.writelines("\nRefounding: Imperial authorities decided to reform a Chapter that was once lost, either in battle or by some other means. This Chapter likely, but not necessarily, maintains a similar culture, organisation and demeanor to its namesake.")
        
            
        f.writelines("\n")
        
        
## The following code defines the date of the Chapter's Founding
        
        f.writelines("\n    Founding date")  
        NumFoundingDate = random.randint(1,140)
        print("Founding Date Roll:")
        print(NumFoundingDate)
        if NumFoundingDate <= 1:
            f.writelines("\n2nd Founding: although no concrete evidence exists, this Chapter claims to be have been founded in the early 31st millennium. During the 2nd Founding, the original Legions were split into many smaller Chapters immediately following the Horus Heresy. This time also saw the 1st Black Crusade of Abaddon the Despoiler.")
        elif NumFoundingDate <= 5:
            f.writelines("\n3rd Founding: this Chapter was created in the early 32nd millennium, during the 3rd Founding. Unlike the Second Founding, which was a reorganisation of existing Astartes from Legions into Chapters, this was the first time truly new Chapters were raised. This time also saw the 2nd and 3rd Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 10:
            f.writelines("\nUnknown: if any records of this Chapter's founding exist anywhere, they are not known to the Chapter, nor indeed the Imperium at large.")
        elif NumFoundingDate <= 15:
            f.writelines("\n4th Founding: this Chapter was created in the mid 32nd millennium, during the 4th Founding. This was an uncertain and tumultuous time, following the cataclysmic War of the Beast.")
        elif NumFoundingDate <= 20:
            f.writelines("\n5th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 5th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler. The 6th and 7th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 25:
            f.writelines("\n6th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 6th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler. The 5th and 7th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 30:
            f.writelines("\n7th Founding: this Chapter was created at some point between the mid 32nd millennium and the mid 34th millennium, during the 7th Founding. This time also saw the 4th Black Crusade of Abaddon the Despoiler The 5th and 6th Foundings occurred during the same period of ~2000 years.")
        elif NumFoundingDate <= 45:
            f.writelines("\n8th Founding: this Chapter was created in the mid 34th millennium, during the 8th Founding. Like others of this Founding, accounts are fragmentary at best, and likely not contemporary.")
        elif NumFoundingDate <= 50:
            f.writelines("\n9th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 9th Founding. The 10th, 11th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 55:
            f.writelines("\n10th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 10th Founding. The 9th, 11th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 60:
            f.writelines("\n11th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 11th Founding. The 9th, 10th and 12th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 65:
            f.writelines("\n12th Founding: this Chapter was created at some point between the mid 34th millennium and the mid 35th millennium, during the 12th Founding. The 9th, 10th and 11th Foundings occurred during the same period of ~1000 years.")
        elif NumFoundingDate <= 70:
            f.writelines("\n13th Founding: this Chapter claims to have been created in the mid 35th millennium, during the 13th 'Dark' Founding. However, the Adeptus Terra possesses no original samples of gene-seed from any Chapters of the 13th Founding, so this claim is disputed.")
        elif NumFoundingDate <= 75:
            f.writelines("\n14th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 14th Founding. The 15th, 16th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 80:
            f.writelines("\n15th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 15th Founding. The 14th, 16th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 85:
            f.writelines("\n16th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 16th Founding. The 14th, 15th, 17th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 90:
            f.writelines("\n17th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 17th Founding. The 14th, 15th, 16th, 18th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 95:
            f.writelines("\n18th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 18th Founding. The 14th, 15th, 16th, 17th, 19th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 100:
            f.writelines("\n19th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 19th Founding. The 14th, 15th, 16th, 17th, 18th and 20th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 105:
            f.writelines("\n20th Founding: this Chapter was created at some point between the mid 35th millennium and the late 35th millennium, during the 20th Founding. The 14th, 15th, 16th, 17th, 18th and 19th Foundings occurred during the same period of ~500 years.")
        elif NumFoundingDate <= 110:
            f.writelines("\n21st Founding: this Chapter was created in the late 35th millennium, immediately prior to the Age of Apostasy, during the 21st 'Cursed' Founding. The single largest Founding since the 2nd, only a scant few have survived unscathed to the 42nd millennium. A dark omen hangs over the Chapter.")
        elif NumFoundingDate <= 115:
            f.writelines("\n22nd Founding: this Chapter was created in the early 36th millennium to the late 37th millennium, during the 22nd Founding. These were the years following the Age of Apostasy, which also saw the Great Cull carried out, as well as the 5th, 6th, 7th and 8th Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 120:
            f.writelines("\n23rd Founding: this Chapter was created in the late 37th millennium to early 38th millennium, during the 23rd 'Sentinel' Founding. It was intended to replace the catastrophic losses of at least 57 Chapters in the preceding years and close vital gaps in the Imperium's defenses. This time also saw the 9th Black Crusade of Abaddon the Despoiler.")
        elif NumFoundingDate <= 125:
            f.writelines("\n24th Founding: this Chapter was created between the 38th millennium and the 39th millennium, during the 24th Founding. This time also saw the beginning of The Waning, which was a gradual decrease in stability within the Imperium, the Redemption Crusades, and the 10th and 11th Black Crusades of Abaddon the Despoiler.")
        elif NumFoundingDate <= 130:
            f.writelines("\n25th Founding: this Chapter was created in the 40th millennium, during the 25th 'Bastion' Founding. This time also saw the return of Krieg to Imperial rule and the beginning of the Macharian Crusade. A comparatively stable and peaceful time for the Imperium, allowing borders to be both expanded and reinforced.")
        elif NumFoundingDate <= 135:
            f.writelines("\n26th Founding: this Chapter was created in the 41st millennium, during the 26th Founding, making them the last of the original breed of Astartes, who would later become known as The Firstborn. This time also saw the 12th and ultimate 13th Black Crusades of Abaddon the Despoiler, as well as the consequential creation of the Cicatrix Maledictum, or the Great Rift.")
        elif NumFoundingDate <= 140:
            f.writelines("\nUltima Founding: this Chapter was created in the early 42nd millennium, during the Ultima Founding, and accordingly consists entirely of Primaris Astartes. Freshly formed, they face a galaxy split in two by the Cicatrix Maledictum, the culmination of the Archenemy's Long War, and the realisation of the Chaos Gods' plans.")
            Founding = "Ultima Founding"
            
        f.writelines("\n")        

## The following code defines the Chapter's Progenitor

        f.writelines("\n    Progenitor")
        if Founding != "Ultima Founding":
            NumProgenitor = random.randint(1,160)
            print("Progenitor Roll:")
            print(NumProgenitor)
            if NumProgenitor <= 50:
                f.writelines("\nUltramarines: this Chapter is of Roboute Guilliman's accomplished lineage, whether from original Ultramarines stock or through a successor Chapter.")
                ProgenitorChapter = "Ultramarines"
            elif NumProgenitor <= 75:
                f.writelines("\nUnknown: this Chapter, as well as the Imperium at large, has lost all records of its progenitor. There may be claims of one progenitor or another, but nothing can be proven.")
                ProgenitorChapter = "Unknown"
            elif NumProgenitor <= 90:
                f.writelines("\nDark Angels: this Chapter is of the Lion El'Jonson's proud lineage, whether from original Dark Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Dark Angels"
            elif NumProgenitor <= 105:
                f.writelines("\nBlood Angels: this Chapter is of Sanguinius' esteemed lineage, whether from original Blood Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Blood Angels"
            elif NumProgenitor <= 120:
                f.writelines("\nImperial Fists: this Chapter is of Rogal Dorn's stubborn lineage, whether from original Imperial Fists stock or through a successor Chapter.")
                ProgenitorChapter = "Imperial Fists"
            elif NumProgenitor <= 130:
                f.writelines("\nWhite Scars: this Chapter is of Jaghatai Khan's fierce lineage, whether from original White Scars stock or through a successor Chapter.")
                ProgenitorChapter = "White Scars"
            elif NumProgenitor <= 140:
                f.writelines("\nRaven Guard: this Chapter is of Corvus Corax' noble lineage, whether from original Raven Guard stock or through a successor Chapter.")
                ProgenitorChapter = "Raven Guard"
            elif NumProgenitor <= 150:
                f.writelines("\nIron Hands: this Chapter is of Ferrus Manus' troubled lineage, whether from original Iron Hands stock or through a successor Chapter.")
                ProgenitorChapter = "Iron Hands"
            elif NumProgenitor <= 151:
                f.writelines("\nSpace Wolves: this Chapter claims to be of Leman Russ' savage lineage. However, the Space Wolves themselves deny this claim, and no solid evidence exists to substantiate it.")
                ProgenitorChapter = "Space Wolves"
            elif NumProgenitor <= 152:
                f.writelines("\nSalamanders: this Chapter claims to be of Vulkan's benevolent lineage. However, the Salamanders themselves deny this claim, and no solid evidence exists to substantiate it.")
                ProgenitorChapter = "Salamanders"
            elif NumProgenitor <= 160:
                f.writelines("\nSuspected Traitor: this Chapter, as well as the Imperium at large, has lost all records of its progenitor. There may be claims of one progenitor or another, but nothing can be proven, and rumors abound that their gene-seed was actually sourced from one of the 9 traitor Legions.")
                ProgenitorChapter = "Suspected Traitor"
        if Founding == "Ultima Founding":
            NumUltimaProgenitor = random.randint(1,170)
            print("Progenitor Roll:")
            print(NumUltimaProgenitor)
            if NumUltimaProgenitor <= 50:
                f.writelines("\nUltramarines: this Chapter is of Roboute Guilliman's accomplished lineage, whether from original Ultramarines stock or through a successor Chapter.")
                ProgenitorChapter = "Ultramarines"
            elif NumUltimaProgenitor <= 75:
                f.writelines("\nUnknown: this Chapter was created from gene-seed stocks whose records of origin have been lost. There may be claims of one progenitor or another, but nothing can be proven.")
                ProgenitorChapter = "Unknown"
            elif NumUltimaProgenitor <= 90:
                f.writelines("\nDark Angels: this Chapter is of the Lion El'Jonson's proud lineage, whether from original Dark Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Dark Angels"
            elif NumUltimaProgenitor <= 105:
                f.writelines("\nBlood Angels: this Chapter is of Sanguinius' esteemed lineage, whether from original Blood Angels stock or through a successor Chapter.")
                ProgenitorChapter = "Blood Angels"
            elif NumUltimaProgenitor <= 120:
                f.writelines("\nImperial Fists: this Chapter is of Rogal Dorn's stubborn lineage, whether from original Imperial Fists stock or through a successor Chapter.")
                ProgenitorChapter = "Imperial Fists"
            elif NumUltimaProgenitor <= 130:
                f.writelines("\nWhite Scars: this Chapter is of Jaghatai Khan's fierce lineage, whether from original White Scars stock or through a successor Chapter.")
                ProgenitorChapter = "White Scars"
            elif NumUltimaProgenitor <= 140:
                f.writelines("\nRaven Guard: this Chapter is of Corvus Corax' noble lineage, whether from original Raven Guard stock or through a successor Chapter.")
                ProgenitorChapter = "Raven Guard"
            elif NumUltimaProgenitor <= 150:
                f.writelines("\nIron Hands: this Chapter is of Ferrus Manus' troubled lineage, whether from original Iron Hands stock or through a successor Chapter.")
                ProgenitorChapter = "Iron Hands"
            elif NumUltimaProgenitor <= 155:
                f.writelines("\nSpace Wolves: this Chapter is of Leman Russ' savage lineage.")
                ProgenitorChapter = "Space Wolves"
            elif NumUltimaProgenitor <= 160:
                f.writelines("\nSalamanders: this Chapter is of Vulkan's benevolent lineage.")
                ProgenitorChapter = "Salamanders"
            elif NumUltimaProgenitor <= 170:
                f.writelines("\nSuspected Traitor: this Chapter was created from gene-seed stocks whose records of origin have been lost. There may be claims of one progenitor or another, but nothing can be proven, and rumors abound that their gene-seed was actually sourced from one of the 9 traitor Legions.")
                ProgenitorChapter = "Suspected Traitor"
            
        f.writelines("\n")            

## The following code defines the purity of the Chapter's Gene-seed

        f.writelines("\n    Gene-seed purity")
        NumPurity = random.randint(1,20)
        print("Purity Roll:")
        print(NumPurity)
        if NumPurity <= 1:
            f.writelines("\nPure: this Chapter's gene-seed is, for all intents and purposes, purer than even its progenitor's.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage.")
        elif NumPurity <= 10:
            f.writelines("\nMatches progenitor: this Chapter's gene-seed is largely identical to its progenitor's. Consequently, it likely suffers similar flaws.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            NumMutations1 = random.randint(1,10)
            print("Progenitor Match Roll:")
            print(NumMutations1)
            if NumMutations1 > 5:
                f.writelines("\n")
                f.writelines("\n    Mutations")
                ProgenitorMutations()
        elif NumPurity <= 16:
            f.writelines("\nDeviant: this Chapter's gene-seed has undergone small changes, whether deliberate or accidental, deviating from its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(1,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 5:
                Mutations()
            elif NumMutations1 <= 10:
                Mutations()
                Mutations()                
        elif NumPurity <= 19:
            f.writelines("\nMutated: this Chapter's gene-seed has undergone substantial changes, whether deliberate or accidental, resulting in mutations significantly different from its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage to some extent.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(1,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 5:
                Mutations()
                Mutations()
            elif NumMutations1 <= 9:
                Mutations()
                Mutations()
                Mutations()
            elif NumMutations1 <= 10:
                Mutations()
                Mutations()
                Mutations()
                Mutations()
                DOOMED()
        elif NumPurity <= 20:
            f.writelines("\nDamaged: this Chapter's gene-seed has suffered catastrophic damage, whether from deliberate tampering or some critical accident, resulting in severe flaws that make it unrecognisable when compared to its progenitor.")
            if ProgenitorChapter == "Blood Angels":
                f.writelines(" Regardless of purity, they of course still suffer from the Red Thirst and the Black Rage.")
            f.writelines("\n")
            f.writelines("\n    Mutations")
            NumMutations1 = random.randint(1,10)
            print("Mutations Roll:")
            print(NumMutations1)
            if NumMutations1 <= 5:
                Mutations()
                Mutations()
                Mutations()
            elif NumMutations1 <= 9:
                Mutations()
                Mutations()
                Mutations()
                Mutations()
            elif NumMutations1 <= 10:
                Mutations()
                Mutations()
                Mutations()
                Mutations()
                Mutations()
                DOOMED()
                
            #f.writelines("\n    What is the Chapter's Flaw?")
            #NumFlaw = random.randint(1,10)
            #print("Flaw Roll:")
            #print(NumFlaw)
            #if NumFlaw <= 2:
            #    f.writelines("\nWe Stand Alone - The Chapter is either distrusted for some reason, or shuns contact with others.")
            #elif NumFlaw <= 4:
            #    f.writelines("\nPride in the Colours - The Chapter hates doing anything that covers their livery, including wearing Deathwatch black.")
            #elif NumFlaw <= 6:
            #    f.writelines("\nFaith in Suspicion - The Chapter particularly hates a single Imperial institution, and refuses to work with them.")
            #elif NumFlaw <= 8:
            #    f.writelines("\nEye to Eye - The Chapter hates any method of warfare other than running up to the enemy and punching them.")
            #elif NumFlaw <= 10:
            #    f.writelines("\nChapter Cult - The practices of the Chapter are weird and probably quite unsavory.")
            ## Scar counting could be another flaw
                
        f.writelines("\n")

## The following code defines the Chapter's Demeanor

        f.writelines("\n    Chapter Demeanor")
        NumDemeanor = random.randint(1,13)
        print("Demeanor Roll:")
        print(NumDemeanor)
        if NumDemeanor <= 1:
            f.writelines("\nAudacious: this Chapter prides itself on its willingness to make bold decisions and perform daring actions; some, however, may call it recklessness.")
        elif NumDemeanor <= 2:
            f.writelines("\nMeticulous: this Chapter is well-known for its thorough approach to any given situation, though detractors may argue it can be to a fault.")
        elif NumDemeanor <= 3:
            f.writelines("\nCallous: this Chapter is famous (or infamous) for its indifference to suffering, whether it be their own, that of their enemies, or that of their allies.")
        elif NumDemeanor <= 4:
            f.writelines("\nTactical: this Chapter regards the proverbial 'small picture' to be paramount. Accordingly, their focus in battle is largely on tactical movements, possibly at the risk of ignoring grander elements.")
        elif NumDemeanor <= 5:
            f.writelines("\nStrategic: this Chapter regards the proverbial 'big picture' to be paramount. Accordingly, their focus in battle is largely on strategic movements, possibly at the risk of ignoring more minute elements.")
        elif NumDemeanor <= 6:
            f.writelines("\nCunning: this Chapter emphasizes the necessity of cleverness. While it serves them well, both on the battlefield and in the politics of the Adeptus Astartes and the wider Imperium alike, this guile might lead some to view them as scheming, or downright untrustworthy.")
        elif NumDemeanor <= 7:
            f.writelines("\nZealous: this Chapter pursues every task with a level of fervor uncommon even among Astartes. Such is their drive and certainty in their actions that it may blind them to alternatives.")
        elif NumDemeanor <= 8:
            f.writelines("\nRelentless: this Chapter has been known to pursue a given task with such adamant stubbornness that they have been compared to an unstoppable force. Some may wonder what happens if they meet an immovable object. Others may call them inflexible.")
        elif NumDemeanor <= 9:
            f.writelines("\nRepentless: this Chapter has never been known to apologize, viewing such a thing as beneath them. While some appreciate such dedication and willingness to stand by their every action, others may chafe under perceived arrogance.")
        elif NumDemeanor <= 10:
            f.writelines("\nImperial: this Chapter, moreso than most of their peers, are dedicated to the expansion of the Imperium and the vision of the Emperor. This may come at the expense of other concerns, and some may question their interpretaton of the Emperor's vision.")
        elif NumDemeanor <= 11:
            f.writelines("\nPenitent: this Chapter has a considerable focus on repentance - typically their own. While their endeavors to right wrongs they have done are admirable, some might argue they have a tendency to exaggerate a given situation.")
        elif NumDemeanor <= 12:
            f.writelines("\nHonorable: this Chapter holds honor in high regard, although some may call it an obsession. They exist by some code or another, whether of their own making or one given to them; any breach of this code, whether by themselves or a third party, is seen as unacceptable.")
        elif NumDemeanor <= 13:
            f.writelines("\nHonest: this Chapter cannot tell a lie, for one reason or another. While some will appreciate their sincerity, others might consider them neurotic in their obsession with honesty. Others again might point out that lies can be avoided by telling technical or half-truths... or by absolute silence.")


        f.writelines("\n")

## The following code defines the Chapter's Legend

        f.writelines("\n    Legendary Figure")
        NumLegendFigure = random.randint(1,130)
        print("Legendary Figure Roll:")
        print(NumLegendFigure)
        if NumLegendFigure <= 20:
            f.writelines("\nA Founding Chapter member:")
            NumFoundingLegend = random.randint(21,130)
            print("Founding Legend Roll:")
            print(NumFoundingLegend)
            if NumFoundingLegend <= 40:
                f.writelines(" Chapter Master, or equivalent")
            elif NumFoundingLegend <= 50:
                NumFoundingChampSelect1 = random.randint (1,2)
                print("Founding Champion Roll:")
                print(NumFoundingChampSelect1)
                if NumFoundingChampSelect1 == 1:
                    f.writelines(" Chapter Champion, or equivalent")
                elif NumFoundingChampSelect1 == 2:
                    NumFoundingChampSelect2 = random.randint (1,10)
                    print("Founding Champion Company Roll:")
                    print(NumFoundingChampSelect2)
                    if NumFoundingChampSelect2 == 1:
                        f.writelines(" 1st Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 2:
                        f.writelines(" 2nd Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 3:
                        f.writelines(" 3rd Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 4:
                        f.writelines(" 4th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 5:
                        f.writelines(" 5th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 6:
                        f.writelines(" 6th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 7:
                        f.writelines(" 7th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 8:
                        f.writelines(" 8th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 9:
                        f.writelines(" 9th Company Champion, or equivalent")
                    elif NumFoundingChampSelect2 == 10:
                        f.writelines(" 10th Company Champion, or equivalent")
            elif NumFoundingLegend <= 60:
                f.writelines(" Chief Librarian, or equivalent")
            elif NumFoundingLegend <= 70:
                f.writelines(" Master of Sanctity, or equivalent")
            elif NumFoundingLegend <= 80:
                f.writelines(" Master of the Forge, or equivalent")
            elif NumFoundingLegend <= 90:
                f.writelines(" Force Commander, or equivalent")
            elif NumFoundingLegend <= 100:
                f.writelines(" Chief Apothecary, or equivalent")
            elif NumFoundingLegend <= 110:
                NumFoundingCptSelect = random.randint (1,10)
                print("Founding Captain Roll:")
                print(NumFoundingCptSelect)
                if NumFoundingCptSelect == 1:
                    f.writelines(" 1st Company Captain, or equivalent")
                elif NumFoundingCptSelect == 2:
                    f.writelines(" 2nd Company Captain, or equivalent")
                elif NumFoundingCptSelect == 3:
                    f.writelines(" 3rd Company Captain, or equivalent")
                elif NumFoundingCptSelect == 4:
                    f.writelines(" 4th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 5:
                    f.writelines(" 5th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 6:
                    f.writelines(" 6th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 7:
                    f.writelines(" 7th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 8:
                    f.writelines(" 8th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 9:
                    f.writelines(" 9th Company Captain, or equivalent")
                elif NumFoundingCptSelect == 10:
                    f.writelines(" 10th Company Captain, or equivalent")
            elif NumFoundingLegend <= 120:
                f.writelines(" Dreadnought, or equivalent")
            elif NumFoundingLegend <= 125:
                f.writelines(" Squad Sergeant, or equivalent")
            elif NumFoundingLegend <= 128:
                f.writelines(" Battle-Brother, or equivalent")
            elif NumFoundingLegend == 130:
                f.writelines(" A Chapter member of your choice")
        elif NumLegendFigure <= 40:
            f.writelines("\nChapter Master, or equivalent")
        elif NumLegendFigure <= 50:
            NumChampSelect1 = random.randint (1,2)
            print("Champion Roll:")
            print(NumChampSelect1)
            if NumChampSelect1 == 1:
                f.writelines("\nChapter Champion, or equivalent")
            elif NumChampSelect1 == 2:
                NumChampSelect2 = random.randint (1,10)
                print("Champion Company Roll:")
                print(NumChampSelect2)
                if NumChampSelect2 == 1:
                    f.writelines("\n1st Company Champion, or equivalent")
                elif NumChampSelect2 == 2:
                    f.writelines("\n2nd Company Champion, or equivalent")
                elif NumChampSelect2 == 3:
                    f.writelines("\n3rd Company Champion, or equivalent")
                elif NumChampSelect2 == 4:
                    f.writelines("\n4th Company Champion, or equivalent")
                elif NumChampSelect2 == 5:
                    f.writelines("\n5th Company Champion, or equivalent")
                elif NumChampSelect2 == 6:
                    f.writelines("\n6th Company Champion, or equivalent")
                elif NumChampSelect2 == 7:
                    f.writelines("\n7th Company Champion, or equivalent")
                elif NumChampSelect2 == 8:
                    f.writelines("\n8th Company Champion, or equivalent")
                elif NumChampSelect2 == 9:
                    f.writelines("\n9th Company Champion, or equivalent")
                elif NumChampSelect2 == 10:
                    f.writelines("\n10th Company Champion, or equivalent")
        elif NumLegendFigure <= 60:
            f.writelines("\nChief Librarian, or equivalent")
        elif NumLegendFigure <= 70:
            f.writelines("\nMaster of Sanctity, or equivalent")
        elif NumLegendFigure <= 80:
            f.writelines("\nMaster of the Forge, or equivalent")
        elif NumLegendFigure <= 90:
            f.writelines("\nForce Commander, or equivalent")
        elif NumLegendFigure <= 100:
            f.writelines("\nChief Apothecary, or equivalent")
        elif NumLegendFigure <= 110:
            NumCptSelect = random.randint (1,10)
            print("Captain Roll:")
            print(NumCptSelect)
            if NumCptSelect == 1:
                f.writelines("\n1st Company Captain, or equivalent")
            elif NumCptSelect == 2:
                f.writelines("\n2nd Company Captain, or equivalent")
            elif NumCptSelect == 3:
                f.writelines("\n3rd Company Captain, or equivalent")
            elif NumCptSelect == 4:
                f.writelines("\n4th Company Captain, or equivalent")
            elif NumCptSelect == 5:
                f.writelines("\n5th Company Captain, or equivalent")
            elif NumCptSelect == 6:
                f.writelines("\n6th Company Captain, or equivalent")
            elif NumCptSelect == 7:
                f.writelines("\n7th Company Captain, or equivalent")
            elif NumCptSelect == 8:
                f.writelines("\n8th Company Captain, or equivalent")
            elif NumCptSelect == 9:
                f.writelines("\n9th Company Captain, or equivalent")
            elif NumCptSelect == 10:
                f.writelines("\n10th Company Captain, or equivalent")
        elif NumLegendFigure <= 120:
            f.writelines("\nDreadnought, or equivalent")
        elif NumLegendFigure <= 125:
            f.writelines("\nSquad Sergeant, or equivalent")
        elif NumLegendFigure <= 128:
            f.writelines("\nBattle-Brother, or equivalent")
        elif NumLegendFigure == 130:
            f.writelines("\nA Chapter member of your choice")
            
        f.writelines("\n")

## The following code defines the deeds of the Chapter's Legend

        f.writelines("\n    Legendary Deeds")
        NumLegendDeeds = random.randint (1,100)
        print("Legendary Deed Roll:")
        print(NumLegendDeeds)
        if NumLegendDeeds <= 15:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the foul orks.")
            NumOrkDeeds = random.randint (1,100)
            print("Ork Deeds Roll:")
            print(NumOrkDeeds)
            if NumOrkDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many greenskins across so many battlefields that some among the repulsive xenos themselves have become familiar with his name.")
            elif NumOrkDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he foiled the plans of enough Warbosses that a wealth of bounties were placed on his head. Freebootaz tell stories about failed attempts to claim it.")
            elif NumOrkDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was instrumental in putting such a grinding halt to a Waaagh! that the resulting infighting over who was to blame lead directly to its dissolution into warring factions.")
            elif NumOrkDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he single-handedly felled a Gargant. Apocryphal stories are told by allies about how a lone Astartes boarded the colossal machine and did not emerge until it was destroyed.")
            elif NumOrkDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the greenskins so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 30:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the perfidious eldar.")
            NumEldarDeeds = random.randint (1,100)
            print("Eldar Deeds Roll:")
            print(NumEldarDeeds)
            if NumEldarDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many eldar across so many battlefields that some among the deceitful xenos themselves have become familiar with his name.")
            elif NumEldarDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he interrupted so many prophecies that some Farseers have come to suspect that he is somehow beyond their sight or means of intervention.")
            elif NumEldarDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was instrumental in stopping so many drukhari slave raids that various Kabals began blaming one another for somehow being responsible for his presence, allegedly to sabotage their rivals. The ensuing infighting crippled their operatons for a considerable time.")
            elif NumEldarDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was directly responsible for the harming of an exodite World Spirit. This monumental blow to their society, pride and spiritual well-being earned him the eternal ire of that world's exodites, and likely any Craftworld benefactors they might have.")
            elif NumEldarDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the eldar so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 45:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the vile tyranids.")
            NumTyranidDeeds = random.randint (1,100)
            print("Tyranid Deeds Roll:")
            print(NumTyranidDeeds)
            if NumTyranidDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many tyranids across so many battlefields that some among the ravenous xenos themselves have become familiar with him on some instinctive level.")
            elif NumTyranidDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was instrumental in halting the invasion and preventing the subsequent consumption of an Imperial world. The surviving populace hailed him as their savior.")
            elif NumTyranidDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he hunted down and destroyed a plethora of Genestealer Cults, ending their sinister plans of rebellion. Depending on the brutality of the purges, the local populaces may remember him as a necessary evil.")
            elif NumTyranidDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he cleansed a space hulk of its genestealer infestation, aboard which he was thought lost when it disappeared into the Warp. When it reappeared, his was the only life sign detected aboard.")
            elif NumTyranidDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was assumed dead by the tyranids so many times that some base instinct now seems to hold that he is deathless. Some among their number have taken to making sure their prey is dead, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 60:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the upstart tau.")
            NumTauDeeds = random.randint (1,100)
            print("Tau Deeds Roll:")
            print(NumTauDeeds)
            if NumTauDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many tau across so many battlefields that some among the ignorant xenos themselves have become familiar with his name.")
            elif NumTauDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was responsible for the deaths of multiple Ethereals, demoralising their people. There has been no shortage of tau curses directed at him.")
            elif NumTauDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he wiped out an entire kroot Kindred. Others swore to hunt him down and avenge their kin.")
            elif NumTauDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was instrumental in a planetary invasion that saw local Gue'vesa traitors purged and Imperial rule restored.")
            elif NumTauDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the tau so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 75:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the abominable necrons.")
            NumNecronDeeds = random.randint (1,100)
            print("Necron Deeds Roll:")
            print(NumNecronDeeds)
            if NumNecronDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many necrons across so many battlefields that some among the aberrant xenos themselves have become familiar with his name.")
            elif NumNecronDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he recognised that if the monolith was destroyed, the battle would be over. Field reports indicate that he led a charge against the xenos construct, resulting in its annihilation.")
            elif NumNecronDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he personally fought through a throng of immortals and slew the Lord who was coordinating the battle. The subsequent victory was attributed to him.")
            elif NumNecronDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he was responsible for the destruction of an entire Destroyer Cult. The irony of the situation became something of a joke within the Chapter - at least as far as Astartes humor goes.")
            elif NumNecronDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the necrons so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to making sure their enemies are dead, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 90:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the heretical minions of Chaos.")
            NumChaosDeeds = random.randint (1,100)
            print("Chaos Deeds Roll:")
            print(NumChaosDeeds)
            if NumChaosDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many of them across so many battlefields that some among the contemptible heretics themselves have become familiar with his name.")
            elif NumChaosDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he hunted down and destroyed a plethora of cults dedicated to the ruinous powers, ending their heretical plans of rebellion. Depending on the brutality of the purges, the local populaces may remember him as a necessary evil.")
            elif NumChaosDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he so thoroughly foiled the plans of a Chaos Lord. The failure was so absolute that the Lord was punished for his shortcomings by being transformed into a gibbering, witless Chaos Spawn.")
            elif NumChaosDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he personally slew a daemon prince")
                NumDaemonPrinceGod = random.randint (1,41)
                print("Daemon Prince God Roll:")
                print(NumDaemonPrinceGod)
                if NumDaemonPrinceGod <= 10:
                    f.writelines(" of Khorne")
                elif NumDaemonPrinceGod <= 20:
                    f.writelines(" of Tzeentch")
                elif NumDaemonPrinceGod <= 30:
                    f.writelines(" of Nurgle")
                elif NumDaemonPrinceGod <= 40:
                    f.writelines(" of Slaanesh")
                elif NumDaemonPrinceGod <= 41:
                    f.writelines(" of Chaos Undivided")
                f.writelines(", banishing it back to the Warp and ending the threat it posed for numerous generations.")
            elif NumChaosDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the followers of Chaos so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        elif NumLegendDeeds <= 100:
            f.writelines("\nThis Astartes is remembered for his dedication to battling the misguided humans from non-Imperial factions.")
            NumRebelDeeds = random.randint (1,100)
            print("Rebel Deeds Roll:")
            print(NumRebelDeeds)
            if NumRebelDeeds <= 20:
                f.writelines("\nAmong other heroic acts, he personally killed so many of them across so many battlefields that the oblivious dissidents themselves have become familiar with his name.")
            elif NumRebelDeeds <= 40:
                f.writelines("\nAmong other heroic acts, he was instrumental in the defeat of a rebel uprising, preventing their secession from the Imperium.")
            elif NumRebelDeeds <= 60:
                f.writelines("\nAmong other heroic acts, he was responsible for bringing a hitherto undiscovered lesser human empire into the light of the Emperor, absorbing it into the Imperium.")
            elif NumRebelDeeds <= 80:
                f.writelines("\nAmong other heroic acts, he discovered the existence of a human-xenos alliance that had gone unnoticed until then. The humans were punished for their betrayal of human supremacy. The xenos were exterminated.")
            elif NumRebelDeeds <= 100:
                f.writelines("\nAcross numerous conflicts, he was reported dead by the dissenters so many times that a persisting rumor now holds that he is deathless. Some among their number have taken to telling stories of dread about his impending return, even in the absence of his Chapter.")
        
        f.writelines("\n")

## The following code defines the Chapter's Homeworld

        f.writelines("\n    Chapter homeworld")
        NumChapterHomeworld = random.randint (1,100)
        print("Homeworld Roll:")
        print(NumChapterHomeworld)
        if NumChapterHomeworld <= 15:
            HomeworldModifier()
            f.writelines("Hive World: this Chapter's homeworld is the site of numerous hive cities, each home to billions of Imperial citizens, spanning entire continents.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 30:
            HomeworldModifier()
            f.writelines("Civilised World: this Chapter's homeworld is not dissimilar to Old Earth during the Age of Terra, in and around the 3rd millennium.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 60:
            HomeworldModifier()
            f.writelines("Feudal World: this Chapter's homeworld has not yet developed past a medieval stage, whether by design or by chance, although it may exist amidst the ruins of a more technologically advanced civilisaton.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 70:
            HomeworldModifier()
            f.writelines("Fortress World: this Chapter's homeworld has been transformed into a virtually unassailable stronghold. Even beyond the Fortress-Monastery, planetary defences are both extensive and vast.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 80:
            HomeworldModifier()
            f.writelines("Death World: this Chapter's homeworld is entirely hostile to human life. This may be limited to the biosphere, but can also include the entirety of the planetary environment in one way or another.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 90:
            HomeworldModifier()
            f.writelines("Armory World: this Chapter's homeworld is home to a vast store of arms, armor and munitions, some of it new, some of it ancient.")
            HomeworldModifierText()
            HomeworldRule()
        elif NumChapterHomeworld <= 100:
            f.writelines("\nFleet-based: this Chapter, whether or not by choice, has no homeworld. Instead, they roam the stars aboard ~")
            NumFleetSize = str(random.randint(10+1, 10+10))
            print("Fleet Size Roll:")
            print(NumFleetSize)
            f.write(NumFleetSize)
            f.write(" ships. In most fleet-based Chapters, a battle-barge typically fills the role of Fortress-Monastery.")
            
        f.writelines("\n")

## The following code defines the Chapter's Organisation

        f.writelines("\n    Organisation")
        if ProgenitorChapter == "Ultramarines":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 7:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 10:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
        elif ProgenitorChapter != "Ultramarines" and ProgenitorChapter != "Unknown":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 3:
                f.writelines("\nThis Chapter matches its progenitor's Organisation")
            elif NumChapterOrg <=5:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
            elif NumChapterOrg <=7:
                f.writelines("\nThis Chapter has somewhat diverged from its progenitor's Organisation")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 8:
                f.writelines("\nThis Chapter has significantly diverged from its progenitor's Organisation")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 10:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
        elif ProgenitorChapter == "Unknown":
            NumChapterOrg = random.randint (1,11)
            print("Chapter Organisation Roll:")
            print(NumChapterOrg)
            if NumChapterOrg <= 3:
                f.writelines("\nThis Chapter adheres to the Codex Astartes")
            elif NumChapterOrg <= 8:
                f.writelines("\nThis Chapter has somewhat diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
            elif NumChapterOrg <= 9:
                f.writelines("\nThis Chapter has significantly diverged from the Codex Astartes")
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
            elif NumChapterOrg <= 11:
                f.writelines("\nThis Chapter's Organisation is unique")
                UnitRestrictions()
                f.writelines("\n")
                f.writelines("\n    Non-Codex Elements")
                NonCodexElement()
                NonCodexElement()
                NonCodexElement()
                
        f.writelines("\n")

## The following code defines the Chapter's Doctrine

        f.writelines("\n    Combat doctrine")
        NumCombatDoctrine = random.randint (1,10)
        print("Combat Doctrine Roll:")
        print(NumCombatDoctrine)
        if NumCombatDoctrine <= 1:
            f.write("\nClose Combat: this Chapter favors engaging the enemy in close quarters, making them particularly lethal in an urban setting.")
        elif NumCombatDoctrine <= 2:
            f.write("\nRanged Combat: this Chapter favors engaging the enemy at range, making them particularly lethal on open ground.")
        elif NumCombatDoctrine <= 3:
            f.write("\nArmoured Assault: this Chapter favors engaging the enemy as an entirely mechanized force, affording them excellent tactical mobility.")
        elif NumCombatDoctrine <= 4:
            f.write("\nStealth: this Chapter favors engaging the enemy while they're unaware, having mastered the art of ambushes and the use of traps.")
        elif NumCombatDoctrine <= 5:
            f.write("\nLightning Strike: this Chapter favors engaging the enemy hard and fast, using hit-and-run tactics if the initial assault fails to destroy them entirely.")
        elif NumCombatDoctrine <= 6:
            f.write("\nDrop Pod Assault: this Chapter favors engaging the enemy via orbital insertion, relying on the element of surprise by suddenly appearing amidst or behind enemy lines.")
        elif NumCombatDoctrine <= 7:
            f.write("\nThunderhawk Assault: this Chapter favors engaging the enemy via aerial insertion, using their armed transports to clear a landing zone before rapidly disembarking.")
        elif NumCombatDoctrine <= 8:
            f.write("\nSiege: this Chapter favors engaging the enemy via encirclement and with massed artillery, using an assortment of siege methods to crack hostile fortresses.")
        elif NumCombatDoctrine <= 9:
            f.write("\nShock & Awe: this Chapter favors engaging the enemy with overwhelming firepower, relying in part on its sheer concussive effect, and in part on its destructive force.")
        elif NumCombatDoctrine <= 10:
            f.write("\nTerror: this Chapter favors engaging the enemy by means of psychological warfare, employing fear as its foremost weapon.")
            
        f.writelines("\n")

## The following code defines the Chapter's Training

        f.writelines("\n    Characteristic Chapter Training")
        NumChapterTraining = random.randint (1,120)
        print("Chapter Training Roll:")
        print(NumChapterTraining)
        if NumChapterTraining <= 10:
            f.writelines("\nPersonal Weapon Focus: this Chapter instills in its Astartes the vital importance of intimate familiarity with their weapons. They may do this in a variety of ways, for example by meditation, consecration, or frequent maintenance.")
        elif NumChapterTraining <= 20:
            f.writelines("\nBrotherhood: this Chapter instills in its Astartes the paramount value of their bond with their brothers in arms. Consequently, their performance is noticeably higher when in the company of their brothers.")
        elif NumChapterTraining <= 30:
            f.writelines("\nEndurance: this Chapter instills in its Astartes both the utility and the virtue of endurance. Whether mental or physical, no trial is unbearable to these marines.")
        elif NumChapterTraining <= 40:
            f.writelines("\nAccuracy: this Chapter instills in its Astartes the shame of missing a target. Whether in melee or at range, these marines maintain an almost neurotic dedicaton to precision. Perhaps incidentally, they're also very punctual.")
        elif NumChapterTraining <= 50:
            f.writelines("\nStrength: this Chapter instills in its Astartes the overriding principle of strength. With enough force, there is no hide tough enough, no armour resilient enough, and no wall thick enough to withstand their attacks.")
        elif NumChapterTraining <= 60:
            f.writelines("\nInspiration: this Chapter instills in its Astartes an appreciation for the oft-misunderstood art of lifting the hearts of others. Great orators all, they always seem to know exactly what to say, and when to say it, and have used this skill to turn the tide of many battles.")
        elif NumChapterTraining <= 70:
            f.writelines("\nIndividual Skill: this Chapter instills in its Astartes a notion that the performance of the Chapter is reliant on the performance of the individual. Consequently, they perform exceptionally well, even when apart from their brothers.")
        elif NumChapterTraining <= 80:
            f.writelines("\nBoarding Actions: this Chapter instills in its Astartes an affinity for void combat. True to their epithet, these are true space marines, performing at their peak when fighting in fleet actions.")
        elif NumChapterTraining <= 90:
            f.writelines("\nPersonal Armor Focus: this Chapter instills in its Astartes the vital importance of intimate familiarity with their armor. They may do this in a variety of ways, for example by meditation, consecration, or frequent maintenance.")
        elif NumChapterTraining <= 100:
            f.writelines("\nAgility: this Chapter instills in its Astartes the life-saving nature of speed and alacrity. A static marine is a dead marine, and they will be in constant motion once battle is joined.")
        elif NumChapterTraining <= 110:
            f.writelines("\nCooperation: this Chapter instills in its Astartes the value of fighting alongside the mortal humans whose Imperium they protect. Accordingly, they may frequently integrate with Imperial military forces, rather than stand apart from them, and either way work well with non-Astartes forces.")
        elif NumChapterTraining <= 120:
            f.writelines("\nSeclusion: this Chapter instills in its Astartes the superiority of space marines over any other fighting force. Consequently, they frequently fight apart from other Imperial military forces, preferring the prowess of their own kind.")
        
        f.writelines("\n")

## The following code defines the Chapter's Beliefs

        f.writelines("\n    Chapter Beliefs")
        NumChapterBeliefs = random.randint (1,100)
        print("Chapter Beliefs Roll:")
        print(NumChapterBeliefs)
        if NumChapterBeliefs <= 30:
            f.writelines("\nPrimarch Worship: this Chapter reveres its Primarch as the ultimate example of everything all Astartes should be... perhaps even what all humans ought to be.")
        elif NumChapterBeliefs <= 45:
            f.writelines("\nEmperor Worship: this Chapter reveres the Emperor as the ultimate example of everything an Astartes should strive to be, and everything humanity could be. They may even have adopted the Ecclesiarchy's belief in the Emperor's divinity.")
        elif NumChapterBeliefs <= 60:
            f.writelines("\nAncestor Worship: this Chapter reveres its own ancestors. Having made the ultimate sacrifice, their actions represent a measuring stick by which the Chapter's contemporary marines judge the worth of their own actions.")
        elif NumChapterBeliefs <= 75:
            f.writelines("\nDeath Cult: this Chapter views death in service to the Emperor as the ultimate duty of any Astartes. Mortality, therefore, occupies a central position in their culture.")
        elif NumChapterBeliefs <= 90:
            f.writelines("\nIconography: this Chapter has a certain symbol that holds special meaning to them. Consequently, it can be found throughout their culture, always held in reverence. Insulting it or even expressing ignorance of it may be met with anger.")
        elif NumChapterBeliefs <= 105:
            f.writelines("\nPurity: this Chapter believes that the human form is sacred in some way, and therefore must be preserved at all costs. They may even view themselves as the ultimate expression of human excellence and potential.")
        elif NumChapterBeliefs <= 120:
            f.writelines("\nTranshumanism: this Chapter views humanity as inferior to themselves, and Astartes as entirely separate. This may take on a patronising view, whereby humanity must be protected by their betters, or a dismissive view, whereby humanity is disregarded as unimportant to the Chapter.")
        elif NumChapterBeliefs <= 125:
            f.writelines("\nEsoteric: this Chapter's culture is strange, perhaps even unpalatable, to the wider Imperium. While important to themselves, their allies may not fully understand the Chapter's beliefs. Some may even respond with hostility should they become privy to it.")
            
        f.writelines("\n")

## The following code defines the Chapter's Strength

        f.writelines("\n    Chapter Strength")
        NumChapterStrength = random.randint (1,10)
        print("Chapter Strength Roll:")
        print(NumChapterStrength)
        if NumChapterStrength == 1:
            f.writelines("\nEndangered: this Chapter numbers ~")
            NumChapterEndangered = str(random.randint (50,500))
            print("Chapter Endangered Roll:")
            print(NumChapterEndangered)
            f.writelines(NumChapterEndangered)
            f.write(" Astartes. This may be a temporary state of affairs due to recent heavy losses, a permanent side effect of relentless fighting, or something else entirely.")
        elif NumChapterStrength <= 3:
            f.writelines("\nUnder Strength: this Chapter numbers ~")
            NumChapterUnderStrength = str(random.randint (500,900))
            print("Chapter Under Strength Roll:")
            print(NumChapterUnderStrength)
            f.write(NumChapterUnderStrength)
            f.writelines(" Astartes. This may be a temporary state of affairs due to recent heavy losses, a permanent side effect of relentless fighting, or something else entirely.")
        elif NumChapterStrength <= 9:
            f.writelines("\nNormal: this Chapter numbers ~1000 Astartes. This number is likely to occasionally fall, but their current numbers are largely stable.")
        elif NumChapterStrength == 10:
            f.writelines("\nOver Strength: this Chapter numbers ~")
            NumChapterOverStrength = str(random.randint (1100,1500))
            print("Chapter Over Strength Roll:")
            print(NumChapterOverStrength)
            f.write(NumChapterOverStrength)
            f.writelines(" Astartes. This may be due to a loophole they found in the Codex Astartes, simple disregard for the part of the Codex that mandates Chapter numbers, or something else entirely.")
        f.writelines("\nThe Codex Astartes prescribes a standing force of 1000 marines spread across 10 Companies of 100 marines.")
        f.writelines("\nThat number specifically refers to fighting men and does not include command or support staff.")
        f.writelines("\nMortal human serfs are also not included.")
            
        f.writelines("\n")
        
## The following code defines the Chapter's Allies

        f.writelines("\n    Chapter Allies")
        print("Chapter Allies Roll:")
        NumChapterAllies = random.randint (1,100)
        print(NumChapterAllies)
        if NumChapterAllies <= 5:
            f.writelines("\nAdministratum: this Chapter has ingratiated itself with some in the bureaucratic apparatus of the Imperium. This may, for example, allow them to get certain things done in a more expedient fashion when dealing with other bodies of the Imperium.")
        elif NumChapterAllies <= 15:
            f.writelines("\nAdeptus Arbites: this Chapter has made friends among the enforcers of Imperial law. This may, for example, allow them to expedite recruitment from criminal elements, or make them more capable of rooting out heretics and other undesirables.")
        elif NumChapterAllies <= 30:
            f.writelines("\nAnother Chapter, this Chapter has a strong bond with another Chapter of the Adeptus Astartes. This may, for example, allow them to call upon reinforcements, or draw from their allies' specialist expertise they otherwise lack.")
        elif NumChapterAllies <= 35:
            f.writelines("\nAdeptus Astra Telepathica: this Chapter has connections among the sanctioned psykers of the Imperium. This may, for example, allow them to enhance their astropath communicatons, or even perhaps recruit psykers from the League of Blackships.")
        elif NumChapterAllies <= 45:
            f.writelines("\nAdeptus Mechanicus: this Chapter has allied itself with either a forge world, or Mars itself. This may, for example, allow them access to advanced technology, or improve the quality of their techmarines.")
        elif NumChapterAllies <= 50:
            f.writelines("\nAdepta Sororitas: this Chapter has garnered a significant reputation amongst an Order of the fearsome Sisters of Battle. This may, for example, allow them to call upon reinforcements, or make them more capable of rooting out heretics.")
        elif NumChapterAllies <= 53:
            f.writelines("\nCollegia Titanica: this Chapter has gained the fierce friendship of a titan legion. This may, for example, allow them to call upon the god-machines themselves as reinforcements, or give them significant leverage in Mechanicus politics.")
        elif NumChapterAllies <= 55:
            f.writelines("\nQuestor Imperialis: this Chapter has earned the proud loyalty of a knight, or an entire Household. This may, for example, allow them to call upon reinforcements, or allow them to recruit from a Knight World's populaton.")
        elif NumChapterAllies <= 58:
            f.writelines("\nLogis Strategos: this Chapter has ingratiated itself with some in the Imperial intelligence agency. This may, for example, give them access to significantly superior information of strategic value.")
        elif NumChapterAllies <= 60:
            f.writelines("\nChartist Captains: this Chapter has obtained influence amongst the civilian merchant fleet of the Imperium. This may, for example, allow them to draw upon the inflexible, but considerable, logistical network the captains maintain.")
        elif NumChapterAllies <= 65:
            f.writelines("\nAdeptus Ministorum: this Chapter has earned the zealous favor of some in the Ecclesiarchy. This may, for example, allow them access to a considerable recruitment pool of faithful people who view them as the Emperor's own angels.")
        elif NumChapterAllies <= 75:
            f.writelines("\nAstra Militarum: this Chapter has allied itself with a Regiment of the Imperial Guard. This may, for example, allow them to call upon the ponderous but awesome force of the Imperial war machine.")
        elif NumChapterAllies <= 79:
            f.writelines("\nNavis Imperialis: this Chapter has gained a measure of influence with a battlegroup of the Imperial Navy. This may, for example, allow them to call upon the frightful firepower available to the great ships of the Imperium.")
        elif NumChapterAllies <= 85:
            f.writelines("\nInquisition: this Chapter has the questionable honor of being on an Inquisitor's good side. For however long that lasts, they may, for example, have considerable leverage in most Imperial affairs... at a cost.")
        elif NumChapterAllies <= 88:
            f.writelines("\nNavis Nobilite: this Chapter has somehow pierced the unfathomable politics of the Navigators and gained the favor of one of their Houses. This may, for example, give them considerable benefits when traveling the void.")
        elif NumChapterAllies <= 91:
            f.writelines("\nOfficio Assassinorum: this Chapter has ingratiated itself with some in the Assassin Temples. This may, for example, give them access to a covert and extraordinarily efficient means of resolving conflicts before they even truly begin.")
        elif NumChapterAllies <= 93:
            f.writelines("\nPlanetary Defence Force: this Chapter has obtained the loyalty of a local PDF. This may, for example, give them access to very earnest reinforcements of dubious worth in battle.")
        elif NumChapterAllies <= 98:
            f.writelines("\nRogue Traders: this Chapter has connections among some of the Imperium's very own frontier explorers. This may, for example, give them access to all sorts of exotic inventories of questionable origins.")
        elif NumChapterAllies == 99:
            f.writelines("\nSchola Progenium: this Chapter has made friends among some in the orphanages of the Ministorum. This may, for example, give them access to a small but extremely determined recruitment pool.")
        elif NumChapterAllies == 100:
            f.writelines("\nAdeptus Custodes: this Chapter has somehow gained a small measure of influence with some of the Emperor's own guards. This may, for example, give them considerable leverage in most Imperial affairs.")
            
        f.writelines("\n")

## The following code defines the Chapter's Enemies

        f.writelines("\n    Chapter Enemies")
        NumChapterEnemies = random.randint (1,100)
        print("Chapter Enemies Roll:")
        print(NumChapterEnemies)
        if NumChapterEnemies <= 2:
            print("Chapter Enemy Allies Roll:")
            NumChapterAllies = random.randint (1,100)
            print(NumChapterAllies)
            if NumChapterAllies <= 5:
                f.writelines("\nAdministratum: this Chapter has earned the ire of some in the bureaucratic apparatus of the Imperium. This may, for example, prevent them from getting certain things done in a more expedient fashion when dealing with other bodies of the Imperium. It may also be worse.")
            elif NumChapterAllies <= 15:
                f.writelines("\nAdeptus Arbites: this Chapter has made enemies among the enforcers of Imperial law. This may, for example, hinder recruitment from criminal elements, or make them less capable of rooting out heretics and other undesirables. It may also be worse.")
            elif NumChapterAllies <= 30:
                f.writelines("\nAnother Chapter, this Chapter has a hostile relationship another Chapter of the Adeptus Astartes. This may, for example, result in open conflict, or disrupt their activities during joint missions. It may also be worse.")
            elif NumChapterAllies <= 35:
                f.writelines("\nAdeptus Astra Telepathica: this Chapter has enemies among the sanctioned psykers of the Imperium. This may, for example, recude the quality of their astropath communicatons, or prevent them from recruiting psykers from the League of Blackships. It may also be worse.")
            elif NumChapterAllies <= 45:
                f.writelines("\nAdeptus Mechanicus: this Chapter has angered either a forge world, or Mars itself. This may, for example, prevent access to advanced technology, or outright reduce the quality of their techmarines. It may also be worse.")
            elif NumChapterAllies <= 50:
                f.writelines("\nAdepta Sororitas: this Chapter has a negative reputation amongst an Order of the fearsome Sisters of Battle. This may, for example, result in open conflict, or make them less capable of rooting out heretics. It may also be worse.")
            elif NumChapterAllies <= 53:
                f.writelines("\nCollegia Titanica: this Chapter has earned the fierce anger of a titan legion. This may, for example, result in open conflict, or significantly reduce their leverage in Mechanicus politics. It may also be worse.")
            elif NumChapterAllies <= 55:
                f.writelines("\nQuestor Imperialis: this Chapter has earned the proud contempt of a knight, or an entire Household. This may, for example, result in open conflict, or bar them from recruiting from a Knight World's populaton. It may also be worse.")
            elif NumChapterAllies <= 58:
                f.writelines("\nLogis Strategos: this Chapter has somehow antagonized some in the Imperial intelligence agency. This may, for example, result in significantly inferior information of strategic value. It may also be worse.")
            elif NumChapterAllies <= 60:
                f.writelines("\nChartist Captains: this Chapter has angered many amongst the civilian merchant fleet of the Imperium. This may, for example, prevent them from drawing upon the inflexible, but considerable, logistical network the captains maintain. It may also be worse.")
            elif NumChapterAllies <= 65:
                f.writelines("\nAdeptus Ministorum: this Chapter has earned the zealous ire of some in the Ecclesiarchy. This may, for example, bar them from a considerable recruitment pool of faithful, or even result in open conflict. It may also be worse.")
            elif NumChapterAllies <= 75:
                f.writelines("\nAstra Militarum: this Chapter has made enemies with a Regiment of the Imperial Guard. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterAllies <= 79:
                f.writelines("\nNavis Imperialis: this Chapter has gained the displeasure of a battlegroup of the Imperial Navy. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterAllies <= 85:
                f.writelines("\nInquisition: this Chapter has the questionable honor of being on an Inquisitor's bad side. For however long that lasts, they may, for example, suffer a series of unfortunate events. It may also be worse.")
            elif NumChapterAllies <= 88:
                f.writelines("\nNavis Nobilite: this Chapter has somehow pierced the unfathomable politics of the Navigators in such a way that it angered one of their Houses. This may, for example, give them considerable drawbacks when traveling the void. It may also be worse.")
            elif NumChapterAllies <= 91:
                f.writelines("\nOfficio Assassinorum: this Chapter has angered some in the Assassin Temples. This may, for example, result in open conflict, or, if they're very unlucky, hidden conflict. It may also be worse.")
            elif NumChapterAllies <= 93:
                f.writelines("\nPlanetary Defence Force: this Chapter has earned the ire of a local PDF. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterAllies <= 98:
                f.writelines("\nRogue Traders: this Chapter has enemies among some of the Imperium's very own frontier explorers. This may, for example, result in open conflict. It may also be worse.")
            elif NumChapterAllies == 99:
                f.writelines("\nSchola Progenium: this Chapter has made enemies among the orphanages of the Ministorum. This may, for example, bar them access from a small but extremely determined recruitment pool. It may also be worse.")
            elif NumChapterAllies == 100:
                f.writelines("\nAdeptus Custodes: this Chapter has somehow gained a small measure of indignation from some of the Emperor's own guards. This may, for example, give them considerable drawbacks in most Imperial affairs, or result in open conflict. It may also be worse.")
        elif NumChapterEnemies <= 21:
            f.writelines("\nOrks: this Chapter has become proficient fighting greenskins. Where some disregard them as disorganised rabble, these Astartes recognise them for the true threat they are.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 30:
            f.writelines("\nTau Empire: this Chapter has become proficient fighting tau. Ignored by some in the Imperium as insignificant upstarts, these Astartes see the long-term potential of the tau, and the danger of it being realised.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies == 31:
            f.writelines("\nYnnari: this Chapter has become proficient fighting the followers of Ynneard. Despite their recent endeavors to resurrect Roboute Guilliman, these Astartes fully expect betrayal before long.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 42:
            f.writelines("\nAsuryani: this Chapter has become proficient fighting Craftworld Eldar. Thought by some to be the irrelevant remnants of a dying species, these Astartes know all too well the perfidy of these farsighted xenos.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 51:
            f.writelines("\nTyranids: this Chapter has become proficient fighting the invading Hive Fleets. There are voices in the Imperium who consider the threat to have been dealt with, but these Astartes know that so long as a single hive organism remains, the war is not over.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 60:
            f.writelines("\nGenestealer Cults: this Chapter has become proficient rooting out the insidious cults paving the path for their tyranid masters. While often overlooked by others, these Astartes view the premature end of the cults as the ultimate means of preventing tyranid attacks.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 70:
            f.writelines("\nChaos Space Marines: this Chapter has become proficient opposing the Long War. While the threat of the Traitor Legions waxes and wanes, these Astartes are ever vigilant in their persecution of traitor marines, whether the betrayal be ancient or recent.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 75:
            f.writelines("\nDaemons: this Chapter has become proficient combating the Archenemy. While tentatively attempted to be kept secret from the Imperium at large, these Astartes are fully aware of the danger presented by the empyreal minions Chaos.")
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 80:
            f.writelines("\nNon-Imperial Humans: this Chapter has become proficient crushing rebellions, reconquering secessionist territory and bringing forgotten pockets of humanity into the Imperial fold. While some may doubt the decision to send marines to accomplish such tasks, these Astartes are convinced that their presence during such endeavors is a necessity, being the Emperor's angels of death.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 90:
            f.writelines("\nDrukhari: this Chapter has become proficient fighting the Dark Eldar. While often forgotten due to their reclusive nature and penchant for obfuscaton, these Astartes are acutely aware of the toll these insidious xenos take on the Imperium.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies <= 99:
            f.writelines("\nNecrons: this Chapter has become proficient fighting the Necron Dynasties. While sometimes forgotten, and even occasionally attempted controlled, these Astartes have come to understand the true scope of the empire buried beneath countless worlds, and the threat of it awakening and rising once more under their very feet.")            
            f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
            f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
        elif NumChapterEnemies == 100:
            NumChapterOtherEnemies = random.randint (1,100)
            print("Chapter Other Enemies Roll:")
            print(NumChapterOtherEnemies)
            if NumChapterOtherEnemies <= 15:
                f.writelines("\nUmbra: this Chapter has become proficient fighting the mysterious Umbra. Rare enough that most give them little thought, these Astartes have seen what the eldritch fiends are capable of.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 25:
                f.writelines("\nHrud: this Chapter has become proficient fighting the repulsive Hrud. Although a lesser xenos species, what little presence they have on the galactic scale is recognised by these Astartes as potentially catastrophic if left unchecked.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 35:
                f.writelines("\nFra'al: this Chapter has become proficient fighting the monstrous Fra'al. While not a major faction in the galaxy, these Astartes view their nomadic empire as a menace to the Imperium that needs to be stopped before it evolved beyond a minor threat.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 45:
                f.writelines("\nKhrave: this Chapter has become proficient fighting the sinister Khrave. A long-standing, but relatively minor enemy of the Imperium, they are frequently overlooked in favor of more pressing matters. These Astartes, however, consider the mind-eaters and their expansionist empire to be one such pressing matter.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 55:
                f.writelines("\nRak'gol: this Chapter has become proficient fighting the abominable Rak'gol. Considered by some to be little more than a minor pirate problem, these Astartes believe that, if left unchecked, the Rak'gol and their ramshackle technology could become a problem similar to the Tau Empire.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 65:
                f.writelines("\nEnslavers: this Chapter has become proficient fighting the despicable enslavers. Known also as Krell, or Psyrens, there are some who view the endeavor of exterminating them as futile. These Astartes are of the contrary position, viewing them as a potentially apocalyptic threat to the Imperium, as well as the galaxy at large.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 70:
                f.writelines("\nQ'orl: this Chapter has become proficient fighting the Swarmhood. Often forgotten about, these Astartes consider their empire's size and proximity to Terra alone to mark them as a grave threat.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 75:
                f.writelines("\nSlaugth: this Chapter has become proficient fighting the vile dream eaters. Inhabiting forgotten and obscure places, many have never heard of the carrion masters, let alone seen them. These Astartes have, and they are determined to destroy the Slaugth wherever they surface.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 80:
                f.writelines("\nHellgrammite: this Chapter has become proficient fighting the remnants of the Hellgrammite Empire. While many consider them to have been crushed, these Astartes have yet to relent in the persecution of the vile xenos and their occult ways.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 85:
                f.writelines("\nLoxatl: this Chapter has become proficient fighting the amphibious mercenaries known as the Loxatl. Although their homeworld has yet to be found, these Astartes have encountered them on enough battlefields to understand the danger posed by their continued employment by the Imperium's enemies.")            
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 90:
                f.writelines("\nAbominable Intelligences: this Chapter has become proficient fighting the mechanical minds of rogue machine spirits, self-aware cogitators and other Abominable Intelligences. Forgotten by many outside the Mechanicus, these Astartes have learned to maintain a vigilant watch for any signs of renegade machines.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 92:
                f.writelines("\nCreate your own lesser xenos faction.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")
            elif NumChapterOtherEnemies <= 100:
                f.writelines("\nPick literally anyone.")
                f.writelines("\nNaturally, this is unlikely to be their only opponent or the sole subject of their attention.")
                f.writelines("\nNor is it likely they're incapable of combating other threats. This should, more often than not, be considered a preferred enemy.")

## The following code executes the Chapter creation script
        
ChapterCreationTable()